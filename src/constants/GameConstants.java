/*
 This file is part of the OdinMS Maple Story Server
 Copyright (C) 2008 ~ 2010 Patrick Huy <patrick.huy@frz.cc> 
 Matthias Butz <matze@odinms.de>
 Jan Christian Meyer <vimes@odinms.de>

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License version 3
 as published by the Free Software Foundation. You may not use, modify
 or distribute this program under any other version of the
 GNU Affero General Public License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package constants;

import client.MapleBuffStat;
import client.MapleCharacter;
import client.MapleClient;
import client.MapleJob;
import client.MonsterStatus;
import client.PlayerStats;
import client.Skill;
import client.SkillFactory;
import client.inventory.Equip;
import client.inventory.MapleInventoryType;
import client.inventory.MapleWeaponType;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import server.MapleItemInformationProvider;
import server.MapleStatEffect;
import server.Randomizer;
import server.maps.MapleMapObjectType;
import tools.FileoutputUtil;
import tools.Pair;
import tools.packet.CField;

public class GameConstants {
    public static boolean GMS = true; //true = GMS
    public static final List<MapleMapObjectType> rangedMapobjectTypes = Collections.unmodifiableList(Arrays.asList(
            MapleMapObjectType.ITEM,
            MapleMapObjectType.MONSTER,
            MapleMapObjectType.DOOR,
            MapleMapObjectType.REACTOR,
            MapleMapObjectType.SUMMON,
            MapleMapObjectType.NPC,
            MapleMapObjectType.MIST,
            MapleMapObjectType.FAMILIAR,
            MapleMapObjectType.EXTRACTOR));
    //private static final long[] exp = new long[251];
    private static final long[] exp = {
     15, 15, 34, 57, 92, 135, 372, 560, 840, 1242, 1242, 1242, 1242, 1242, 1242,
     1490, 1788, 2145, 2574, 3088, 3705, 4446, 5335, 6402, 7682, 9218, 11061,
     13273, 15927, 19112, 19112, 19112, 19112, 19112, 19112, 22934, 27520, 33024,
     39628, 47553, 51357, 55465, 59902, 64694, 69869, 75458, 81494, 88013, 95054,
     102658, 110870, 119739, 129318, 139663, 150836, 162902, 175934, 190008, 205208,
     221624, 221624, 221624, 221624, 221624, 221624, 239353, 258501, 279181, 301515,
     325636, 351686, 379820, 410205, 443021, 478462, 511954, 547790, 586135, 627164,
     671065, 718039, 768301, 822082, 879627, 941200, 1007084, 1077579, 1153009, 1233719,
     1320079, 1412484, 1511357, 1617151, 1730351, 1851475, 1981078, 2119753, 2268135,
     2426904, 2596787, 2596787, 2596787, 2596787, 2596787, 2596787, 2778562,
     2973061, 3181175, 3403857, 3642126, 3897074, 4169869, 4461759, 4774082,
     5108267, 5465845, 5848454, 6257845, 6695894, 7164606, 7666128, 8202756,
     8776948, 9391334, 10048727, 10752137, 11504786, 12310121, 13171829, 14093857,
     15080426, 16136055, 17265578, 18474168, 19767359, 21151074, 22631649, 24215864,
     25910974, 27724742, 29665473, 31742056/*, 31787791*/, 33963999, 36341478, 38885381,
     41607357, 44519871, 47636261, 50970799, 54538754, 58356466, 62441418, 66812317,
     71489179, 76493421, 81847960, 87577317, 93707729, 100267270, 107285978,
     113723136, 120546524, 127779315, 135446073, 143572837, 152187207, 161318439,
     170997545, 181257397, 192132840, 203660810, 215880458, 228833285, 242563282,
     257117078, 272544102, 288896748, 306230552, 324604385, 344080648, 364725486,
     386609015, 409805555, 434393888, 460457521, 488084972, 517370070, 548412274,
     581317010, 616196030, 653167791, 692357858, 733899329, 777933288, 824609285,
     874085842, 926530992, 982122851, 1041050222, 1103513235, 2207026470L, 2648431764L,
     317811816L, 3813741739L, 4576490086L, 5491788103L, 6590145723L, 7908174867L, 9489809840L,
     11387771808L, 24142076232L, 25590600805L, 27126036853L, 28753599064L, 30478815007L, 32307543907L,
     34245996541L, 36300756333L, 38478801712L, 40787529814L, 84838062013L, 88231584493L, 91760847872L, 
     95431281786L, 99248533057L, 103218474379L, 107347213354L, 111641101888L, 116106745963L, 120751015801L,
     246332072234L, 251258713678L, 256283887951L, 261409565710L, 266637757024L, 271970512164L, 277409922407L,
     282958120855L, 288617283272L, 294389628937L, 594467050452L, 600613720956L, 606619858165L, 612686056746L, 
     618812917313L, 625001046486L, 631251056950L, 637563567519L, 643939203194L, 650378595225L};
    /*
     Infinity Revamp:
     
     Level Exp
     199 1,103,513,235
     200 2,207,026,470
     201 2,648,431,764
     202 3,178,118,116
     203 3,813,741,739
     204 4,576,490,086
     205 5,491,788,103
     206 6,590,145,723
     207 7,908,174,867
     208 9,489,809,840
     209 11,387,771,808
     210 13,665,326,169
     211 16,398,391,402
     212 19,678,069,682
     213 23,613,683,618
     214 28,336,420,341
     215 34,003,704,409
     216 40,804,445,290
     217 48,965,334,348
     218 58,758,401,217
     219 70,510,081,460
     220 84,612,097,752
     221 101,534,517,302
     222 121,841,420,762
     223 146,209,704,914
     224 175,451,645,896
     225 210,541,975,075
     226 252,650,370,090
     227 303,180,444,108
     228 363,816,532,929
     229 436,579,839,514
     230 523,895,807,416
     231 628,674,968,899
     232 754,409,962,678
     233 905,291,955,213
     234 1,086,350,346,255
     235 1,303,620,415,506
     236 1,564,344,498,607
     237 1,877,213,398,328
     238 2,252,656,077,993
     239 2,703,187,293,591
     240 3,243,824,752,309
     241 3,892,589,702,770
     242 4,671,107,643,324
     243 5,605,329,171,988
     244 6,726,395,006,385
     245 8,071,674,007,662
     246 9,686,008,809,194
     247 11,623,210,571,032
     248 13,947,852,685,238
     249 16,737,423,222,285
     250 -
     */
    private static final int[] closeness = {0, 1, 3, 6, 14, 31, 60, 108, 181, 287, 434, 632, 891, 1224, 1642, 2161, 2793,
        3557, 4467, 5542, 6801, 8263, 9950, 11882, 14084, 16578, 19391, 22547, 26074,
        30000};
    private static final int[] setScore = {0, 10, 100, 300, 600, 1000, 2000, 4000, 7000, 10000};
    private static final int[] cumulativeTraitExp = {0, 20, 46, 80, 124, 181, 255, 351, 476, 639, 851, 1084,
        1340, 1622, 1932, 2273, 2648, 3061, 3515, 4014, 4563, 5128,
        5710, 6309, 6926, 7562, 8217, 8892, 9587, 10303, 11040, 11788,
        12547, 13307, 14089, 14883, 15689, 16507, 17337, 18179, 19034, 19902,
        20783, 21677, 22584, 23505, 24440, 25399, 26362, 27339, 28331, 29338,
        30360, 31397, 32450, 33519, 34604, 35705, 36823, 37958, 39110, 40279,
        41466, 32671, 43894, 45135, 46395, 47674, 48972, 50289, 51626, 52967,
        54312, 55661, 57014, 58371, 59732, 61097, 62466, 63839, 65216, 66597,
        67982, 69371, 70764, 72161, 73562, 74967, 76376, 77789, 79206, 80627,
        82052, 83481, 84914, 86351, 87792, 89237, 90686, 92139, 93596, 96000};
    private static final int[] mobHpVal = {0, 15, 20, 25, 35, 50, 65, 80, 95, 110, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350,
        375, 405, 435, 465, 495, 525, 580, 650, 720, 790, 900, 990, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800,
        1900, 2000, 2100, 2200, 2300, 2400, 2520, 2640, 2760, 2880, 3000, 3200, 3400, 3600, 3800, 4000, 4300, 4600, 4900, 5200,
        5500, 5900, 6300, 6700, 7100, 7500, 8000, 8500, 9000, 9500, 10000, 11000, 12000, 13000, 14000, 15000, 17000, 19000, 21000, 23000,
        25000, 27000, 29000, 31000, 33000, 35000, 37000, 39000, 41000, 43000, 45000, 47000, 49000, 51000, 53000, 55000, 57000, 59000, 61000, 63000,
        65000, 67000, 69000, 71000, 73000, 75000, 77000, 79000, 81000, 83000, 85000, 89000, 91000, 93000, 95000, 97000, 99000, 101000, 103000,
        105000, 107000, 109000, 111000, 113000, 115000, 118000, 120000, 125000, 130000, 135000, 140000, 145000, 150000, 155000, 160000, 165000, 170000, 175000, 180000,
        185000, 190000, 195000, 200000, 205000, 210000, 215000, 220000, 225000, 230000, 235000, 240000, 250000, 260000, 270000, 280000, 290000, 300000, 310000, 320000,
        330000, 340000, 350000, 360000, 370000, 380000, 390000, 400000, 410000, 420000, 430000, 440000, 450000, 460000, 470000, 480000, 490000, 500000, 510000, 520000,
        530000, 550000, 570000, 590000, 610000, 630000, 650000, 670000, 690000, 710000, 730000, 750000, 770000, 790000, 810000, 830000, 850000, 870000, 890000, 910000};
    private static final int[] pvpExp = {0, 3000, 6000, 12000, 24000, 48000, 960000, 192000, 384000, 768000};
    private static final int[] guildexp = {0, 20000, 160000, 540000, 1280000, 2500000, 4320000, 6860000, 10240000, 14580000};
    private static final int[] mountexp = {0, 6, 25, 50, 105, 134, 196, 254, 263, 315, 367, 430, 543, 587, 679, 725, 897, 1146, 1394, 1701, 2247,
        2543, 2898, 3156, 3313, 3584, 3923, 4150, 4305, 4550};
    public static final int[] itemBlock = {5200000, 2290653, 4001168, 5220013, 3993003, 2340000, 2049100, 4001129, 2040037, 2040006, 2040007, 2040303, 2040403, 2040506, 2040507, 2040603, 2040709, 2040710, 2040711, 2040806, 2040903, 2041024, 2041025, 2043003, 2043103, 2043203, 2043303, 2043703, 2043803, 2044003, 2044103, 2044203, 2044303, 2044403, 2044503, 2044603, 2044908, 2044815, 2044019, 2044703};
    public static final int[] cashBlock = {5200000, 5062000, 5062001, 5062002, 5062003, 5062005, 5062500, 5610000, 5610001, 5640000, 2531000, 2530000,
        5534000, 5050000, 5510000, 5521000, 5062200, 5062201, 5133000, 5520001, 5030000, 5030001, 5030006,
        5470000, 1122121, 5155000, 5062400, 5700000, 1112909, 5450005, 5040004, 5220000, 5050000, 5062000,
        5062001, 5062002, 5062003, 5211046, 5360000, 5051001, 5590000};
    public static final int[] rankC = {70000000,70000001,70000002,70000003,70000005,70000006,70000007,70000008,70000009,70000010,
70000011,70000051,70000052,70000053,70000054,70000055,70000056,70000057,70000058,70000059,
70000060,70000061,70000062};
     public static final int[] rankB = {70000000,70000001,70000002,70000003,70000005,70000006,70000007,70000008,70000009,70000010,
70000011,70000051,70000052,70000053,70000054,70000055,70000056,70000057,70000058,70000059,
70000060,70000061,70000062};
    public static final int[] rankA = {70000044,70000043,70000042,70000041,70000040,70000011,70000012,70000013,70000014,70000015,70000016,70000017,70000018,
70000021,70000022,70000023,70000024,70000025,70000026,70000025,70000026,70000028,70000029,
70000030,70000031,70000032,70000034,70000035,70000036,70000039,70000045,70000046,70000047,70000048,70000049,70000050,70000035};
    public static final int[] rankS = {70000036,70000039,70000045,70000046,70000047,70000048,70000049,70000050,70000035};

    public static final int[] NebuliteRankBAll = {
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132,
//
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132,
3062000,
3062001
};
public static final int[] NebuliteRankBTop = {  
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
//
3062350,
3062360,
3062320,
3062321,
3062322,
3062323,
3062324,
3062325,
3062330,
3062331,
3062332,
3062333,
3062334,
3062335,
3062340,
3062341,
3062342,
3062343,
3062344,
3062345,
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132
};
public static final int[] NebuliteRankBOverall = { 
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
//
3062350,
3062360,
3062320,
3062321,
3062322,
3062323,
3062324,
3062325,
3062330,
3062331,
3062332,
3062333,
3062334,
3062335,
3062340,
3062341,
3062342,
3062343,
3062344,
3062345,
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132//No weapon
};
public static final int[] NebuliteRankBBottom = {    
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
//
3062350,
3062360,
3062320,
3062321,
3062322,
3062323,
3062324,
3062325,
3062330,
3062331,
3062332,
3062333,
3062334,
3062335,
3062340,
3062341,
3062342,
3062343,
3062344,
3062345,
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132
};
public static final int[] NebuliteRankBGlove = {
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
//
3062370,
3062371,
3062372,
3062373,
3062374,
3062375,
3062380,
3062381,
3062382,
3062383,
3062384,
3062385,
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132
};
public static final int[] NebuliteRankBShoe = {
3062001,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132,
3062080,
3062081,
3062090,
3062091,
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210,
3062240,
3062250,
3062120,
3062121,
3062122,
3062130,
3062131,
3062132
};
public static final int[] NebuliteRankBWeapon = {
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
//
3062100,
3062101,
3062110,
3062111,
3062220,
3062230,
3062260,
3062261,
3062270,
3062271,
3062280,
3062281,
3062290,
3062291,
3062293,
3062294,
3062295,
3062300,
3062301,
3062302,
3062303,
3062304,
3062305,
3062310,
3062000,
3062001,
3062010,
3062011,
3062020,
3062021,
3062030,
3062031,
3062040,
3062041,
3062042,
3062050,
3062051,
3062052,
3062070,
3062071,
3062072,
3062140,
3062150,
3062160,
3062170,
3062180,
3062190,
3062210
};
public static final int[] NebuliteRankAArmor = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
//
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281,
3063121,
3063122,
3063122,
3063130,
3063131,
3063132,
3063240,
3063241,
3063250,
3063251,
3063340,
3063341
};
public static final int[] NebuliteRankABottom = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
//
3063310,
3063320,
3063400,
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281,
3063121,
3063122,
3063122,
3063130,
3063131,
3063132,
3063240,
3063241,
3063250,
3063251,
3063340,
3063341
};
public static final int[] NebuliteRankAOverall = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
//
3063310,//Armor
3063320,//Armor
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281,
3063121,
3063122,
3063122,
3063130,
3063131,
3063132,
3063240,
3063241,
3063250,
3063251,
3063340,
3063341
};
public static final int[] NebuliteRankAAll = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
//
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281,
3063121,
3063122,
3063122,
3063130,
3063131,
3063132,
3063240,
3063241,
3063250,
3063251,
3063340,
3063341
};
public static final int[] NebuliteRankAGlove = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
//
3063360,
3063361,
3063390,  
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281,
3063121,
3063122,
3063122,
3063130,
3063131,
3063132,
3063240,
3063241,
3063250,
3063251,
3063340,
3063341
};
public static final int[] NebuliteRankAHat = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
//
3063290,
3063380, 
3063121,
3063122,
3063122,
3063130,
3063131,
3063132,
3063240,
3063241,
3063250,
3063251,
3063340,
3063341,
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281
};

public static final int[] NebuliteRankAShoe = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
//
3063080,
3063081,
3063090,
3063091,
3063370,   
3063121,
3063122,
3063122,
3063130,
3063131,
3063132,
3063240,
3063241,
3063250,
3063251,
3063340,
3063341,
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281
};

public static final int[] NebuliteRankAWeapon = {
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
//
3063000,
3063001,
3063010,
3063011,
3063020,
3063021,
3063030,
3063031,
3063040,
3063041,
3063042,
3063050,
3063051,
3063052,
3063070,
3063071,
3063072,
3063073,
3063140,
3063141,
3063150,
3063151,
3063160,
3063161,
3063170,
3063171,
3063180,
3063181,
3063190,
3063191,
3063210,
3063211,
3063280,
3063281,  
3063100,
3063101,
3063110,
3063111,
3063220,
3063221,
3063230,
3063231,
3063260,
3063261,
3063270,
3063271,
3063300,
3063350,
3063351
};

public static final int[] NebuliteRankSHat = {
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
//
3064320,
3064420,
3064421,
3064480,    
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311,
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410
};
public static final int[] NebuliteRankSAll = {
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
//
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311,
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410    
};
public static final int[] NebuliteRankSBottom = {
3064000,
3064001,
3064002,
3064010,
//
3064390,//Bottom Overall
3064391,//Bottom Overall
3064392,//Bottom Overall
3064393,//Bottom Overall
3064340,//Bottom Overall
3064341,//Bottom Overall
3064360,//Armor General
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311,
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410
};
public static final int[] NebuliteRankSTop = {
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
//
3064370,//top Overall  
3064330,//Top Overall
3064331,//Top Overall
3064360,//Armor General
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311,
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410
};
public static final int[] NebuliteRankSOverall = {
3064370,//top Overall  
3064330,//Top Overall
3064331,//Top Overall
3064360,//Armor General
3064390,//Bottom Overall
3064391,//Bottom Overall
3064392,//Bottom Overall
3064393,//Bottom Overall
3064340,//Bottom Overall
3064341,//Bottom Overall
3064360,//Armor General
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311,
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410
};
public static final int[] NebuliteRankSGlove = {
3064270,
3064271,
//
3064270,
3064271,
3064272,
3064280,
3064281,
3064282,
3064460,
3064461,
3064490,
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410,
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311
};

public static final int[] NebuliteRankSShoe = {
3064080,
3064081,
3064090,
3064091,
3064470,
3064120,
//
3064080,
3064081,
3064090,
3064091,
3064470,
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410,
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311
};
public static final int[] NebuliteRankSWeapon = {
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
//
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311,
3064410,
3064100,
3064101,
3064110,
3064111,
3064220,
3064221,
3064230,
3064231,
3064260,
3064261,
3064290,
3064291,
3064350,
3064430,
3064431
};
public static final int[] NebuliteRankSAccessory = {
3064400,
3064401,
3064440,    
//
3064400,
3064401,
3064440,
3064441,
3064442,
3064450,
3064451,
3064452, 
3064120,
3064121,
3064122,
3064123,
3064124,
3064130,
3064131,
3064132,
3064133,
3064134,
3064240,
3064241,
3064250,
3064251,
3064410,
3064000,
3064001,
3064002,
3064010,
3064011,
3064012,
3064020,
3064021,
3064022,
3064030,
3064031,
3064032,
3064040,
3064041,
3064042,
3064050,
3064051,
3064052,
3064070,
3064071,
3064072,
3064140,
3064141,
3064150,
3064151,
3064160,
3064161,
3064170,
3064171,
3064180,
3064181,
3064190,
3064191,
3064210,
3064211,
3064300,
3064301,
3064302,
3064310,
3064311
};
    public static final int[] circulators = {2702000, 2700000, 2700100, 2700200, 2700300, 2700400, 2700500, 2700600, 2700700, 2700800, 2700900, 2701000};
    public static final int JAIL = 180000004, MAX_BUFFSTAT = 12;
    public static final int[] blockedSkills = {4341003, 36120045};
    public static final String[] RESERVED = {"Alpha", "Aristocat", "Donor", "MapleNews", "Hack"};
    public static final String[] stats = {"tuc", "reqLevel", "reqJob", "reqSTR", "reqDEX", "reqINT", "reqLUK", "reqPOP", "cash", "cursed", "success", "setItemID", "equipTradeBlock", "durability", "randOption", "randStat", "masterLevel", "reqSkillLevel", "elemDefault", "incRMAS", "incRMAF", "incRMAI", "incRMAL", "canLevel", "skill", "charmEXP"};
    public static final int[] hyperTele = {10000, 20000, 30000, 40000, 50000, 1000000, 1010000, 1020000, 2000000, //Maple Island
        104000000, 104010000, 104010100, 104010200, 104020000, 103010100, 103010000, 103000000, 103050000, 103020000, 103020020, 103020100, 103020200, 103020300, 103020310, 103020320, 103020400, 103020410, 103020420, 103030000, 103030100, 103030200, 103030300, 103030400, 102000000, 102010000, 102010100, 102020000, 102020100, 102020200, 102020300, 102020400, 102020500, 102040000, 102040100, 102040200, 102040300, 102040400, 102040500, 102040600, 102030000, 102030100, 102030200, 102030300, 102030400, 101000000, 101010000, 101010100, 101020000, 101020100, 101020200, 101020300, 101030000, 101030100, 101030200, 101030300, 101030400, 101030500, 101030101, 101030201, 101040000, 101040100, 101040200, 101040300, 101040310, 101040320, 101050000, 101050400, 100000000, 100010000, 100010100, 100020000, 100020100, 100020200, 100020300, 100020400, 100020500, 100020401, 100020301, 100040000, 100040100, 100040200, 100040300, 100040400, 100020101, 106020000, 120010100, 120010000, 120000000, 120020000, 120020100, 120020200, 120020300, 120020400, 120020500, 120020600, 120020700, 120030000, 120030100, 120030200, 120030300, 120030400, 120030500, //Victoria Island
        105000000, 105010000, 105010100, 105020000, 105020100, 105020200, 105020300, 105020400, 105020500, 105030000, 105030100, 105030200, 105030300, 105030400, 105030500, 105100000, 105100100, //Sleepy Wood
        120000100, 120000101, 120000102, 120000103, 120000104, 120000201, 120000202, 120000301, //Nautilus
        103040000, 103040100, 103040101, 103040102, 103040103, 103040200, 103040201, 103040202, 103040203, 103040300, 103040301, 103040302, 103040303, 103040400, //Kerning Square
        200000000, 200010000, 200010100, 200010110, 200010120, 200010130, 200010111, 200010121, 200010131, 200010200, 200010300, 200010301, 200010302, 200020000, 200030000, 200040000, 200050000, 200060000, 200070000, 200080000, 200000100, 200000200, 200000300, 200100000, 200080100, 200080200, 200081500, 200082200, 200082300, 211000000, 211000100, 211000200, 211010000, 211020000, 211030000, 211040000, 211050000, 211040100, 211040200, 921120000, //Orbis
        211040300, 211040400, 211040500, 211040600, 211040700, 211040800, 211040900, 211041000, 211041100, 211041200, 211041300, 211041400, 211041500, 211041600, 211041700, 211041800, 211041900, 211042000, 211042100, 211042200, 211042300, 211042400, 280030000, 211060000, //Dead Mine
        211060010, 211060100, 211060200, 211060201, 211060300, 211060400, 211060401, 211060410, 211060500, 211060600, 211060601, 211060610, 211060620, 211060700, 211060800, 211060801, 211060810, 211060820, 211060830, 211060900, 211061000, 211061001, 211070000, //Lion King's Castle
        220000000, 220000100, 220000300, 220000400, 220000500, 220010000, 220010100, 220010200, 220010300, 220010400, 220010500, 220010600, 220010700, 220010800, 220010900, 220011000, 220020000, 220020100, 220020200, 220020300, 220020400, 220020500, 220020600, 220030100, 220030200, 220030300, 220030400, 220030000, 220040000, 220040100, 220040200, 220040300, 220040400, 220050000, 220050100, 220050200, 221023200, 221022300, 221022200, 221021700, 221021600, 221021100, 221020000, 221000000, 221030000, 221030100, 221030200, 221030300, 221030400, 221030500, 221030600, 221040000, 221040100, 221040200, 221040300, 221040400, 222000000, 222010000, 222010001, 222010002, 222010100, 222010101, 222010102, 222010200, 222010201, 222010300, 222010400, 222020300, 222020200, 222020100, 222020000, //Ludas Lake
        220050300, 220060000, 220060100, 220060200, 220060300, 220060400, 220070000, 220070100, 220070200, 220070300, 220070400, 220080000, 220080001, //Clock Tower Lower Floor
        300000100, 300000000, 300010000, 300010100, 300010200, 300010400, 300020000, 300020100, 300020200, 300030000, 300030100, 300010410, 300020210, 300030200, 300030300, 300030310, //Ellin Forest
        230010000, 230010100, 230010200, 230010201, 230010300, 230010400, 230020000, 230020100, 230020200, 230020201, 230020300, 230030000, 230030100, 230030101, 230030200, 230040000, 230040100, 230040200, 230040300, 230040400, 230040410, 230040420, 230000000, //Aqua Road
        250000000, 250000100, 250010000, 250010100, 250010200, 250010300, 250010301, 250010302, 250010303, 250010304, 250010400, 250010500, 250010501, 250010502, 250010503, 250010600, 250010700, 250020000, 250020100, 250020200, 250020300, 251000000, 251000100, 251010000, 251010200, 251010300, 251010400, 251010401, 251010402, 251010403, 251010500, //Mu Lung Garden
        240010100, 240010200, 240010300, 240010400, 240010500, 240010600, 240010700, 240010800, 240010900, 240011000, 240020000, 240020100, 240020101, 240020200, 240020300, 240020400, 240020401, 240020500, 240030000, 240030100, 240030101, 240030102, 240030200, 240030300, 240040000, 240040100, 240040200, 240040300, 240040400, 240040500, 240040510, 240040511, 240040520, 240040521, 240040600, 240040700, 240050000, 240010000, 240000000, //Minar Forest
        240070000, 240070010, 240070100, 240070200, 240070300, 240070400, 240070500, 240070600, //Neo City
        260010000, 260010100, 260010200, 260010300, 260010400, 260010500, 260010600, 260010700, 260020000, 260020100, 260020200, 260020300, 260020400, 260020500, 260020600, 260020610, 260020620, 260020700, 261000000, 260000000, 926010000, 261010000, 261010001, 261010002, 261010003, 261010100, 261010101, 261010102, 261010103, 261020000, 261020100, 261020200, 261020300, 261020400, 261020500, 261020600, 261020700, 260000300, 260000200, //Nihal Desert
        270000000, 270000100, 270010000, 270010100, 270010110, 270010111, 270010200, 270010210, 270010300, 270010310, 270010400, 270010500, 270020000, 270020100, 270020200, 270020210, 270020211, 270020300, 270020310, 270020400, 270020410, 270020500, 270030000, 270030100, 270030110, 270030200, 270030210, 270030300, 270030310, 270030400, 270030410, 270030411, 270030500, 270040000, 270050000, //Temple of Time
        271000000, 271000100, 271000200, 271000210, 271000300, 271020000, 271020100, 271010000, 271010100, 271010200, 271010300, 271010301, 271010400, 271010500, 271030000, 271030100, 271030101, 271030102, 271030200, 271030201, 271030300, 271030310, 271030320, 271030400, 271030410, 271030500, 271030510, 271030520, 271030530, 271030540, 271030600, 271040000, 271040100, //Gate of Future
        130000000, 130000100, 130000110, 130000120, 130000200, 130000210, 130010000, 130010010, 130010020, 130010100, 130010110, 130010120, 130010200, 130010210, 130010220, 130020000, 130030005, 130030006, 130030000, //Ereve
        140000000, 140010000, 140010100, 140010200, 140020000, 140020100, 140020200, 140030000, 140090000, 140020300, //Rien
        310000000, 310000010, 310020000, 310020100, 310020200, 310030000, 310030100, 310030110, 310030200, 310030300, 310030310, 310040000, 310040100, 310040110, 310040200, 310040300, 310040400, 310050000, 310050100, 310050200, 310050300, 310050400, 310050500, 310050510, 310050520, 310050600, 310050700, 310050800, 310060000, 310060100, 310060110, 310060120, 310060200, 310060210, 310060220, 310060300, 310010000, //Edelstein
        600000000, 600010100, 600010200, 600010300, 600010400, 600010500, 600010600, 600010700, 600020000, 600020100, 600020200, 600020300, 600020400, 600020500, 600020600, 682000000, 610010000, 610010001, 610010002, 610010004, 610020000, 610020001, 610020006, 610040000, 610040100, 610040200, 610040210, 610040220, 610040230, 610040400//Masteria
    };
    public static final int[] unusedNpcs = {9201142, 9201254, 9201030, 9010037, 9010038, 9010039, 9010040, 9300010, 9070004, 9070006, 9000017, 2041017, 9270075, 9000069, 9201029, 9130024, 9330072, 9133080, 9201152, 9330189};
    //Unused npcs will be removed from map once you enter it.
    
    
    /*public static void LoadEXP() {
            exp[1] = 15;
            exp[2] = 34;
            exp[3] = 57;
            exp[4] = 92;
            exp[5] = 135;
            exp[6] = 372;
            exp[7] = 560;
            exp[8] = 840;
            exp[9] = 1242;
            for (int i = 10; i < 200; i++)
            {
                if (i >= 10 && i < 15 ||
                    i >= 30 && i < 35 ||
                    i >= 60 && i < 65 ||
                    i >= 100 && i < 105)
                {
                    exp[i] = exp[i - 1];
                    continue;
                }
                exp[i] = (long)((double)exp[i - 1] * (i < 40 ? 1.2 : i < 75 ? 1.08 : i < 160 ? 1.07 : i < 200 ? 1.06 : 1));
            } //ExtremeDevilz SUCKS
            for (int i = 200; i < 250; i++)
            {
                if (i % 10 == 0)
                {
                    exp[i] = exp[i - 1] * 2;
                    if (i != 200)
                    {
                        exp[i] = (long)((double)exp[i] * (i == 210 ? 1.06 : i == 220 ? 1.04 : i == 230 ? 1.02 : i == 240 ? 1.01 : 1));
                    }
                    continue;
                }
                exp[i] = (long)((double)exp[i - 1] * (i < 210 ? 1.2 : i < 220 ? 1.06 : i < 230 ? 1.04 : i < 240 ? 1.02 : i < 250 ? 1.01 : 1));
            }
            exp[250] = 0;
        }*/

    public static long getExpNeededForLevel(final int level) {
        if (level < 1 || level >= exp.length) {
            return Long.MAX_VALUE;
        }
        return exp[level];
    }

    public static int getGuildExpNeededForLevel(final int level) {
        if (level < 0 || level >= guildexp.length) {
            return Integer.MAX_VALUE;
        }
        return guildexp[level];
    }

    public static int getPVPExpNeededForLevel(final int level) {
        if (level < 0 || level >= pvpExp.length) {
            return Integer.MAX_VALUE;
        }
        return pvpExp[level];
    }

    public static int getClosenessNeededForLevel(final int level) {
        return closeness[level - 1];
    }

    public static int getMountExpNeededForLevel(final int level) {
        return mountexp[level - 1];
    }

    public static int getTraitExpNeededForLevel(final int level) {
        if (level < 0 || level >= cumulativeTraitExp.length) {
            return Integer.MAX_VALUE;
        }
        return cumulativeTraitExp[level];
    }

    public static int getSetExpNeededForLevel(final int level) {
        if (level < 0 || level >= setScore.length) {
            return Integer.MAX_VALUE;
        }
        return setScore[level];
    }

    public static int getMonsterHP(final int level) {
        if (level < 0 || level >= mobHpVal.length) {
            return Integer.MAX_VALUE;
        }
        return mobHpVal[level];
    }

    public static int getBookLevel(final int level) {
        return (int) ((5 * level) * (level + 1));
    }

    public static int getTimelessRequiredEXP(final int level) {
        return 70 + (level * 10);
    }

    public static int getReverseRequiredEXP(final int level) {
        return 60 + (level * 5);
    }

    public static int getProfessionEXP(final int level) {
        return ((100 * level * level) + (level * 400)) / 2;
    }

    public static boolean isHarvesting(final int itemId) {
        return itemId >= 1500000 && itemId < 1520000;
    }

    public static int maxViewRangeSq() {
        return 10000000; // 1024 * 768
    }

    public static int maxViewRangeSq_Half() {
        return 5000000; // 800 * 800
    }

    public static boolean isJobFamily(final int baseJob, final int currentJob) {
        return currentJob >= baseJob && currentJob / 100 == baseJob / 100;
    }

    public static short getBeginnerJob(final short job) {
        if (job % 1000 < 10) {
            return job;
        }
        switch (job / 100) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                return 0;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
                return 1000;
            case 20:
                return 2000;
            case 21:
                return 2000;
            case 22:
                return 2001;
            case 23:
                return 2002;
            case 24:
                return 2003;
            case 27:
                return 2004;
            case 31:
                return 3001;
            case 36:
                return 3002;
            case 30:
            case 32:
            case 33:
            case 35:
                return 3000;
            case 41:
                return 4001;
            case 42:
                return 4002;
            case 50:
            case 51:
                return 5000;
            case 60:
            case 61:
                return 6000;
            case 65:
                return 6001;
            case 100:
            case 110:
                return 10000;
        }
        return 0;
    }
    
    public static short get4thJob(final short job) {
        switch (job / 1) {
            case 112:
                return 112;
            case 122:
                return 122;
            case 133:
                return 132;
            case 212:
                return 212;
            case 222:
                return 112;
            case 312:
                return 312;
            case 322:
                return 322;
            case 412:
                return 412;
            case 422:
                return 422;
            case 432:
                return 437;
            case 512:
                return 512;
            case 522:
                return 522;
            case 532:
                return 532;
            case 572:
                return 572;
            case 1112:
                return 1112;
            case 1212:
                return 1212;
            case 1312:
                return 1312;
            case 6512:
                return 6512;
            /*case 151:
                return 1512;*/
            case 2112:
                return 2112;
            case 2212:
                return 2217;
            case 2312:
                return 2312;
            case 2412:
                return 2412;
            case 2712:
                return 2712;
            case 3112:
                return 3112;
            case 3122:
                return 3122;
            case 3212:
                return 3212;
            case 3312:
                return 3312;
            case 3512:
                return 3512;
            case 3612:
                return 3612;    
            case 4112:
                return 4112;    
            case 4212:
                return 4212;    
            case 5112:
                return 5112;    
            case 6112:
                return 6112;    
            case 10112:
                return 10112;    
            /*case 1120:
                return 11212;*/
        }
        return 0;
    }

    public static boolean isKOC(final int job) {
        return job >= 1000 && job < 2000;
    }

    public static boolean isEvan(final int job) {
        return job == 2001 || (job / 100 == 22);
    }
    
     public static boolean isBattleMage(final int job) {
        return job >= 3200 && job < 3212;
    }

    public static boolean isMercedes(final int job) {
        return job == 2002 || (job / 100 == 23);
    }

    public static boolean isJett(final int job) {
        return job == 508 || (job / 10 == 57);
    }

    public static boolean isPhantom(final int job) {
        return job == 2003 || (job / 100 == 24);
    }

    public static boolean isWildHunter(final int job) {
        return job == 3000 || (job >= 3300 && job <= 3312);
    }
    
    public static boolean isDawnWarrior(final int job){
        return job == 1000 || (job >= 1100 && job <= 1112);
    }
    
    public static boolean isBlazeWizard(final int job){
        return (job >= 1200 && job <= 1212);
    }
    
    public static boolean isWindArcher(final int job) { //woops xD:3
        return job == 1300 || (job >= 1310 && job <= 1312);
    }
    
//    public static boolean isSeparatedSp(int job) {
////        System.err.println(job);
////        System.err.println(isSeparatedSp(job));
//        int jobGrade = getTrueJobGrade(job);
//        return job / 1000 == 0 || //new explorers revamped RED
//                job / 1000 == 1 // cygnus
//                && (jobGrade == 0 || jobGrade == 5 || jobGrade == 3 || jobGrade == 1)// thunder breaker wind archer and dawn warrior
//                || job / 1000 == 3 // resistance
//                || job / 100 == 22 // evan
//                || job == 2001 // evan
//                || isMercedes(job)
//                || isPhantom(job)
//                || isMihile(job)
//                || isLuminous(job)
//                || isNova(job)
//                || isZero(job)
//                || isJett(job)
//                || isSengoku(job);
//    }
    public static boolean isSeparatedSp(int job) {
        //return isAdventurer(job) || isZero(job) || isKOC(job) || isEvan(job) || isResist(job) || isMercedes(job) || isJett(job) || isPhantom(job) || isMihile(job) || isNova(job) || isAngelicBuster(job) || isKaiser(job) || isLuminous(job) || isHayato(job) || isKanna(job) || isDemonAvenger(job);
        if (isKOC(job)) {
            if (getTrueJobGrade(job) == 2 || getTrueJobGrade(job) == 4) {
                return false;
            }
        } if (isAran(job) || isBeastTamer(job)) {
            return false;
        }
        return true;
    }

    public static int getTrueJobGrade(int job) {
        int result;
        int jobGrade = job % 1000 / 100;
        if (job / 100 == 27)
            jobGrade = 2;
        result = 4;
        if (job / 100 != 36)
            result = jobGrade;
        return result;
    }

    public static boolean isDualBladeNoSP(int job) {
        return job == 430 ? true : job == 432;
    }

    public static boolean isDemonSlayer(final int job) {
        return job == 3001 || (job >= 3100 && job <= 3112 && job != 3101);
    }

    public static boolean isAran(final int job) {
        return job >= 2000 && job <= 2112 && job != 2001 && job != 2002 && job != 2003;
    }

    public static boolean isResist(final int job) {
        return job / 1000 == 3;
    }

    public static boolean isAdventurer(final int job) {
        return job >= 0 && job < 1000;
    }

    public static boolean isCannon(final int job) {
        return job == 1 || job == 501 || (job >= 530 && job <= 532);
    }

    public static boolean isDualBlade(final int job) {
        return (job >= 430 && job <= 434);
    }

    public static boolean isMihile(final int job) {
        return job == 5000 || (job >= 5100 && job <= 5112);
    }

    public static boolean isLuminous(final int job) {
        return job == 2004 || (job >= 2700 && job <= 2712);
    }

    public static boolean isKaiser(final int job) {
        return job == 6000 || (job >= 6100 && job <= 6112);
    }

    public static boolean isAngelicBuster(final int job) {
        return job == 6001 || (job >= 6500 && job <= 6512);
    }

    public static boolean isNova(final int job) {
        return job / 1000 == 6;
    }

    public static boolean isXenon(final int job) {
        return job == 3002 || (job >= 3600 && job <= 3612);
    }

    public static boolean isHayato(int job) {
        return job == 4001 || (job >= 4100 && job <= 4112);
    }

    public static boolean isKanna(int job) {
        return job == 4002 || (job >= 4200 && job <= 4212);
    }
    
     public static boolean isMagician(int job) {
        return (job >= 200 && job <= 232);
    }
     
     public static boolean isPirate(int job) {
        return (job >= 500 && job <= 532);
    }
     
    public static boolean isThief(int job) {
        return (job >= 400 && job <= 432);
    }
    
     public static boolean isNightWalker(int job) {
        return (job >= 1400 && job <= 1412);
    }
     
     public static boolean isArcher(int job) {
        return (job >= 300 && job <= 322);
    }
     
     public static boolean isWarrior(int job) {
        return (job >= 100 && job <= 132);
    }
     
    public static boolean isWarriorJob(int job) {
        return isWarrior(job) || isAran(job) || isDemonAvenger(job) || isDemonSlayer(job) || isMihile(job) || isKaiser(job) || isHayato(job);
    }
    
    public static boolean isMageJob(int job) {
        return isMagician(job) || isLuminous(job) || isBlazeWizard(job) || isEvan(job) || isBattleMage(job) || isKanna(job);
    }
    
    public static boolean isArcherJob(int job) {
        return isArcher(job) || isWindArcher(job) || isWildHunter(job) || isMercedes(job);
    }
    
    public static boolean isThiefJob(int job) {
        return isThief(job) || isPhantom(job) || isDualBlade(job) || isNightWalker(job) || isXenon(job);
    }
    
    public static boolean isPirateJob(int job) {
        return isPirate (job) || isAngelicBuster(job) || isJett(job) || isPirate(job) || isCannon(job) || isXenon(job) || isMechanic(job);
    }

    public static boolean isSengoku(int job) {
        return job / 1000 == 4;
    }

    public static boolean isDemonAvenger(int job) {
        return job == 3001 || job == 3101 || (job >= 3120 && job <= 3122);
    }

    public static boolean isZero(int job) {
        return job == 10000 || (job >= 10100 && job <= 10112);
    }

    public static boolean isExceedAttack(int id) {
        switch (id) {
            case 31011000:
            case 31011004:
            case 31011005:
            case 31011006:
            case 31011007:
            case 31201000:
            case 31201007:
            case 31201008:
            case 31201009:
            case 31201010:
            case 31211000:
            case 31211007:
            case 31211008:
            case 31211009:
            case 31211010:
            case 31221000:
            case 31221009:
            case 31221010:
            case 31221011:
            case 31221012:
                return true;
        }
        return false;
    }
    
    public static boolean isBatterySkill(int id) {
        switch (id) {
            case 65001100:
            case 65101100:
            case 65111101:
            case 65121007:
            case 65121100:
            case 65111007:
            case 65121101:
            case 65111100:
                return true;
        }
        return false;
    }
    
    public static boolean isOnActiveSkill(int id) {
        switch (id) {
            case 60011216:
            case 65001100:
            case 65101001:
            case 65101100:
            case 65111100:
            case 65111101:
            case 65111002:
            case 65121100:
            case 65121101:
            case 65121002:
            case 65111007:
                return true;
        }
        return false;
    }
    public static boolean isHyperCooldownSkill(int id) {
        switch (id) {
case 65121002:
case 65121003:
case 32111003:
case 32121003:
case 21111009:
case 22181002:
case 1221011:
case 2121003:
case 2311009:
case 3221007:
case 4341011:
case 35111002:
case 41121002:
case 42121005:
case 1320016:
case 5721006:
case 24121005:                  
                return true;
        }
        return false;
    }
        public static boolean isChangeable(int id) {
        switch (id) {
            case 9306000:
                return true;
        }
        return false;
    }
        
        public short changeExp(short level, MapleCharacter chr) {
        switch (chr.getLevel()) {
            case 100:
                    return 100; 
            case 140:
                   return 140;
        }
        return 1;
        }
    
    
    public static int getKaiserMode(int id) {
        switch (id) {
            case 61100005:
            case 61110005:
            case 61120010:
                return 60001216;
        }
        return 0;
    }

    public static int getLuminousSkillMode(int id) {
        switch (id) {
            case 27001100:
            case 27101100:
            case 27111100:
            case 27111101:
            case 27121100:
                return 20040216;//light
            case 27001201:
            case 27101202:
            case 27111202:
            //case 27121201:
            case 27121202:
            //case 27120211:
                return 20040217;//dark
 //           case 27111303:
 //           case 27121303:
 //               return 20040220;
        }
        return 0;
    }
    
    public static boolean isFinisherSkill(int skillid) {
        switch (skillid) {
            case 1111003:             
            case 1111005:                
            case 11111002:               
            case 11111003:              
            case 1101012:
                return true;
        }
        return false;
    }
    
        public static boolean isLightSkills(int skillid) {
        switch (skillid) {
            case 27001100:
            case 27101100:
            case 27101101: 
            case 27111100:
            case 27111101: 
            case 27121100:
                return true;
        }
        return false;
    }

    public static boolean isDarkSkills(int skillid) {
        switch (skillid) {
            case 27001201:
            case 27101202:
            case 27111202:
            case 27121201: 
            case 27121202:
            case 27120211:
                return true;
        }
        return false;
    }
    
   

    public static int getLinkSkillByJob(final int job) {
        if (isCannon(job)) { //Pirate Blessing
            return 80000000;
        } else if (isKOC(job)) { //Cygnus Blessing
            return 80000070;
        } else if (isMercedes(job)) { //Elven Blessing
            return 80001040;
        } else if (isDemonSlayer(job)) { //Fury Unleashed
            return 80000001;
        } else if (isDemonAvenger(job)) { //Wild Rage
            return 80000050;
        } else if (isJett(job)) { //Core Aura
            return 80001151;
        } else if (isPhantom(job)) { //Phantom Instinct
            return 80000002;
        } else if (isMihile(job)) { //Knight's Watch
            return 80001140;
        } else if (isLuminous(job)) { //Light Wash
            return 80000005;
        } else if (isAngelicBuster(job)) { //Terms and Conditions   
            return 80001155;
        } else if (isHayato(job)) { //Keen Edge  
            return 80000003;
        } else if (isKanna(job)) { //Elementalism    
            return 40020002;
        } else if (isKaiser(job)) { //Iron Will
            return 80000006;
        } else if (isXenon(job)) { //Hybrid Logic    
            return 80000047;
        } else if (isBeastTamer(job)) { //Focus Spirit    
            return 80010006;
        }
        return 0;
    }

    public static boolean isRecoveryIncSkill(final int id) {
        switch (id) {
            case 1110000:
            case 2000000:
            case 1210000:
            case 11110000:
            case 4100002:
            case 4200001:
                return true;
        }
        return false;
    }

    public static boolean iskaiser_Transfiguration_Skill(int id) {
        Skill skill = SkillFactory.getSkill(getLinkedAttackSkill(id));
        if ((skill.getName().contains("(Transfiguration)")) || (skill.getId() == 61111114) || (skill.getId() == 61121015) || (skill.getId() == 61121116) || (skill.getId() == 61120018) || (skill.getId() == 61001004) || (skill.getId() == 61001005) || (skill.getId() == 61110009) || (skill.getId() == 61111113) || (skill.getId() == 61120008)) {
            return true;
        }
        return false;
    }
    
    public static boolean isLinkedAttackSkill(final int id) {
        return getLinkedAttackSkill(id) != id;
    }

    public static final int getLinkedAttackSkill(final int id) {
        switch (id) {
            case 3120019:
          return 3121013;            
            case 36121013:
            case 36121014:
                return 36121002;
            case 21110015:
            case 21110007:
            case 21110008:
                return 21110002;
            case 21000006:
                    return 21000002;
            case 31121010:
                    return 31121000;
            case 3101009:
                return 3100010;
            case 3120016:
                return 3120017;
            case 21120015: 
            case 21120009:
            case 21120010:
                return 21120002;
            case 4321001:
                return 4321000;
            case 33101008:
                return 33101004;
            case 35101009:
            case 35101010:
                return 35100008;
            case 35121013:
                return 35120013;
            case 35121011:
                return 35121009;
            case 35111009:
            case 35111010: //새틀라이트
                return 35111001;
            case 35100004:
                return 35101004;
            case 32001007:
            case 32001008:
            case 32001009:
            case 32001010:
            case 32001011:
                return 32001001;
            case 5300007:
                return 5301001;
            case 5320011:
                return 5321004;
            case 23101007:
                return 23101001;
            case 23111010:
            case 23111009:
                return 23111008;
            case 31001006:
            case 31001007:
            case 31001008:
                return 31000004;
            case 27120211:
                return 27121201; //모닝 스타폴
            case 61001004:
            case 61001005:
            case 61110212:
            case 61120219:
                return 61001000; //드래곤슬래시
            case 61110211:
            case 61120007:
            case 61121217:
                return 61101002; //윌오브소드
            case 61111215:
                return 61001101; // 플레임 샷
            case 61111217:
                return 61101101; // 피어스 러쉬
            case 61111216:
                return 61101100; // 임팩트 웨이브
            case 61111219:
                return 61111101; // 체인풀링
            case 61111113:
            case 61111218:
                return 61111100; //윙비트 - 커맨드
            case 61121201:
                return 61121100; //기가슬래셔
            case 61121203:
                return 61121102; //블루스트릭
            case 61110009:
                return 61111003; //리게인 스트렝스
            /*case 61121217:
             return 61120007; //어드밴스드 월오브소드*/
            case 61121116:
                return 61121104; //소드스트라이크 - 폭팔
            case 61121223:
                return 61121221; //소드 스트라이크 - 폭팔
            case 61121221:
                return 61121104; // 소드 스트라이크
            case 65101006:
                return 65101106;
            case 65121007:
            case 65121008:
                //return 65121101;
            case 61111220:
                return 61121105; // 인퍼널 브레스
            //case 61120018:
            //      return 61121105;
            //카이저끝
            case 65111007: //소울 시커
                return 65111100;
            case 4100012: //마크 오브 어쌔신
                return 4100011;
            case 24121010:
                return 24121003;
            case 24111008:
                return 24111006;
            case 5001008:
                return 5001005;
            case 61121053://kaiser hyper
            case 61120008:
                return 61111008;
            case 51100006:
                return 51101006;
            case 31011004:
            case 31011005:
            case 31011006:
            case 31011007:
                return 31011000;
            case 31201007:
            case 31201008:
            case 31201009:
            case 31201010:
                return 31201000;
            case 31211007:
            case 31211008:
            case 31211009:
            case 31211010:
                return 31211000;
            case 31221009:
            case 31221010:
            case 31221011:
            case 31221012:
                return 31221000;
            case 31211011:
                return 31211002;
            case 31221014:
                return 31221001;
            case 25100010:
                return 25100009;
            case 25120115:
                return 25120110;
            case 36101008:
            case 36101009:
                return 36101000;
            case 36111010:
            case 36111009:
                return 36111000;
            case 36121011:
            case 36121012:
                return 36121001;
            case 35100009:
                return 35100009;
            case 2121055:
                return 2121052;
            case 11121055:
                return 11121052;
            case 1120017:
                return 1121008;
            case 25000003:
                return 25001002;
            case 25000001:
                return 25001000;
            case 25100001:
                return 25101000;
            case 25110001:
            case 25110002:
            case 25110003:
                return 25111000;
            case 25120001:
            case 25120002:
            case 25120003:
                return 25121000;
            case 95001000:
                return 3111013; // 애로우 플래터
            case 4210014: //메소 익스플로젼
                return 4211006;
            case 101000102: //어드밴스드 파워 스텀프(충격파) 
                return 101000101;
            // 나워 시작
            case 14101021:
                return 14101020; // 트리플 스로우
            case 14111021:
                return 14111020; // 쿼드러플 스로우
            case 14111023:
                return 14111022; // 스타더스트
            case 14121002:
                return 14121001; // 퀸터플 스로우
            // 나워 끝
            //플위 시작
            case 12120011:
                return 12121001;
            case 12120012:
                return 12121003;
        //   case 101000102:
      //          return 101000101;
            case 101000202:
                return 101000201;
            case 101100202:
                return 101100201;
            case 101110201:
                return 101110200;
            case 101110204:
                return 101110203;
            case 101120101:
                return 101120100;
            case 101120103:
                return 101120102;
            case 101120105:
            case 101120106:
                return 101120104;
            case 101120203:
                return 101120202;
            case 101120205:
            case 101120206:
                return 101120204;
            case 101120200:
                return 101121200;
            case 41001005:
            case 41001004:
                return 41001000;
            case 41101009:
            case 41101008:
                return 41101000;
            case 41111012:
            case 41111011:
                return 41111000;
            case 41001000:
                return 41001002;
           // case 41120013:
            case 41001002:
            case 41121012:
            case 41121011:
                return 41121000;
            case 42001006:
            case 42001005:
                return 42001000;
            case 42001007:
                return 42001002;
            case 42100010:
                return 42101001;
            case 33101006:
            case 33101007:
                return 33101005;
            case 35001001:
                return 35101009;
            case 42111011:
                return 42111000;
            // 플위 끝
        }
        return id;
    }


        public static boolean isSpecialBuff(final int skillid) {
        switch (skillid) {
            case 23101003://Spirit Surge
            case 65101002://Power Transfer
            case 4111002://Final Feint
            case 4211008://Shadow Partner
            case 14111000://Shadow Partner
            case 4331002://Mirror Image
            case 36111006://Manifest Projector
            case 15121004://Arc Charger
            case 31121054://Blue Blood
            case 65121004://Star Gazer
                return true;
        }
        return false;
    }  
    
    public final static boolean isForceIncrease(int skillid) {
        switch (skillid) {
            case 24100003:
            case 24120002:
            case 31000004:
            case 31001006:
            case 31001007:
            case 31001008:
            //case 31121010:
            case 30010166:
            case 30011167:
            case 30011168:
            case 30011169:
            case 30011170:
                return true;
        }
        return false;
    }

    public static int findSkillByName(String name, int job, int def) {
        int skillid = 0;
        for (Skill skill : SkillFactory.getAllSkills()) {
            if (skill.getName() != null && skill.getName().toLowerCase().contains(name.toLowerCase())) {
                if (skill.getId() / 10000 == job) {
                    skillid = skill.getId();
                }
            }
        }
        if (skillid != 0) {
            return skillid;
        } else {
            return def;
        }
    }

    public static int getBOF_ForJob(final int job) {
        return PlayerStats.getSkillByJob(12, job);
    }

    public static int getEmpress_ForJob(final int job) {
        return PlayerStats.getSkillByJob(73, job);
    }

    public static boolean isElementAmp_Skill(final int skill) {
        switch (skill) {
            case 2110001:
            case 2210001:
            case 12110001:
            case 22150000:
                return true;
        }
        return false;
    }
    
    public static int getMPByJob(int job) {
        switch (job) {
            case 3100:
                return 30;
            case 3110:
                return 60;
            case 3111:
                return 100;
            case 3112:
                return 120;
        }
        return 30; // beginner or 3100
    }

    public static int getMPEaterForJob(final int job) {
        switch (job) {
            case 210:
            case 211:
            case 212:
                return 2100000;
            case 220:
            case 221:
            case 222:
                return 2200000;
            case 230:
            case 231:
            case 232:
                return 2300000;
        }
        return 2100000; // Default, in case GM
    }

    public static int getJobShortValue(int job) {
        if (job >= 1000) {
            job -= (job / 1000) * 1000;
        }
        job /= 100;
        if (job == 4) { // For some reason dagger/ claw is 8.. IDK
            job *= 2;
        } else if (job == 3) {
            job += 1;
        } else if (job == 5) {
            job += 11; // 16
        }
        return job;
    }

    public static boolean isPyramidSkill(final int skill) {
        return isBeginnerJob(skill / 10000) && skill % 10000 == 1020;
    }

    public static boolean isInflationSkill(final int skill) {
        return isBeginnerJob(skill / 10000) && skill % 10000 == 1092 || isBeginnerJob(skill / 10000) && skill % 10000 == 1094;
    }
    
     public static boolean isInflationSkill2(final int skill) {
        return isBeginnerJob(skill / 10000) && skill % 10000 == 1095;
    }
     
    public static boolean isMulungSkill(final int skill) {
        return isBeginnerJob(skill / 10000) && (skill % 10000 == 1009 || skill % 10000 == 1010 || skill % 10000 == 1011);
    }

    public static boolean isIceKnightSkill(final int skill) {
        return isBeginnerJob(skill / 10000) && (skill % 10000 == 1098 || skill % 10000 == 99 || skill % 10000 == 100 || skill % 10000 == 103 || skill % 10000 == 104 || skill % 10000 == 1105);
    }

    public static boolean isTownSkill(final int skill) {
        switch (skill) {
            case 1281: //maple island
            case 10001245: //ereve
            case 20021110: //elluel
            case 20031203: //lumiere
            case 30021235: //veritas
            case 60011220: //pantheon
            case 100001262: //zero temple
                return true;
        }
        return false;
    }

    public static boolean isThrowingStar(final int itemId) {
        return itemId / 10000 == 207;
    }

    public static boolean isBullet(final int itemId) {
        return itemId / 10000 == 233;
    }

    public static boolean isRechargable(final int itemId) {
        return isThrowingStar(itemId) || isBullet(itemId);
    }

    public static boolean isOverall(final int itemId) {
        return itemId / 10000 == 105;
    }
    
    public static boolean isNebulite(final int itemId) {
        return itemId >= 3062000 && itemId <= 3064490;
    }

    public static boolean isPet(final int itemId) {
        return itemId / 10000 == 500;
    }

    public static boolean isArrowForCrossBow(final int itemId) {
        return itemId >= 2061000 && itemId < 2062000;
    }

    public static boolean isArrowForBow(final int itemId) {
        return itemId >= 2060000 && itemId < 2061000;
    }

    public static boolean isMagicWeapon(final int itemId) {
        final int s = itemId / 10000;
        return s == 137 || s == 138; // wand, staff
    }

    public static boolean isWeapon(final int itemId) {
        return itemId >= 1210000 && itemId < 1702631;
    }

    public static boolean isSecondaryWeapon(final int itemId) {
        return itemId / 10000 == 135;
    }

    public static boolean isBowgun(final int itemId) {
        return itemId >= 1522000 && itemId < 1523000;
    }

    public static boolean isCane(final int itemId) {
        return itemId >= 1362000 && itemId < 1363000;
    }

    public static boolean isMagicArrow(final int itemId) {
        return itemId >= 1352000 && itemId < 1352100;
    }

    public static boolean isCard(final int itemId) {
        return itemId >= 1352100 && itemId < 1352200;
    }
    
    public static boolean isFaceAccesory(final int itemId) {
        return itemId >= 1010000 && itemId < 1012458;
    }
    
    public static boolean isEyeAccesory(final int itemId) {
        return itemId >= 1020000 && itemId < 1022227;
    }
    
    public static boolean isEarring(final int itemId) {
        return itemId >= 1032000 && itemId < 1032225;
    }
    
    public static boolean isPendant(final int itemId) {
        return itemId >= 1122000 && itemId < 1122272;
    }
    
    public static boolean isBelt(final int itemId) {
        return itemId >= 1132000 && itemId < 1132260;
    }
    
    public static boolean isShoulder(final int itemId) {
        return itemId >= 1152000 && itemId < 1152161;
    }
    
    public static boolean isBadge(final int itemId) {
        return itemId >= 1182000 && itemId < 1182068;
    }
    
    public static boolean isEmblem(final int itemId) {
        return itemId >= 1190000 && itemId < 1190302;
    }
    
    public static boolean isCap(final int itemId) {
        return itemId >= 1000000 && itemId < 1004091;
    }
    
    public static boolean isTotem(int itemId) {
        return itemId / 10000 ==  120;
    }
    
    public static boolean isCape(final int itemId) {
        return itemId / 10000 ==  110;
    }
    
    public static boolean isCoat(final int itemId) {
        return itemId / 10000 ==  104;
    }
    
    public static boolean isDragon(final int itemId) {
        return itemId / 10000 ==  197;
    }
    
    public static boolean isFace(final int itemId) {
        return itemId >= 20000 && itemId < 24810;
    }
    
    public static boolean isGlove(final int itemId) {
        return itemId / 10000 ==  108;
    }
    
    public static boolean isHair(final int itemId) {
        return itemId >= 30000 && itemId < 47467;
    }
    
     public static boolean isLongCoat(final int itemId) {
        return itemId / 10000 ==  105;
    }
    
     public static boolean isMechanic(final int itemId) {
        return itemId >= 1612000 && itemId < 1652004;
    }
     
     public static boolean isBottom(final int itemId) {
        return itemId / 10000 ==  106;
    }
     
    public static boolean isPetEquip(final int itemId) {
        return itemId >= 1802000 && itemId < 1832000;
    }
    
    public static boolean isShoes(final int itemId) {
        return itemId / 10000 ==  107;
    }
     
    public static boolean isResistance(final int job) {
        return job / 1000 == 3;
    }
    
    public static boolean isCore(final int itemId) {
        return itemId >= 1352300 && itemId < 1352400;
    }
    
    public static boolean isGM(int job) {
        return job == 910 || job == 900 || (job >= 900 && job <= 910);
    }

    public static boolean isGMEquip(final int itemId) {
        switch (itemId) {
            case 1042003:
            case 1062007:
            case 1002140:
            case 1003142:
            case 1322013:
            case 1002959:
                return true;
        }
        return false;
    }

    public static boolean isOverPoweredEquip(final MapleClient c, final int itemId, short slot) {
        Equip source = (Equip) c.getPlayer().getInventory(MapleInventoryType.EQUIP).getItem(slot);
        return source.getAcc() > 600
                || source.getAvoid() > 600
                || source.getDex() > 200
                || source.getEnhance() > 14
                || source.getHands() > 100
                || source.getHp() > 1000
                || source.getInt() > 200
                || source.getJump() > 100
                || source.getSpeed() > 100
                || source.getLuk() > 200
                || source.getMatk() > 500
                || source.getMdef() > 1500
                || source.getMp() > 1000
                || source.getStr() > 200
                || source.getUpgradeSlots() > 32
                || source.getViciousHammer() > 2
                || source.getWatk() > 500
                || source.getWdef() > 1500 /*|| source.getLevel() > 32*/;
    }

    public static boolean isMadeByGM(final MapleClient c, final int itemId, short slot) {
        Equip source = (Equip) c.getPlayer().getInventory(MapleInventoryType.EQUIP).getItem(slot);
        MapleCharacter gm = c.getChannelServer().getPlayerStorage().getCharacterByName(source.getOwner());
        if (source.getOwner() == null || source.getOwner().isEmpty() || gm == null) {
            return false;
        }
        return gm.isStaff();
    }

    public static MapleInventoryType getInventoryType(final int itemId) {
        final byte type = (byte) (itemId / 1000000);
        if (type < 1 || type > 5) {
            return MapleInventoryType.UNDEFINED;
        }
        return MapleInventoryType.getByType(type);
    }

    public static boolean isInBag(final int slot, final byte type) {
        return ((slot >= 101 && slot <= 512) && type == MapleInventoryType.ETC.getType());
    }

    public static MapleWeaponType getWeaponType(final int itemId) {
        int cat = itemId / 10000;
        cat = cat % 100;
        switch (cat) { // 39, 50, 51 ??
            case 21:
                return MapleWeaponType.ROD;
            case 22:
                return MapleWeaponType.SOUL_SHOOTER;
            case 24:
                return MapleWeaponType.WHIP_BLADE;
            case 30:
                return MapleWeaponType.SWORD1H;
            case 31:
                return MapleWeaponType.AXE1H;
            case 32:
                return MapleWeaponType.BLUNT1H;
            case 33:
                return MapleWeaponType.DAGGER;
            case 34:
                return MapleWeaponType.KATARA;
            case 35:
                return MapleWeaponType.MAGIC_ARROW; // can be magic arrow or cards
            case 36:
                return MapleWeaponType.CANE;
            case 37:
                return MapleWeaponType.WAND;
            case 38:
                return MapleWeaponType.STAFF;
            case 40:
                return MapleWeaponType.SWORD2H;
            case 41:
                return MapleWeaponType.AXE2H;
            case 42:
                return MapleWeaponType.BLUNT2H;
            case 43:
                return MapleWeaponType.SPEAR;
            case 44:
                return MapleWeaponType.POLE_ARM;
            case 45:
                return MapleWeaponType.BOW;
            case 46:
                return MapleWeaponType.CROSSBOW;
            case 47:
                return MapleWeaponType.CLAW;
            case 48:
                return MapleWeaponType.KNUCKLE;
            case 49:
                return MapleWeaponType.GUN;
            case 52:
                return MapleWeaponType.DUAL_BOW;
            case 53:
                return MapleWeaponType.CANNON;
            case 54:
                return MapleWeaponType.ZERO_SWORD;
            case 55:
                return MapleWeaponType.FAN;
            case 56:
                return MapleWeaponType.BIG_SWORD;
            case 57:
                return MapleWeaponType.LONG_SWORD;
        }
        if (GameConstants.isWeapon(itemId)) {
        System.out.println("Found new Weapon: " + cat + ", ItemId: " + itemId);
        }
        return MapleWeaponType.NOT_A_WEAPON;
    }

    public static int getEquipForJob(final int job) {
        if (!MapleJob.isExist(job)) {
            return -1;
        }
        switch (job / 10) {
            case 10:
            case 11:
            case 12:
                return 130;
            case 13:
                return 143;
            case 20:
            case 21:
            case 22:
            case 23:
                return 138;
            case 30:
            case 31:
                return 145;
            case 32:
                return 146;
            case 40:
            case 41:
                return 147;
            case 42:
            case 43:
                return 133;
            case 50:
            case 51:
                return 148;
            case 52:
            case 57:
                return 149;
            case 53:
                return 153;
        }
        switch (job / 100) {
            case 11:
                return 130;
            case 12:
                return 138;
            case 13:
                return 145;
            case 14:
                return 147;
            case 15:
                return 148;
            case 21:
                return 144;
            case 22:
                return 137;
            case 23:
                return 152;
            case 24:
                return 136;
            case 27:
                return 121;
            case 31:
                return 132;
            case 32:
                return 138;
            case 33:
                return 146;
            //case 34:
            //    return ;
            case 35:
                return 149;
            case 41:
                return 154;
            case 42:
                return 155;
            //case 43:
            //    return ;
            //case 44:
            //    return ;
            //case 45:
            //    return ;
            case 51:
                return 130;
            //case 52:
            //    return ;
            //case 53:
            //    return ;
            //case 54:
            //    return ;
            //case 55:
            //    return ;
            case 61:
                return 140;
            //case 62:
            //    return ;
            //case 63:
            //    return ;
            //case 64:
            //    return ;
            case 65:
                return 122;
        }
        return -1;
    }

    public static boolean isShield(final int itemId) {
        int cat = itemId / 10000;
        cat = cat % 100;
        return cat == 9;
    }

    public static boolean isEquip(final int itemId) {
        return itemId / 1000000 == 1;
    }

    public static boolean isCleanSlate(int itemId) {
        return itemId / 100 == 20490;
    }

    public static boolean isAccessoryScroll(int itemId) {
        return itemId / 100 == 20492;
    }

    public static boolean isChaosScroll(int itemId) {
        if (itemId >= 2049105 && itemId <= 2049110) {
            return false;
        }
        return itemId / 100 == 20491 || itemId == 2040126;
    }
    
    public static boolean isInnocenceScroll(int itemId) {
        return itemId / 100 == 20496 || itemId == 2049608 || itemId == 2049609;
    }
    
     public static boolean isRecipe(int itemId) {
        return itemId / 10000 == 251;
    }
     
    public static int getChaosNumber(int itemId) {
        return itemId == 2049116 ? 10 : 5;
    }
    
    public static int geticsogNumber(int itemId) {
        return 10;
    }
    
    public static int getNumber(int itemId) {
        return 5;
    }
    public static boolean isEquipScroll(int scrollId) {
        return scrollId / 100 == 20493;
    }

    public static boolean isPotentialScroll(int scrollId) {
        return scrollId / 100 == 20494 || scrollId / 100 == 20497 || scrollId == 5534000;
    }

    public static boolean isAzwanScroll(int scrollId) {
        //return MapleItemInformationProvider.getInstance().getEquipStats(scroll.getItemId()).containsKey("tuc");
        //should add this ^ too.
        return scrollId >= 2046060 && scrollId <= 2046069 || scrollId >= 2046141 && scrollId <= 2046145 || scrollId >= 2046519 && scrollId <= 2046530 || scrollId >= 2046701 && scrollId <= 2046712;
    }

    public static boolean isSpecialSlotScroll(int scrollId) {
        return MapleItemInformationProvider.getInstance().getEquipStats(scrollId).containsKey("tuc");
    }

    public static boolean isSpecialScroll(final int scrollId) {
        switch (scrollId) {
            case 2040727: // Spikes on show
            case 2041058: // Cape for Cold protection
            case 2530000:
            case 2530001:
            case 2530004:
            case 2531000:
            case 5063000:
            case 5064000:
            case 5064003:
            //case 2048314:
            case 5064300: //Guardian Scroll
                return true;
        }
        return false;
    }
    
     public static boolean isCashSpecialScroll(final int scrollId) {
        switch (scrollId) {
            case 5063000:
            case 5064000:
            case 5064003:
            //case 2048314:
            case 5064300: //Guardian Scroll
                return true;
        }
        return false;
    }

    public static boolean isTwoHanded(final int itemId) {
        switch (getWeaponType(itemId)) {
            case AXE2H:
            case GUN:
            case KNUCKLE:
            case BLUNT2H:
            case BOW:
            case CLAW:
            case CROSSBOW:
            case POLE_ARM:
            case SPEAR:
            case SWORD2H:
            case CANNON:
            case DUAL_BOW:
            case BIG_SWORD:
            case LONG_SWORD:
                return true;
            default:
                return false;
        }
    }
    public static boolean isTyrant(final int itemId) {
        switch (itemId) {
            //Boots
            case 1072743:
            case 1072744:
            case 1072745:
            case 1072746:
            case 1072747:
            //Capes    
            case 1102481:
            case 1102482:    
            case 1102483:    
            case 1102484:    
            case 1102485:    
            //Belts
            case 1132174:    
            case 1132175:
            case 1132176:
            case 1132177:
            case 1132178:   
         //   case 1082543: Warrior Gloves
         //   case 1082544: Mage Gloves
         //   case 1082545: Bowman Gloves
         //   case 1082546: Thief Gloves
         //   case 1082547: Pirate Gloves       
                //Gloves Are not in 144.3 so they're commented out
                return true;
            default:
                return false;
        }
    }
    
    public static boolean isNovaGear(final int itemId) {
            switch (itemId) {
            //Boots
            case 1072737: // Nova Hyades Boots
            case 1072738: // Nova Hermes Boots
            case 1072739: // Nova Charon Boots
            case 1072740: // Nova Lycaon Boots
            case 1072741: // Nova Altair Boots

            //Cape
            case 1102476: // Nova Hyades Cloak
            case 1102477: // Nova Hermes Cloak
            case 1102478: // Nova Charon Cloak
            case 1102479: // Nova Lycaon Cloak
            case 1102480: // Nova Altair Cloak

            //Belt
            case 1132169: // Nova Hyades Belt
            case 1132170: // Nova Hermes Belt
            case 1132171: // Nova Charon Belt
            case 1132172: // Nova Lycaon Belt
            case 1132173: // Nova Altair Belt
                    return true;
            default:
                return false;
        }
    }
    
    public static boolean isSpecialShield(final int itemid) {
        return itemid / 1000 == 1098 || itemid / 1000 == 1099 || itemid / 10000 == 135;
    }

    public static boolean isTownScroll(final int id) {
        return id >= 2030000 && id < 2040000;
    }

    public static boolean isUpgradeScroll(final int id) {
        return id >= 2040000 && id < 2050000 || id == 2047954 ||  id == 2530004 || id == 2531000 || id == 2615001 || id == 2615000;
    }

    public static boolean isGun(final int id) {
        return id >= 1492000 && id < 1500000;
    }

    public static boolean isUse(final int id) {
        return id >= 2000000 && id < 3000000;
    }

    public static boolean isSummonSack(final int id) {
        return id / 10000 == 210;
    }

    public static boolean isMonsterCard(final int id) {
        return id / 10000 == 238;
    }

    public static boolean isSpecialCard(final int id) {
        return id / 1000 >= 2388;
    }

    public static int getCardShortId(final int id) {
        return id % 10000;
    }

    public static boolean isGem(final int id) {
        return id >= 4250000 && id <= 4251402;
    }

    public static boolean isOtherGem(final int id) {
        switch (id) {
            case 4001174:
            case 4001175:
            case 4001176:
            case 4001177:
            case 4001178:
            case 4001179:
            case 4001180:
            case 4001181:
            case 4001182:
            case 4001183:
            case 4001184:
            case 4001185:
            case 4001186:
            case 4031980:
            case 2041058:
            case 2040727:
            case 1032062:
            case 4032334:
            case 4032312:
            case 1142156:
            case 1142157:
                return true; //mostly quest items
        }
        return false;
    }

    public static boolean isCustomQuest(final int id) {
        return id > 99999;
    }

    public static int getTaxAmount(final int meso) {
        if (meso >= 100000000) {
            return (int) Math.round(0.06 * meso);
        } else if (meso >= 25000000) {
            return (int) Math.round(0.05 * meso);
        } else if (meso >= 10000000) {
            return (int) Math.round(0.04 * meso);
        } else if (meso >= 5000000) {
            return (int) Math.round(0.03 * meso);
        } else if (meso >= 1000000) {
            return (int) Math.round(0.018 * meso);
        } else if (meso >= 100000) {
            return (int) Math.round(0.008 * meso);
        }
        return 0;
    }

    public static int EntrustedStoreTax(final int meso) {
        if (meso >= 100000000) {
            return (int) Math.round(0.03 * meso);
        } else if (meso >= 25000000) {
            return (int) Math.round(0.025 * meso);
        } else if (meso >= 10000000) {
            return (int) Math.round(0.02 * meso);
        } else if (meso >= 5000000) {
            return (int) Math.round(0.015 * meso);
        } else if (meso >= 1000000) {
            return (int) Math.round(0.009 * meso);
        } else if (meso >= 100000) {
            return (int) Math.round(0.004 * meso);
        }
        return 0;
    }

    public static int getAttackDelay(final int id, final Skill skill) {
        switch (id) { // Assume it's faster(2)
            case 3121004: // Storm of Arrow
            case 24121000:
            case 24121005:
            case 23121000:
            case 33121009:
            case 13111002: // Storm of Arrow
            case 5221004: // Rapidfire
            case 5721001: // Rapidfire
            case 5201006: // Recoil shot/ Back stab shot
            case 35121005:
            case 35111004:
            case 35121013:
            case 31121005:
            case 24120002:
            case 24100003:
                return 40; //reason being you can spam with final assaulter
            case 14111005:
            case 4121013:
            case 4121007:
            case 5221007:
            case 112100000: // Leopard's Paw
            case 112100002: // Leopard's Pounce
            case 112100003: // Leopard's Roar   
            case 112001004: // Deep Breath
            case 112001005: // Really Deep Breath
            case 112001006: // Majestic Trumpet
            case 112121004: // Fire Kitty
            case 112121057: // Cat's Cradle Blitzkrieg
            case 112121005: // Purr Zone
            case 112121013: // Meow Heal  
            case 112001008: // Fishy Slap
                return 99; //skip duh chek
            case 0: // Normal Attack, TODO delay for each weapon type
                return 570;
        }
        if (skill != null && skill.getSkillType() == 3) {
            return 0; //final attack
        }
        if (skill != null && skill.getDelay() > 0 && !isNoDelaySkill(id)) {
            return skill.getDelay();
        }
        // TODO delay for final attack, weapon type, swing,stab etc
        return 330; // Default usually
    }

    public static byte gachaponRareItem(final int id) {
        switch (id) {
case 4021010://Rock of Time
case 1003108://Android Headgear
case 1072446://Android Boots
case 1082275://Android Gloves
case 1062125://Android Legs
case 1042191://Android Vest
case 1050169://Blizzard Armor
case 1072447://Blizzard Boots
case 1102246://Blizzard Cape
case 1082276://Blizzard Gloves
case 1000040://Blizzard Helmet
case 1012309://Blood Mask
case 1372035://Elemental Wand 1
case 1372036://Elemental Wand 2
case 1372037://Elemental Wand 3
case 1372038://Elemental Wand 4
case 1372039://Elemental Wand 5
case 1372040://Elemental Wand 6
case 1372041://Elemental Wand 7
case 1372042://Elemental Wand 8
case 1072344://Facestompers
case 1082246://Flamekeeper Cordon 
case 1052589://Frilly Black Bean Suit
case 1052588://Frilly Pink Bean Suit
case 1032183://Shaman Earrings
case 1001060://Snow Ice's Fur Hat
case 1082223://Stormcaster Gloves
case 1102165://Taru Spirit Cape
case 1462205://Terminus Bolter
case 1312166://Terminus Chopper
case 1322216://Terminus Crusher
case 1422153://Terminus Demolisher
case 1412148://Terminus Devastator
case 1302290://Terminus Divider
case 1402211://Terminus Dominator
case 1372189://Terminus Enchanter
case 1472227://Terminus Executioner
case 1222075://Terminus Firebreather
case 1542068://Terminus Grand Master
case 1212080://Terminus Illuminator
case 1432179://Terminus Impaler
case 1242081://Terminus Jaeger
case 1382223://Terminus Mesmerizer
case 1362102://Terminus Orchestrator
case 1332239://Terminus Prowler
case 1492191://Terminus Raider
case 1522106://Terminus Raptor
case 1532110://Terminus Scorcher
case 1342086://Terminus Silencer
case 1452217://Terminus Stormchaser
case 1482180://Terminus Striker
case 1552068://Terminus Summoner
case 1232075://Terminus Vanquisher
case 1442235://Terminus Warmonger
case 1112585://Angelic Blessing
case 1332241://Courage Wings
case 1302292://Courage Wings
case 1312168://Courage Wings
case 1322218://Courage Wings
case 1182060://Ghost Ship Exorcist
case 1152134://Krexel Pauldron
case 1112690://Legendary Black Dragon Ring
case 1122059://Mark of Naricain
case 1032104://Rex's Perfect Blue Earrings
case 1032102://Rex's Perfect Green Earrings
case 1032103://Rex's Perfect Red Earrings
case 1312173://Sweetwater Axe
case 1132247://Sweetwater Belt
case 1452226://Sweetwater Bow
case 1362109://Sweetwater Cane
case 1102623://Sweetwater Cape
case 1242090://Sweetwater Chain Sword
case 1462213://Sweetwater Crossbow
case 1232084://Sweetwater Demon Sword
case 1032224://Sweetwater Earrings
case 1022211://Sweetwater Glasses
case 1082556://Sweetwater Gloves
case 1482189://Sweetwater Grip
case 1532118://Sweetwater Hand Cannon
case 1003976://Sweetwater Hat
case 1542072://Sweetwater Katana
case 1342090://Sweetwater Katara
case 1332247://Sweetwater Knife
case 1322223://Sweetwater Mace
case 1422158://Sweetwater Maul
case 1122269://Sweetwater Pendant
case 1442242://Sweetwater Polearm
case 1212089://Sweetwater Shining Rod
case 1072870://Sweetwater Shoes
case 1492199://Sweetwater Shooter
case 1152160://Sweetwater Shoulder
case 1222084://Sweetwater Soul Shooter
case 1432187://Sweetwater Spear
case 1382231://Sweetwater Staff
case 1472235://Sweetwater Steer
case 1052669://Sweetwater Suit
case 1302297://Sweetwater Sword
case 1012438://Sweetwater Tattoo
case 1252033://Sweetwater Tigress Scepter
case 1522113://Sweetwater Twin Angels
case 1412152://Sweetwater Two-Handed Axe
case 1402220://Sweetwater Two-Handed Sword
case 1372195://Sweetwater Wand
case 1552072://Sweetwater Wind
case 1452219://Swift Wings
case 1132212://Tinkerer's Green Belt
case 1152121://Tinkerer's Green Shoulder Accessory
case 1132211://Tinkerer's Yellow Belt
case 1152120://Tinkerer's Yellow Shoulder Accessory
case 1492193://Triumphant Wings
case 1472229://Triumphant Wings
case 1482182://Triumphant Wings
case 1003755://Unleashed Snow
case 1442237://Valiant Wings
case 1412150://Valiant Wings
case 1422155://Valiant Wings
case 1432181://Valiant Wings
case 1402213://Valiant Wings
case 1382225://Wings of Wisdom
case 1372191://Wings of Wisdom
case 1082447://Zakum's Rock Fist
case 1122151://Chaos Horntail Necklace (+2)
case 1112597://Cygnus Kohinoor Ring
case 1112586://Dark Angelic Blessing
case 1012285://Dark Premium Symbol
case 1372084://Dragon Tail Arc Wand
case 1552015://Dragon Tail Fan
case 1102276://Dragon Tail Mage Cape
case 1082296://Dragon Tail Mage Gloves
case 1052315://Dragon Tail Mage Robe
case 1003173://Dragon Tail Mage Sallet
case 1072486://Dragon Tail Mage Shoes
case 1152110://Dragon Tail Mage Shoulder
case 1212014://Dragon Tail Thanatos
case 1382104://Dragon Tail War Staff
case 1332031://Dragon Toenail
case 1452111://Falcon Wing Composite Bow
case 1522018://Falcon Wing Dual Bowguns
case 1462099://Falcon Wing Heavy Crossbow
case 1072487://Falcon Wing Sentinel Boots
case 1003174://Falcon Wing Sentinel Cap
case 1102277://Falcon Wing Sentinel Cape
case 1082297://Falcon Wing Sentinel Gloves
case 1152111://Falcon Wing Sentinel Shoulder
case 1052316://Falcon Wing Sentinel Suit
case 1182006://Hero of Legend
case 1112666://High Lord's Eternal Ring
case 1152156://Inverse Metal Shoulder (Missing Codex)
case 1252058://Ardentmill Lumiclaw Scepter
case 1003893://Rare Alien Fragment Helmet
case 1112665://Berserker's Eternal Ring
case 1032110://Blazing Sun Earrings
case 1012283://Blazing Sun Face Paint
case 1112662://Blazing Sun Ring
case 1252014://Kitten Tail Scepter
case 1113020://Lightning God's Ring
case 1152108://Lion Heart Battle Shoulder
case 1412065://Lionheart Battle Axe
case 1072485://Lionheart Battle Boots
case 1082295://Lionheart Battle Bracers
case 1102275://Lionheart Battle Cape
case 1322096://Lionheart Battle Hammer
case 1052314://Lionheart Battle Mail
case 1402095://Lionheart Battle Scimitar
case 1422066://Lionheart Blast Maul
case 1312065://Lionheart Champion Axe
case 1302152://Lionheart Cutlass
case 1432086://Lionheart Fuscina
case 1232014://Lionheart Painful Destiny
case 1442116://Lionheart Partisan
case 1542015://Lionheart Red King
case 1332235://Meister Angelic Betrayal
case 1222072://Meister Angelic Shooter
case 1412144://Meister Battle Axe
case 1452214://Meister Battle Bow
case 1422149://Meister Battle Hammer
case 1432176://Meister Battle Spear
case 1382220://Meister Battle Staff
case 1402204://Meister Claymore
case 1532106://Meister Crash
case 1462202://Meister Crossbow
case 1472223://Meister Dark Slain
case 1232071://Meister Death Bringer
case 1522103://Meister Eagle Wing
case 1032200://Meister Earring
case 1372186://Meister Evil Wand
case 1302285://Meister Gladius
case 1482177://Meister Griffey Claw
case 1442232://Meister Hellslayer
case 1492188://Meister Infinity's Wrath
case 1542075://Meister Katana
case 1342084://Meister Katara
case 1362099://Meister Persona
case 1152154://Meister Shoulder
case 1242076://Meister Split Edge
case 1212077://Meister Thanatos
case 1312162://Meister War Cleaver
case 1322213://Meister Warhammer
case 1552075://Meister Wind
case 1112667://Oracle's Eternal Ring
case 1032135://Premium Gold Emerald Earrings
case 1182067://RED Warrior's Badge
case 1072488://Raven Horn Chaser Boots
case 1102278://Raven Horn Chaser Cape
case 1082298://Raven Horn Chaser Gloves
case 1003175://Raven Horn Chaser Hat
case 1362019://Raven Horn Crimson Cane
case 1242042://Raven Horn Fallen Queen
case 1472122://Raven Horn Metal Fist
case 1342036://Raven Horn Shadow Katara
case 1182011://Renegade Justice Badge
case 1032093://Rising Sun Earrings
case 1112584://Rising Sun Ring
case 1332226://Scarlet Angelic Betrayal
case 1222060://Scarlet Angelic Shooter
case 1412136://Scarlet Battle Axe
case 1452206://Scarlet Battle Bow
case 1422141://Scarlet Battle Hammer
case 1432168://Scarlet Battle Spear
case 1402197://Scarlet Claymore
case 1532099://Scarlet Crash
case 1462194://Scarlet Crossbow
case 1472215://Scarlet Dark Slain
case 1232058://Scarlet Death Bringer
case 1522095://Scarlet Eagle Wings
case 1032216://Scarlet Earring
case 1372178://Scarlet Evil Wand
case 1302276://Scarlet Gladius
case 1482169://Scarlet Griffey Claw
case 1442224://Scarlet Hellslayer
case 1492180://Scarlet Infinity's Wrath
case 1342083://Scarlet Katara
case 1362091://Scarlet Persona
case 1113070://Scarlet Ring
case 1242062://Scarlet Split Edge
case 1242063://Scarlet Split Edge
case 1212065://Scarlet Thanatos
case 1312154://Scarlet War Cleaver
case 1322204://Scarlet War Hammer
case 1242014://Shark Tooth Fallen Queen
case 1492085://Shark Tooth Sharpshooter
case 1072489://Shark Tooth Skipper Boots
case 1102279://Shark Tooth Skipper Cape
case 1052318://Shark Tooth Skipper Coat
case 1082299://Shark Tooth Skipper Gloves
case 1152113://Shark Tooth Skipper Shoulder
case 1222014://Shark Tooth Soul Drinker
case 1532018://Shark Tooth Supernova
case 1482084://Shark Tooth Wild Talon
case 1182019://Shiny Rainbow Badge
case 1082399://Super Stormcaster Gloves
case 1003361://Super Zakum Helmet
case 1113074:
case 1113075:
case 1113073:
case 1113072:
case 1132243:
case 1132244:
case 1132245:
case 1132246:
case 1122264:
case 1122265:
case 1122266:
case 1122267:
case 1032220:
case 1032221:
case 1032222:
case 1032223:
case 1132215://Tinkerer's Black Belt
case 1152124://Tinkerer's Black Shoulder Accessory
case 1132213://Tinkerer's Blue Belt
case 1152122://Tinkerer's Blue Shoulder Accessory
case 1132214://Tinkerer's Red Belt
case 1152123://Tinkerer's Red Shoulder Accessory
case 1112663://White Angelic Blessing
case 1012411://White Premium Meister Symbol
case 1112664://Guardian's Eternal Ring
case 1132230://Alien Fragment Belt
case 1032191://Alien Fragment Earrings
case 1122256://Alien Fragment Necklace
case 1182157:
case 1202089:
case 1202090:
case 1202091:
case 1202187:
case 1202188:
case 1202189:
case 1202118:
case 1202119:
case 2430346:
case 2430307:
case 2430348:
case 2430362:
case 2430354:
case 2430360:
case 2430352:
case 2430343:
case 2430358:
case 2430356:
case 2432504:
case 2430321:
case 2430339:
case 2430350:
case 2430331:
case 2430327:
case 2430341:
case 2430335:
case 2430317:
case 2430319:
case 2430306:
case 2430337:
case 2430329:
case 2430309:
case 2430305:
case 2430333:
case 2430291:
case 2430293:
case 2430296:
case 2430323:
case 2430303:
case 2430301:
case 2430295:
case 2430325:
case 2430298:
case 2430299:
case 2430297:
case 3063400:
case 3063390:
case 3063380:
case 3063370:
case 3064490:
case 3064480:
case 3064470:
case 3064461:
case 3064460:
case 3064452:
case 3064451:
case 3064450:
case 3064442:
case 3064441:
case 3064440:
case 3064431:
case 3064430:
case 3064421:
case 3064420:
case 3064410:
case 3064401:
case 3064400:
case 3064393:
case 3064392:
case 3064391:
case 3064390:
case 3064380:
case 3064370:
case 3064360:
case 3064350:
case 3064341:
case 3064340:
case 3064331:
case 3064330:
case 3064320:
case 3064311:
case 3064310:
case 3064302:
case 3064301:
case 3064300:
case 3064291:
case 3064290:
case 3064282:
case 3064281:
case 3064280:
case 3064272:
case 3064271:
case 3064270:
case 3064261:
case 3064260:
case 3064251:
case 3064250:
case 3064241:
case 3064240:
case 3064231:
case 3064230:
case 3064221:
case 3064220:
case 3064211:
case 3064210:
case 3064201:
case 3064200:
case 3064191:
case 3064190:
case 3064181:
case 3064180:
case 3064171:
case 3064170:
case 3064161:
case 3064160:
case 3064151:
case 3064150:
case 3064141:
case 3064140:
case 3064134:
case 3064133:
case 3064132:
case 3064131:
case 3064130:
case 3064124:
case 3064123:
case 3064122:
case 3064121:
case 3064120:
case 3064111:
case 3064110:
case 3064101:
case 3064100:
case 3064091:
case 3064090:
case 3064081:
case 3064080:
case 3064072:
case 3064071:
case 3064070:
case 3064062:
case 3064061:
case 3064060:
case 3064052:
case 3064051:
case 3064050:
case 3064042:
case 3064041:
case 3064040:
case 3064032:
case 3064031:
case 3064030:
case 3064022:
case 3064021:
case 3064020:
case 3064012:
case 3064011:
case 3064010:
case 3064002:
case 3064001:
case 3064000:
case 3010041:
case 3010071:
case 3010085:
case 3010106:
case 3010126:
case 3010127:
case 3010128:
case 3010403:
case 2040006:
case 2040007:
case 2040303:
case 2040403:
case 2040506:
case 2040507:
case 2040603:
case 2040709:
case 2040710:
case 2040711:
case 2040806:
case 2040807:
case 2040903:
case 2041024:
case 2041025:
case 2043003:
case 2043103:
case 2043203:
case 2043303:
case 2043703:
case 2043803:
case 2044003:
case 2044203:
case 2044103:
case 2044303:
case 2044403:
case 2044503:
case 2044603:
case 2044703:
case 2046829:
case 2046830:
case 2048082:
case 2048083:
case 2048094:
case 2048095:
case 2049004:
case 2049005:   
case 2049122:
case 2049309:
case 2049311:
case 2049312:
case 2049313:
case 2046964:
case 2046965:
case 2046304:
case 2046305:
case 2046306:
case 2046307:
case 2046300:
case 2046301:
case 2046302:
case 2046303:
case 2046207:
case 2046564:
case 2046094:
case 2046095:
case 2046162:
case 2046163:
case 2046200:
case 2046201:
case 2046202:
case 2046203:
case 2046204:
case 2046205:
case 2046206:
case 2046160:
case 2046161:
case 2046100:
case 2046101:
case 2046102:
case 2046103:
case 2046092:
case 2046093:
case 2046002:
case 2046003:
case 2046000:
case 2046001:
case 2044908:
case 2044910:
case 2044815:
case 2044817:
case 2044712:
case 2044713:
case 2044612:
case 2044613:
case 2044512:
case 2044513:
case 2044417:
case 2044420:
case 2044317:
case 2044320:
case 2044217:
case 2044220:
case 2044117:
case 2044120:
case 2044025:
case 2044028:
case 2043812:
case 2043813:
case 2043712:
case 2043713:
case 2043312:
case 2043313:
case 2043217:
case 2043220:
case 2043117:
case 2043120:
case 2043023:
case 2043022:
case 2041068:
case 2041069:
case 2040943:
case 2040936:
case 2040833:
case 2040834:
case 2040829:
case 2040830:
case 2040630:
case 2040629:
case 2040333:
case 2040041:
case 2040042:
case 2040045:
case 2040046:
case 2040334:
case 2040429:
case 2040430:
case 2040538:
case 2040539:
case 2040542:
case 2040543:
case 2040740:
case 2040741:
case 2040742:
case 2040755:
case 2040756:
case 2040757:
case 2040758:
case 2040759:
case 2040760:
case 2049100:
case 2049131:
case 2049119:
case 2049133:
case 5064300:
case 2530000:
case 2531000:
case 2048314:
case 1003797:
case 1042254:
case 1062165:
case 1302275:
case 1312153:
case 1322203:
case 1402196:
case 1412135:
case 1422140:
case 1432167:
case 1442223:
case 1232057:
case 1542063:
case 1003798:
case 1042255:
case 1062166:
case 1212063:
case 1372177:
case 1382208:
case 1252015:
case 1003799:
case 1042256:
case 1062167:
case 1452205:
case 1462193:
case 1522094:
case 1003800:
case 1042257:
case 1062168:
case 1242060:
case 1332225:
case 1362090:
case 1472214:
case 1003801:
case 1042258:
case 1062169:
case 1222058:
case 1242061:
case 1482168:
case 1492179:
case 1532098:
case 1122380:
case 1122385:
case 1122390:
case 1122395:
case 1122400:
case 1122405:
case 1122410:
case 1122415:
return 2;
            //1 = wedding msg o.o
        }
        return 0;
    }
    public final static int[] goldrewards = {
        2049400, 1,
        2049401, 2,
        2049301, 2,
        2340000, 1, // white scroll
        2070007, 2,
        2070016, 1,
        2330007, 1,
        2070018, 1, // balance fury
        1402037, 1, // Rigbol Sword
        2290096, 1, // Maple Warrior 20
        2290049, 1, // Genesis 30
        2290041, 1, // Meteo 30
        2290047, 1, // Blizzard 30
        2290095, 1, // Smoke 30
        2290017, 1, // Enrage 30
        2290075, 1, // Snipe 30
        2290085, 1, // Triple Throw 30
        2290116, 1, // Areal Strike
        1302059, 3, // Dragon Carabella
        2049100, 1, // Chaos Scroll
        1092049, 1, // Dragon Kanjar
        1102041, 1, // Pink Cape
        1432018, 3, // Sky Ski
        1022047, 3, // Owl Mask
        3010051, 1, // Chair
        3010020, 1, // Portable meal table
        2040914, 1, // Shield for Weapon Atk

        1432011, 3, // Fair Frozen
        1442020, 3, // HellSlayer
        1382035, 3, // Blue Marine
        1372010, 3, // Dimon Wand
        1332027, 3, // Varkit
        1302056, 3, // Sparta
        1402005, 3, // Bezerker
        1472053, 3, // Red Craven
        1462018, 3, // Casa Crow
        1452017, 3, // Metus
        1422013, 3, // Lemonite
        1322029, 3, // Ruin Hammer
        1412010, 3, // Colonian Axe

        1472051, 1, // Green Dragon Sleeve
        1482013, 1, // Emperor's Claw
        1492013, 1, // Dragon fire Revlover

        1382049, 1,
        1382050, 1, // Blue Dragon Staff
        1382051, 1,
        1382052, 1,
        1382045, 1, // Fire Staff, Level 105
        1382047, 1, // Ice Staff, Level 105
        1382048, 1, // Thunder Staff
        1382046, 1, // Poison Staff

        1372035, 1,
        1372036, 1,
        1372037, 1,
        1372038, 1,
        1372039, 1,
        1372040, 1,
        1372041, 1,
        1372042, 1,
        1332032, 8, // Christmas Tree
        1482025, 7, // Flowery Tube

        4001011, 8, // Lupin Eraser
        4001010, 8, // Mushmom Eraser
        4001009, 8, // Stump Eraser

        2047000, 1,
        2047001, 1,
        2047002, 1,
        2047100, 1,
        2047101, 1,
        2047102, 1,
        2047200, 1,
        2047201, 1,
        2047202, 1,
        2047203, 1,
        2047204, 1,
        2047205, 1,
        2047206, 1,
        2047207, 1,
        2047208, 1,
        2047300, 1,
        2047301, 1,
        2047302, 1,
        2047303, 1,
        2047304, 1,
        2047305, 1,
        2047306, 1,
        2047307, 1,
        2047308, 1,
        2047309, 1,
        2046004, 1,
        2046005, 1,
        2046104, 1,
        2046105, 1,
        2046208, 1,
        2046209, 1,
        2046210, 1,
        2046211, 1,
        2046212, 1,
        //list
        1132014, 3,
        1132015, 2,
        1132016, 1,
        1002801, 2,
        1102205, 2,
        1332079, 2,
        1332080, 2,
        1402048, 2,
        1402049, 2,
        1402050, 2,
        1402051, 2,
        1462052, 2,
        1462054, 2,
        1462055, 2,
        1472074, 2,
        1472075, 2,
        //pro raven
        1332077, 1,
        1382082, 1,
        1432063, 1,
        1452087, 1,
        1462053, 1,
        1472072, 1,
        1482048, 1,
        1492047, 1,
        2030008, 5, // Bottle, return scroll
        1442018, 3, // Frozen Tuna
        2040900, 4, // Shield for DEF
        2049100, 10,
        2000005, 10, // Power Elixir
        2000004, 10, // Elixir
        4280000, 8,
        2430144, 10,
        2290285, 10,
        2028061, 10,
        2028062, 10,
        2530000, 5,
        2531000, 5}; // Gold Box
    public final static int[] silverrewards = {
        2049401, 2,
        2049301, 2,
        3010041, 1, // skull throne
        1002452, 6, // Starry Bandana
        1002455, 6, // Starry Bandana
        2290084, 1, // Triple Throw 20
        2290048, 1, // Genesis 20
        2290040, 1, // Meteo 20
        2290046, 1, // Blizzard 20
        2290074, 1, // Sniping 20
        2290064, 1, // Concentration 20
        2290094, 1, // Smoke 20
        2290022, 1, // Berserk 20
        2290056, 1, // Bow Expert 30
        2290066, 1, // xBow Expert 30
        2290020, 1, // Sanc 20
        1102082, 1, // Black Raggdey Cape
        1302049, 1, // Glowing Whip
        2340000, 1, // White Scroll
        1102041, 1, // Pink Cape
        1452019, 2, // White Nisrock
        4001116, 3, // Hexagon Pend
        4001012, 3, // Wraith Eraser
        1022060, 2, // Foxy Racoon Eye
        2430144, 5,
        2290285, 5,
        2028062, 5,
        2028061, 5,
        2530000, 1,
        2531000, 1,
        2041100, 1,
        2041101, 1,
        2041102, 1,
        2041103, 1,
        2041104, 1,
        2041105, 1,
        2041106, 1,
        2041107, 1,
        2041108, 1,
        2041109, 1,
        2041110, 1,
        2041111, 1,
        2041112, 1,
        2041113, 1,
        2041114, 1,
        2041115, 1,
        2041116, 1,
        2041117, 1,
        2041118, 1,
        2041119, 1,
        2041300, 1,
        2041301, 1,
        2041302, 1,
        2041303, 1,
        2041304, 1,
        2041305, 1,
        2041306, 1,
        2041307, 1,
        2041308, 1,
        2041309, 1,
        2041310, 1,
        2041311, 1,
        2041312, 1,
        2041313, 1,
        2041314, 1,
        2041315, 1,
        2041316, 1,
        2041317, 1,
        2041318, 1,
        2041319, 1,
        2049200, 1,
        2049201, 1,
        2049202, 1,
        2049203, 1,
        2049204, 1,
        2049205, 1,
        2049206, 1,
        2049207, 1,
        2049208, 1,
        2049209, 1,
        2049210, 1,
        2049211, 1,
        1432011, 3, // Fair Frozen
        1442020, 3, // HellSlayer
        1382035, 3, // Blue Marine
        1372010, 3, // Dimon Wand
        1332027, 3, // Varkit
        1302056, 3, // Sparta
        1402005, 3, // Bezerker
        1472053, 3, // Red Craven
        1462018, 3, // Casa Crow
        1452017, 3, // Metus
        1422013, 3, // Lemonite
        1322029, 3, // Ruin Hammer
        1412010, 3, // Colonian Axe

        1002587, 3, // Black Wisconsin
        1402044, 1, // Pumpkin lantern
        2101013, 4, // Summoning Showa boss
        1442046, 1, // Super Snowboard
        1422031, 1, // Blue Seal Cushion
        1332054, 3, // Lonzege Dagger
        1012056, 3, // Dog Nose
        1022047, 3, // Owl Mask
        3012002, 1, // Bathtub
        1442012, 3, // Sky snowboard
        1442018, 3, // Frozen Tuna
        1432010, 3, // Omega Spear
        1432036, 1, // Fishing Pole
        2000005, 10, // Power Elixir
        2049100, 10,
        2000004, 10, // Elixir
        4280001, 8}; // Silver Box
    public final static int[] peanuts = {2430091, 200, 2430092, 200, 2430093, 200, 2430101, 200, 2430102, 200, 2430136, 200, 2430149, 200,//mounts 
        2340000, 1, //rares
        1152000, 5, 1152001, 5, 1152004, 5, 1152005, 5, 1152006, 5, 1152007, 5, 1152008, 5, //toenail only comes when db is out.
        1152064, 5, 1152065, 5, 1152066, 5, 1152067, 5, 1152070, 5, 1152071, 5, 1152072, 5, 1152073, 5,
        3010019, 2, //chairs
        1001060, 10, 1002391, 10, 1102004, 10, 1050039, 10, 1102040, 10, 1102041, 10, 1102042, 10, 1102043, 10, //equips
        1082145, 5, 1082146, 5, 1082147, 5, 1082148, 5, 1082149, 5, 1082150, 5, //wg
        2043704, 10, 2040904, 10, 2040409, 10, 2040307, 10, 2041030, 10, 2040015, 10, 2040109, 10, 2041035, 10, 2041036, 10, 2040009, 10, 2040511, 10, 2040408, 10, 2043804, 10, 2044105, 10, 2044903, 10, 2044804, 10, 2043009, 10, 2043305, 10, 2040610, 10, 2040716, 10, 2041037, 10, 2043005, 10, 2041032, 10, 2040305, 10, //scrolls
        2040211, 5, 2040212, 5, 1022097, 10, //dragon glasses
        2049000, 10, 2049001, 10, 2049002, 10, 2049003, 10, //clean slate
        1012058, 5, 1012059, 5, 1012060, 5, 1012061, 5,//pinocchio nose msea only.
        1332100, 10, 1382058, 10, 1402073, 10, 1432066, 10, 1442090, 10, 1452058, 10, 1462076, 10, 1472069, 10, 1482051, 10, 1492024, 10, 1342009, 10, //durability weapons level 105
        2049400, 1, 2049401, 2, 2049301, 2,
        2049100, 10,
        2430144, 10,
        2290285, 10,
        2028062, 10,
        2028061, 10,
        2530000, 5,
        2531000, 5,
        1032080, 5,
        1032081, 4,
        1032082, 3,
        1032083, 2,
        1032084, 1,
        1112435, 5,
        1112436, 4,
        1112437, 3,
        1112438, 2,
        1112439, 1,
        1122081, 5,
        1122082, 4,
        1122083, 3,
        1122084, 2,
        1122085, 1,
        1132036, 5,
        1132037, 4,
        1132038, 3,
        1132039, 2,
        1132040, 1,
        //source
        1092070, 5,
        1092071, 4,
        1092072, 3,
        1092073, 2,
        1092074, 1,
        1092075, 5,
        1092076, 4,
        1092077, 3,
        1092078, 2,
        1092079, 1,
        1092080, 5,
        1092081, 4,
        1092082, 3,
        1092083, 2,
        1092084, 1,
        1092087, 1,
        1092088, 1,
        1092089, 1,
        1302143, 5,
        1302144, 4,
        1302145, 3,
        1302146, 2,
        1302147, 1,
        1312058, 5,
        1312059, 4,
        1312060, 3,
        1312061, 2,
        1312062, 1,
        1322086, 5,
        1322087, 4,
        1322088, 3,
        1322089, 2,
        1322090, 1,
        1332116, 5,
        1332117, 4,
        1332118, 3,
        1332119, 2,
        1332120, 1,
        1332121, 5,
        1332122, 4,
        1332123, 3,
        1332124, 2,
        1332125, 1,
        1342029, 5,
        1342030, 4,
        1342031, 3,
        1342032, 2,
        1342033, 1,
        1372074, 5,
        1372075, 4,
        1372076, 3,
        1372077, 2,
        1372078, 1,
        1382095, 5,
        1382096, 4,
        1382097, 3,
        1382098, 2,
        1392099, 1,
        1402086, 5,
        1402087, 4,
        1402088, 3,
        1402089, 2,
        1402090, 1,
        1412058, 5,
        1412059, 4,
        1412060, 3,
        1412061, 2,
        1412062, 1,
        1422059, 5,
        1422060, 4,
        1422061, 3,
        1422062, 2,
        1422063, 1,
        1432077, 5,
        1432078, 4,
        1432079, 3,
        1432080, 2,
        1432081, 1,
        1442107, 5,
        1442108, 4,
        1442109, 3,
        1442110, 2,
        1442111, 1,
        1452102, 5,
        1452103, 4,
        1452104, 3,
        1452105, 2,
        1452106, 1,
        1462087, 5,
        1462088, 4,
        1462089, 3,
        1462090, 2,
        1462091, 1,
        1472113, 5,
        1472114, 4,
        1472115, 3,
        1472116, 2,
        1472117, 1,
        1482075, 5,
        1482076, 4,
        1482077, 3,
        1482078, 2,
        1482079, 1,
        1492075, 5,
        1492076, 4,
        1492077, 3,
        1492078, 2,
        1492079, 1,
        1132012, 2,
        1132013, 1,
        1942002, 2,
        1952002, 2,
        1962002, 2,
        1972002, 2,
        1612004, 2,
        1622004, 2,
        1632004, 2,
        1642004, 2,
        1652004, 2,
        2047000, 1,
        2047001, 1,
        2047002, 1,
        2047100, 1,
        2047101, 1,
        2047102, 1,
        2047200, 1,
        2047201, 1,
        2047202, 1,
        2047203, 1,
        2047204, 1,
        2047205, 1,
        2047206, 1,
        2047207, 1,
        2047208, 1,
        2047300, 1,
        2047301, 1,
        2047302, 1,
        2047303, 1,
        2047304, 1,
        2047305, 1,
        2047306, 1,
        2047307, 1,
        2047308, 1,
        2047309, 1,
        2046004, 1,
        2046005, 1,
        2046104, 1,
        2046105, 1,
        2046208, 1,
        2046209, 1,
        2046210, 1,
        2046211, 1,
        2046212, 1,
        2049200, 1,
        2049201, 1,
        2049202, 1,
        2049203, 1,
        2049204, 1,
        2049205, 1,
        2049206, 1,
        2049207, 1,
        2049208, 1,
        2049209, 1,
        2049210, 1,
        2049211, 1,
        //ele wand
        1372035, 1,
        1372036, 1,
        1372037, 1,
        1372038, 1,
        //ele staff
        1382045, 1,
        1382046, 1,
        1382047, 1,
        1382048, 1,
        1382049, 1,
        1382050, 1, // Blue Dragon Staff
        1382051, 1,
        1382052, 1,
        1372039, 1,
        1372040, 1,
        1372041, 1,
        1372042, 1,
        2070016, 1,
        2070007, 2,
        2330007, 1,
        2070018, 1,
        2330008, 1,
        2070023, 1,
        2070024, 1,
        2028062, 5,
        2028061, 5};
    public static int[] eventCommonReward = {
        0, 10,
        1, 10,
        4, 5,
        5060004, 25,
        4170024, 25,
        4280000, 5,
        4280001, 6,
        5490000, 5,
        5490001, 6
    };
    public static int[] eventUncommonReward = {
        1, 4,
        2, 8,
        3, 8,
        2022179, 5,
        5062000, 20,
        2430082, 20,
        2430092, 20,
        2022459, 2,
        2022460, 1,
        2022462, 1,
        2430103, 2,
        2430117, 2,
        2430118, 2,
        2430201, 4,
        2430228, 4,
        2430229, 4,
        2430283, 4,
        2430136, 4,
        2430476, 4,
        2430511, 4,
        2430206, 4,
        2430199, 1,
        1032062, 5,
        5220000, 28,
        2022459, 5,
        2022460, 5,
        2022461, 5,
        2022462, 5,
        2022463, 5,
        5050000, 2,
        4080100, 10,
        4080000, 10,
        2049100, 10,
        2430144, 10,
        2290285, 10,
        2028062, 10,
        2028061, 10,
        2530000, 5,
        2531000, 5,
        2041100, 1,
        2041101, 1,
        2041102, 1,
        2041103, 1,
        2041104, 1,
        2041105, 1,
        2041106, 1,
        2041107, 1,
        2041108, 1,
        2041109, 1,
        2041110, 1,
        2041111, 1,
        2041112, 1,
        2041113, 1,
        2041114, 1,
        2041115, 1,
        2041116, 1,
        2041117, 1,
        2041118, 1,
        2041119, 1,
        2041300, 1,
        2041301, 1,
        2041302, 1,
        2041303, 1,
        2041304, 1,
        2041305, 1,
        2041306, 1,
        2041307, 1,
        2041308, 1,
        2041309, 1,
        2041310, 1,
        2041311, 1,
        2041312, 1,
        2041313, 1,
        2041314, 1,
        2041315, 1,
        2041316, 1,
        2041317, 1,
        2041318, 1,
        2041319, 1,
        2049200, 1,
        2049201, 1,
        2049202, 1,
        2049203, 1,
        2049204, 1,
        2049205, 1,
        2049206, 1,
        2049207, 1,
        2049208, 1,
        2049209, 1,
        2049210, 1,
        2049211, 1
    };
    public static int[] eventRareReward = {
        2049100, 5,
        2430144, 5,
        2290285, 5,
        2028062, 5,
        2028061, 5,
        2530000, 2,
        2531000, 2,
        2049116, 1,
        2049401, 10,
        2049301, 20,
        2049400, 3,
        2340000, 1,
        3010130, 5,
        3010131, 5,
        3010132, 5,
        3010133, 5,
        3010136, 5,
        3010116, 5,
        3010117, 5,
        3010118, 5,
        1112405, 1,
        1112445, 1,
        1022097, 1,
        2040211, 1,
        2040212, 1,
        2049000, 2,
        2049001, 2,
        2049002, 2,
        2049003, 2,
        1012058, 2,
        1012059, 2,
        1012060, 2,
        1012061, 2,
        2022460, 4,
        2022461, 3,
        2022462, 4,
        2022463, 3,
        2040041, 1,
        2040042, 1,
        2040334, 1,
        2040430, 1,
        2040538, 1,
        2040539, 1,
        2040630, 1,
        2040740, 1,
        2040741, 1,
        2040742, 1,
        2040829, 1,
        2040830, 1,
        2040936, 1,
        2041066, 1,
        2041067, 1,
        2043023, 1,
        2043117, 1,
        2043217, 1,
        2043312, 1,
        2043712, 1,
        2043812, 1,
        2044025, 1,
        2044117, 1,
        2044217, 1,
        2044317, 1,
        2044417, 1,
        2044512, 1,
        2044612, 1,
        2044712, 1,
        2046000, 1,
        2046001, 1,
        2046004, 1,
        2046005, 1,
        2046100, 1,
        2046101, 1,
        2046104, 1,
        2046105, 1,
        2046200, 1,
        2046201, 1,
        2046202, 1,
        2046203, 1,
        2046208, 1,
        2046209, 1,
        2046210, 1,
        2046211, 1,
        2046212, 1,
        2046300, 1,
        2046301, 1,
        2046302, 1,
        2046303, 1,
        2047000, 1,
        2047001, 1,
        2047002, 1,
        2047100, 1,
        2047101, 1,
        2047102, 1,
        2047200, 1,
        2047201, 1,
        2047202, 1,
        2047203, 1,
        2047204, 1,
        2047205, 1,
        2047206, 1,
        2047207, 1,
        2047208, 1,
        2047300, 1,
        2047301, 1,
        2047302, 1,
        2047303, 1,
        2047304, 1,
        2047305, 1,
        2047306, 1,
        2047307, 1,
        2047308, 1,
        2047309, 1,
        1112427, 5,
        1112428, 5,
        1112429, 5,
        1012240, 10,
        1022117, 10,
        1032095, 10,
        1112659, 10,
        2070007, 10,
        2330007, 5,
        2070016, 5,
        2070018, 5,
        1152038, 1,
        1152039, 1,
        1152040, 1,
        1152041, 1,
        1122090, 1,
        1122094, 1,
        1122098, 1,
        1122102, 1,
        1012213, 1,
        1012219, 1,
        1012225, 1,
        1012231, 1,
        1012237, 1,
        2070023, 5,
        2070024, 5,
        2330008, 5,
        2003516, 5,
        2003517, 1,
        1132052, 1,
        1132062, 1,
        1132072, 1,
        1132082, 1,
        1112585, 1,
        //walker
        1072502, 1,
        1072503, 1,
        1072504, 1,
        1072505, 1,
        1072506, 1,
        1052333, 1,
        1052334, 1,
        1052335, 1,
        1052336, 1,
        1052337, 1,
        1082305, 1,
        1082306, 1,
        1082307, 1,
        1082308, 1,
        1082309, 1,
        1003197, 1,
        1003198, 1,
        1003199, 1,
        1003200, 1,
        1003201, 1,
        1662000, 1,
        1662001, 1,
        1672000, 1,
        1672001, 1,
        1672002, 1,
        //crescent moon
        1112583, 1,
        1032092, 1,
        1132084, 1,
        //mounts, 90 day
        2430290, 1,
        2430292, 1,
        2430294, 1,
        2430296, 1,
        2430298, 1,
        2430300, 1,
        2430302, 1,
        2430304, 1,
        2430306, 1,
        2430308, 1,
        2430310, 1,
        2430312, 1,
        2430314, 1,
        2430316, 1,
        2430318, 1,
        2430320, 1,
        2430322, 1,
        2430324, 1,
        2430326, 1,
        2430328, 1,
        2430330, 1,
        2430332, 1,
        2430334, 1,
        2430336, 1,
        2430338, 1,
        2430340, 1,
        2430342, 1,
        2430344, 1,
        2430347, 1,
        2430349, 1,
        2430351, 1,
        2430353, 1,
        2430355, 1,
        2430357, 1,
        2430359, 1,
        2430361, 1,
        2430392, 1,
        2430512, 1,
        2430536, 1,
        2430477, 1,
        2430146, 1,
        2430148, 1,
        2430137, 1,};
    public static int[] eventSuperReward = {
        2022121, 10,
        4031307, 50,
        3010127, 10,
        3010128, 10,
        3010137, 10,
        3010157, 10,
        2049300, 10,
        2040758, 10,
        1442057, 10,
        2049402, 10,
        2049304, 1,
        2049305, 1,
        2040759, 7,
        2040760, 5,
        2040125, 10,
        2040126, 10,
        1012191, 5,
        1112514, 1, //untradable/tradable
        1112531, 1,
        1112629, 1,
        1112646, 1,
        1112515, 1, //untradable/tradable
        1112532, 1,
        1112630, 1,
        1112647, 1,
        1112516, 1, //untradable/tradable
        1112533, 1,
        1112631, 1,
        1112648, 1,
        2040045, 10,
        2040046, 10,
        2040333, 10,
        2040429, 10,
        2040542, 10,
        2040543, 10,
        2040629, 10,
        2040755, 10,
        2040756, 10,
        2040757, 10,
        2040833, 10,
        2040834, 10,
        2041068, 10,
        2041069, 10,
        2043022, 12,
        2043120, 12,
        2043220, 12,
        2043313, 12,
        2043713, 12,
        2043813, 12,
        2044028, 12,
        2044120, 12,
        2044220, 12,
        2044320, 12,
        2044520, 12,
        2044513, 12,
        2044613, 12,
        2044713, 12,
        2044817, 12,
        2044910, 12,
        2046002, 5,
        2046003, 5,
        2046102, 5,
        2046103, 5,
        2046204, 10,
        2046205, 10,
        2046206, 10,
        2046207, 10,
        2046304, 10,
        2046305, 10,
        2046306, 10,
        2046307, 10,
        2040006, 2,
        2040007, 2,
        2040303, 2,
        2040403, 2,
        2040506, 2,
        2040507, 2,
        2040603, 2,
        2040709, 2,
        2040710, 2,
        2040711, 2,
        2040806, 2,
        2040903, 2,
        2040913, 2,
        2041024, 2,
        2041025, 2,
        2044815, 2,
        2044908, 2,
        1152046, 1,
        1152047, 1,
        1152048, 1,
        1152049, 1,
        1122091, 1,
        1122095, 1,
        1122099, 1,
        1122103, 1,
        1012214, 1,
        1012220, 1,
        1012226, 1,
        1012232, 1,
        1012238, 1,
        1032088, 1,
        1032089, 1,
        1032090, 1,
        1032091, 1,
        1132053, 1,
        1132063, 1,
        1132073, 1,
        1132083, 1,
        1112586, 1,
        1112593, 1,
        1112597, 1,
        1662002, 1,
        1662003, 1,
        1672003, 1,
        1672004, 1,
        1672005, 1,
        //130, 140 weapons
        1092088, 1,
        1092089, 1,
        1092087, 1,
        1102275, 1,
        1102276, 1,
        1102277, 1,
        1102278, 1,
        1102279, 1,
        1102280, 1,
        1102281, 1,
        1102282, 1,
        1102283, 1,
        1102284, 1,
        1082295, 1,
        1082296, 1,
        1082297, 1,
        1082298, 1,
        1082299, 1,
        1082300, 1,
        1082301, 1,
        1082302, 1,
        1082303, 1,
        1082304, 1,
        1072485, 1,
        1072486, 1,
        1072487, 1,
        1072488, 1,
        1072489, 1,
        1072490, 1,
        1072491, 1,
        1072492, 1,
        1072493, 1,
        1072494, 1,
        1052314, 1,
        1052315, 1,
        1052316, 1,
        1052317, 1,
        1052318, 1,
        1052319, 1,
        1052329, 1,
        1052321, 1,
        1052322, 1,
        1052323, 1,
        1003172, 1,
        1003173, 1,
        1003174, 1,
        1003175, 1,
        1003176, 1,
        1003177, 1,
        1003178, 1,
        1003179, 1,
        1003180, 1,
        1003181, 1,
        1302152, 1,
        1302153, 1,
        1312065, 1,
        1312066, 1,
        1322096, 1,
        1322097, 1,
        1332130, 1,
        1332131, 1,
        1342035, 1,
        1342036, 1,
        1372084, 1,
        1372085, 1,
        1382104, 1,
        1382105, 1,
        1402095, 1,
        1402096, 1,
        1412065, 1,
        1412066, 1,
        1422066, 1,
        1422067, 1,
        1432086, 1,
        1432087, 1,
        1442116, 1,
        1442117, 1,
        1452111, 1,
        1452112, 1,
        1462099, 1,
        1462100, 1,
        1472122, 1,
        1472123, 1,
        1482084, 1,
        1482085, 1,
        1492085, 1,
        1492086, 1,
        1532017, 1,
        1532018, 1,
        //mounts
        2430291, 1,
        2430293, 1,
        2430295, 1,
        2430297, 1,
        2430299, 1,
        2430301, 1,
        2430303, 1,
        2430305, 1,
        2430307, 1,
        2430309, 1,
        2430311, 1,
        2430313, 1,
        2430315, 1,
        2430317, 1,
        2430319, 1,
        2430321, 1,
        2430323, 1,
        2430325, 1,
        2430327, 1,
        2430329, 1,
        2430331, 1,
        2430333, 1,
        2430335, 1,
        2430337, 1,
        2430339, 1,
        2430341, 1,
        2430343, 1,
        2430345, 1,
        2430348, 1,
        2430350, 1,
        2430352, 1,
        2430354, 1,
        2430356, 1,
        2430358, 1,
        2430360, 1,
        2430362, 1,
        //rising sun
        1012239, 1,
        1122104, 1,
        1112584, 1,
        1032093, 1,
        1132085, 1
    };
    public static int[] tenPercent = {
        //10% scrolls
        2040002,
        2040005,
        2040026,
        2040031,
        2040100,
        2040105,
        2040200,
        2040205,
        2040302,
        2040310,
        2040318,
        2040323,
        2040328,
        2040329,
        2040330,
        2040331,
        2040402,
        2040412,
        2040419,
        2040422,
        2040427,
        2040502,
        2040505,
        2040514,
        2040517,
        2040534,
        2040602,
        2040612,
        2040619,
        2040622,
        2040627,
        2040702,
        2040705,
        2040708,
        2040727,
        2040802,
        2040805,
        2040816,
        2040825,
        2040902,
        2040915,
        2040920,
        2040925,
        2040928,
        2040933,
        2041002,
        2041005,
        2041008,
        2041011,
        2041014,
        2041017,
        2041020,
        2041023,
        2041058,
        2041102,
        2041105,
        2041108,
        2041111,
        2041302,
        2041305,
        2041308,
        2041311,
        2043002,
        2043008,
        2043019,
        2043102,
        2043114,
        2043202,
        2043214,
        2043302,
        2043402,
        2043702,
        2043802,
        2044002,
        2044014,
        2044015,
        2044102,
        2044114,
        2044202,
        2044214,
        2044302,
        2044314,
        2044402,
        2044414,
        2044502,
        2044602,
        2044702,
        2044802,
        2044809,
        2044902,
        2045302,
        2048002,
        2048005
    };
    public static int[] fishingReward = {
        0, 100, // Meso
        1, 100, // EXP
        2022179, 1, // Onyx Apple
        1302021, 5, // Pico Pico Hammer
        1072238, 1, // Voilet Snowshoe
        1072239, 1, // Yellow Snowshoe
        2049100, 2, // Chaos Scroll
        2430144, 1,
        2290285, 1,
        2028062, 1,
        2028061, 1,
        2049301, 1, // Equip Enhancer Scroll
        2049401, 1, // Potential Scroll
        1302000, 3, // Sword
        1442011, 1, // Surfboard
        4000517, 8, // Golden Fish
        4000518, 10, // Golden Fish Egg
        4031627, 2, // White Bait (3cm)
        4031628, 1, // Sailfish (120cm)
        4031630, 1, // Carp (30cm)
        4031631, 1, // Salmon(150cm)
        4031632, 1, // Shovel
        4031633, 2, // Whitebait (3.6cm)
        4031634, 1, // Whitebait (5cm)
        4031635, 1, // Whitebait (6.5cm)
        4031636, 1, // Whitebait (10cm)
        4031637, 2, // Carp (53cm)
        4031638, 2, // Carp (60cm)
        4031639, 1, // Carp (100cm)
        4031640, 1, // Carp (113cm)
        4031641, 2, // Sailfish (128cm)
        4031642, 2, // Sailfish (131cm)
        4031643, 1, // Sailfish (140cm)
        4031644, 1, // Sailfish (148cm)
        4031645, 2, // Salmon (166cm)
        4031646, 2, // Salmon (183cm)
        4031647, 1, // Salmon (227cm)
        4031648, 1, // Salmon (288cm)
        4001187, 20,
        4001188, 20,
        4001189, 20,
        4031629, 1 // Pot
    };

    public static boolean isReverseItem(int itemId) {
        switch (itemId) {
            case 1002790:
            case 1002791:
            case 1002792:
            case 1002793:
            case 1002794:
            case 1082239:
            case 1082240:
            case 1082241:
            case 1082242:
            case 1082243:
            case 1052160:
            case 1052161:
            case 1052162:
            case 1052163:
            case 1052164:
            case 1072361:
            case 1072362:
            case 1072363:
            case 1072364:
            case 1072365:

            case 1302086:
            case 1312038:
            case 1322061:
            case 1332075:
            case 1332076:
            case 1372045:
            case 1382059:
            case 1402047:
            case 1412034:
            case 1422038:
            case 1432049:
            case 1442067:
            case 1452059:
            case 1462051:
            case 1472071:
            case 1482024:
            case 1492025:

            case 1342012:
            case 1942002:
            case 1952002:
            case 1962002:
            case 1972002:
            case 1532016:
            case 1522017:
                return true;
            default:
                return false;
        }
    }
public static boolean isTimelessItem(int itemId) {
        switch (itemId) {
            case 1032031: //shield earring, but technically
            case 1102172:
            case 1002776:
            case 1002777:
            case 1002778:
            case 1002779:
            case 1002780:
            case 1082234:
            case 1082235:
            case 1082236:
            case 1082237:
            case 1082238:
            case 1052155:
            case 1052156:
            case 1052157:
            case 1052158:
            case 1052159:
            case 1072355:
            case 1072356:
            case 1072357:
            case 1072358:
            case 1072359:
            case 1092057:
            case 1092058:
            case 1092059:

            case 1122011:
            case 1122012:

            case 1302081:
            case 1312037:
            case 1322060:
            case 1332073:
            case 1332074:
            case 1372044:
            case 1382057:
            case 1402046:
            case 1412033:
            case 1422037:
            case 1432047:
            case 1442063:
            case 1452057:
            case 1462050:
            case 1472068:
            case 1482023:
            case 1492023:
            case 1342011:
            case 1532015:
            case 1522016:
                //raven.
                return true;
            default:
                return false;
        }
    }
    public static boolean isBossExclusiveItem(int itemId) {
        switch (itemId) {
          case 1112683:
          case 1113039:
          case 1082431:
          case 1002357:
          case 1003112:
          case 1122000:
          case 1122076:
          //Until now
                return true;
            default:
                return false;
        }
    }
    
    public static boolean isScarletWeapon(int itemId) {
        switch (itemId) {
case 1332226://Scarlet Angelic Betrayal
case 1222060://Scarlet Angelic Shooter
case 1412136://Scarlet Battle Axe
case 1452206://Scarlet Battle Bow
case 1422141://Scarlet Battle Hammer
case 1432168://Scarlet Battle Spear
case 1402197://Scarlet Claymore
case 1532099://Scarlet Crash
case 1462194://Scarlet Crossbow
case 1472215://Scarlet Dark Slain
case 1232058://Scarlet Death Bringer
case 1522095://Scarlet Eagle Wings
case 1032216://Scarlet Earring
case 1372178://Scarlet Evil Wand
case 1302276://Scarlet Gladius
case 1482169://Scarlet Griffey Claw
case 1442224://Scarlet Hellslayer
case 1492180://Scarlet Infinity's Wrath
case 1342083://Scarlet Katara
case 1362091://Scarlet Persona
                return true;
            default:
                return false;
        }
    }

    public static boolean isRing(int itemId) {
        return itemId >= 1112000 && itemId < 1114000;
    }// 112xxxx - pendants, 113xxxx - belts

    public static boolean icsog(int itemId) {
    return itemId == 2049122;
    }  
    public static boolean iicsog(int itemId) {
    return itemId == 2049153;
    }  
    //if only there was a way to find in wz files -.-
    public static boolean isEffectRing(int itemid) {
        return isFriendshipRing(itemid) || isCrushRing(itemid) || isMarriageRing(itemid);
    }

    public static boolean isMarriageRing(int itemId) {
        switch (itemId) {
            case 1112803:
            case 1112806:
            case 1112807:
            case 1112809:
                return true;
        }
        return false;
    }

    public static boolean isFriendshipRing(int itemId) {
        switch (itemId) {
            case 1112800:
            case 1112801:
            case 1112802:
            case 1112810: //new
            case 1112811: //new, doesnt work in friendship?
            case 1112812: //new, im ASSUMING it's friendship cuz of itemID, not sure.
            case 1112816: //new, i'm also assuming
            case 1112817:

            case 1049000:
                return true;
        }
        return false;
    }

    public static boolean isCrushRing(int itemId) {
        switch (itemId) {
            case 1112001:
            case 1112002:
            case 1112003:
            case 1112005: //new
            case 1112006: //new
            case 1112007:
            case 1112012:
            case 1112015: //new

            case 1048000:
            case 1048001:
            case 1048002:
                return true;
        }
        return false;
    }
    public static int[] Equipments_Bonus = {1122017};

    public static int Equipment_Bonus_EXP(final int itemid) {
        switch (itemid) {
            case 1122017:
                return 10;
        }
        return 0;
    }
    public static int[] blockedMaps = {970000000};
    //If you can think of more maps that could be exploitable via npc,block nao pliz!

    public static int getExpForLevel(int i, int itemId) {
        if (isReverseItem(itemId)) {
            return getReverseRequiredEXP(i);
        } else if (getMaxLevel(itemId) > 0) {
            return getTimelessRequiredEXP(i);
        }
        return 0;
    }

    public static int getMaxLevel(final int itemId) {
        Map<Integer, Map<String, Integer>> inc = MapleItemInformationProvider.getInstance().getEquipIncrements(itemId);
        return inc != null ? (inc.size()) : 0;
    }

    public static int getStatChance() {
        return 25;
    }

    public static MonsterStatus getStatFromWeapon(final int itemid) {
        switch (itemid) {
            case 1302109:
            case 1312041:
            case 1322067:
            case 1332083:
            case 1372048:
            case 1382064:
            case 1402055:
            case 1412037:
            case 1422041:
            case 1432052:
            case 1442073:
            case 1452064:
            case 1462058:
            case 1472079:
            case 1482035:
                return MonsterStatus.DARKNESS;
            case 1302108:
            case 1312040:
            case 1322066:
            case 1332082:
            case 1372047:
            case 1382063:
            case 1402054:
            case 1412036:
            case 1422040:
            case 1432051:
            case 1442072:
            case 1452063:
            case 1462057:
            case 1472078:
            case 1482036:
                return MonsterStatus.SPEED;
        }
        return null;
    }

    public static int getXForStat(MonsterStatus stat) {
        switch (stat) {
            case DARKNESS:
                return -70;
            case SPEED:
                return -50;
        }
        return 0;
    }

    public static int getSkillForStat(MonsterStatus stat) {
        switch (stat) {
            case DARKNESS:
                return 1111003;
            case SPEED:
                return 3121007;
        }
        return 0;
    }
    public final static int[] normalDrops = {
        4001009, //real
        4001010,
        4001011,
        4001012,
        4001013,
        4001014, //real
        4001021,
        4001038, //fake
        4001039,
        4001040,
        4001041,
        4001042,
        4001043, //fake
        4001038, //fake
        4001039,
        4001040,
        4001041,
        4001042,
        4001043, //fake
        4001038, //fake
        4001039,
        4001040,
        4001041,
        4001042,
        4001043, //fake
        4000164, //start
        2000000,
        2000003,
        2000004,
        2000005,
        4000019,
        4000000,
        4000016,
        4000006,
        2100121,
        4000029,
        4000064,
        5110000,
        4000306,
        4032181,
        4006001,
        4006000,
        2050004,
        3994102,
        3994103,
        3994104,
        3994105,
        2430007, //end
        4000164, //start
        2000000,
        2000003,
        2000004,
        2000005,
        4000019,
        4000000,
        4000016,
        4000006,
        2100121,
        4000029,
        4000064,
        5110000,
        4000306,
        4032181,
        4006001,
        4006000,
        2050004,
        3994102,
        3994103,
        3994104,
        3994105,
        2430007, //end
        4000164, //start
        2000000,
        2000003,
        2000004,
        2000005,
        4000019,
        4000000,
        4000016,
        4000006,
        2100121,
        4000029,
        4000064,
        5110000,
        4000306,
        4032181,
        4006001,
        4006000,
        2050004,
        3994102,
        3994103,
        3994104,
        3994105,
        2430007}; //end
    public final static int[] rareDrops = {
        2022179,
        2049100,
        2049100,
        2430144,
        2028062,
        2028061,
        2290285,
        2049301,
        2049401,
        2022326,
        2022193,
        2049000,
        2049001,
        2049002};
    public final static int[] superDrops = {
        2040804,
        2049400,
        2028062,
        2028061,
        2430144,
        2430144,
        2430144,
        2430144,
        2290285,
        2049100,
        2049100,
        2049100,
        2049100};

    public static int getSkillBook(final int job, final int skill) {
        if (job >= 2210 && job <= 2218) {
            return job - 2209;
        }
        if (isZero(job)) {
            if (skill > 0) {
                int type = (skill % 1000) / 100; //1 beta 2 alpha
                return type == 1 ? 1 : 0;
            } else {
                return 0;
            }
        }
        switch (job) {
            
            case 110:
            case 120:
            case 130:
            case 210:
            case 220:
            case 230:
            case 310:
            case 320:
            case 410:
            case 420:
            case 510:
            case 520:
                
            case 570:
            case 1110:
            case 1310:
            case 1510:
            case 2310:
            case 2410:
            case 2710:
            case 3110:
            case 3120:
            case 3210:
            case 3310:
            case 3510:
            case 3610:
            case 4110:
            case 4210:
            case 5110:
            case 6110:
            case 6510:
                return 1;
            case 111:
            case 121:
            case 131:
            case 211:
            case 221:
            case 231:
            case 311:
            case 321:
            case 411:
            case 421:
            case 511:
            case 521:
                
            case 571:
            case 1111:
            case 1311:
            case 1511:
            case 2311:
            case 2411:
            case 2711:
            case 3111:
            case 3121:
            case 3211:
            case 3311:
            case 3511:
            case 3611:
            case 4111:
            case 4211:
            case 5111:
            case 6111:
            case 6511:
                return 2;
            case 112:
            case 122:
            case 132:
            case 212:
            case 222:
            case 232:
            case 312:
            case 322:
            case 412:
            case 422:
            case 512:
            case 522:
                
            case 572:
            case 1112:
            case 1312:
            case 1512:
            case 2312:
            case 2412:
            case 2712:
            case 3112:
            case 3122:
            case 3212:
            case 3312:
            case 3512:
            case 3612:
            case 4112:
            case 4212:
            case 5112:
            case 6112:
            case 6512:
                return 3;
            case 508:
            case 3101:
                return 0;
        }
        if (isSeparatedSp(job)) {
            if (job % 10 > 4) {
                return 0;
            }
            return (job % 10);
        }
        return 0;
    }

    public static int getSkillBook(final int job, final int level, final int skill) {
        if (job >= 2210 && job <= 2218) {
            return job - 2209;
        }
        if (isSeparatedSp(job)) {
            return (level <= 30 ? 0 : (level >= 31 && level <= 60 ? 1 : (level >= 61 && level <= 100 ? 2 : (level >= 100 ? 3 : 0))));
        }
        return 0;
    }

//    public static int getSkillBook(final int job, final int level) {
//        if (job >= 2210 && job <= 2218) {
//            return job - 2209;
//        }
//        switch (job) {
//
//            case 508:
//            case 570:
//            case 571:
//            case 572:
//            //cygnus
//            case 1110:
//            case 1111:
//            case 1112:
//            case 1310:
//            case 1311:
//            case 1312:
//            case 1510:
//            case 1511:
//            case 1512:
//            //cygnus end
//            case 2300:
//            case 2310:
//            case 2311:
//            case 2312:
//            case 2400:
//            case 2410:
//            case 2411:
//            case 2412:
//            case 2710:
//            case 2711:
//            case 2712:
//            case 3100:
//            case 3200:
//            case 3300:
//            case 3500:
//            case 3110:
//            case 3210:
//            case 3310:
//            case 3510:
//            case 3111:
//            case 3211:
//            case 3311:
//            case 3511:
//            case 3112:
//            case 3212:
//            case 3312:
//            case 3512:
//            case 5000:
//            case 5100:
//            case 5110:
//            case 5111:
//            case 5112:
//            case 6510:
//            case 6511:
//            case 6512:
//                return (level <= 30 ? 0 : (level >= 31 && level <= 60 ? 1 : (level >= 61 && level <= 100 ? 2 : (level >= 100 ? 3 : 0))));
//        }
//        return 0;
//    }
    public static int getSkillBookForSkill(final int skillid) {
//        System.out.println(getSkillBook(skillid / 10000));
        return getSkillBook(skillid / 10000, skillid);
    }

    public static int getLinkedMountItem(int sourceid) {
        switch (sourceid % 1000) {
            case 1:
            case 24:
            case 25:
                return 1018;
            case 2:
            case 26:
                return 1019;
            case 3:
                return 1025;
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                return (sourceid % 1000) + 1023;
            case 9:
            case 10:
            case 11:
                return (sourceid % 1000) + 1024;
            case 12:
                return 1042;
            case 13:
                return 1044;
            case 14:
                return 1049;
            case 15:
            case 16:
            case 17:
                return (sourceid % 1000) + 1036;
            case 18:
            case 19:
                return (sourceid % 1000) + 1045;
            case 20:
                return 1072;
            case 21:
                return 1084;
            case 22:
                return 1089;
            case 23:
                return 1106;
            case 29:
                return 1151;
            case 30:
            case 50:
                return 1054;
            case 31:
            case 51:
                return 1069;
            case 32:
                return 1138;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
                return (sourceid % 1000) + 1009;
            case 52:
                return 1070;
            case 53:
                return 1071;
            case 54:
                return 1096;
            case 55:
                return 1101;
            case 56:
                return 1102;
            case 58:
                return 1118;
            case 59:
                return 1121;
            case 60:
                return 1122;
            case 61:
                return 1129;
            case 62:
                return 1139;
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
                return (sourceid % 1000) + 1080;
            case 85:
            case 86:
            case 87:
                return (sourceid % 1000) + 928;
            case 88:
                return 1065;
            case 27:
                return 1932049; //airplane
            case 28:
                return 1932050; //airplane
            case 114:
                return 1932099; //bunny buddy
            //33 = hot air
            //37 = bjorn
            //38 = speedy chariot
            //57 = law officer
            //they all have in wz so its ok
        }
        return 0;
    }
           public static int getMountItemEx(final int sourceid) {
        final int riding = 1932000;
        switch (sourceid) {
            case 1204: // 배틀쉽
                return riding + 0;
            case 80001163: // 스페이스쉽
                return riding + 2;
            case 80001449: // 스페이스쉽2
                return riding + 225;
            case 80001450: // 오토바이2
                return riding + 226;
            case 80001451: // 슈트2
                return riding + 227;
            case 80001026: // 빗자루 ok
                return riding + 5;
            case 80001003: // 목마 ok
                return riding + 6;
            case 80001004: // 악어 ok
                return riding + 7;
            case 80001005: // 오토바이 (갈색) ok
                return riding + 8;
            case 80001006: // 오토바이 (분홍색) ok
                return riding + 9;
            case 80001007: // 구름 ok
                return riding + 11;
            case 80001008: // 진짜 발록 ok
                return riding + 10;
            case 80001009: // 레이싱카 ok
                return riding + 13;
            case 80001010: // 피시방 호랑이 ok
                return riding + 14;
            case 80001011: // 미스트 발록 (전체모습) ok
                return riding + 12;
            case 80001013: // 주황버섯 ok
                return riding + 23;
            case 80001014: // 불타는 말 ok
                return riding + 25;
            case 80001015: // 타조 ok
                return riding + 26;
            case 80001016: // 핑크곰 열기구 ok
                return riding + 27;
            case 80001017: // 파랑 로봇 ok
                return riding + 28;
            case 80001018: // 오토바이 (빨강색) ok
                return riding + 34;
            case 80001019: // 파워드 슈트 ok
                return riding + 35;
            case 80001020: // 라이언킹 ok
                return riding + 41;
            case 80001021: // 블루 스쿠더 ok
                return riding + 43;
            case 80001022: // 루돌푸 개삐대 ok
                return riding + 44;
            case 80001023: // 복주머니 ok
                return riding + 48;
            case 80001027: // 나무 비행기 ok
                return riding + 49;
            case 80001028: // 빨간 비행기 ok
                return riding + 50;
            case 80001038: // 황금 장식 배 ok
                return riding + 53;
            case 80001030: // 닭 ok
                return riding + 54;
            case 80001031: // 부엉이 ok
                return riding + 55;
            case 80001032: // 파랑 자동차 ok
                return riding + 56;
            case 80001033: // 카니발 라이딩 ok
                return riding + 57;
            case 80001044: // 꼬마토기 ok
                return riding + 90;
            case 80001082: // 황소 ok
                return riding + 93;
            case 80001083: // 수레꾼토끼 ok
                return riding + 94;
            case 80001084: // 시발무서운토끼 ok
                return riding + 95;
            case 80001090: // 추장멧돼지 ok
                return riding + 96;
            case 80001137: // 검은부엉이 ok
                return riding + 110;
            case 80001144: // 류호수레꾼 ok
                return riding + 113;
            case 80001148: // 빨간붕붕차 ok
                return riding + 114;
            case 80001149: // 멋진 로봇 ok
                return riding + 115;
            case 80001198: // 드래고니카 ok
                return riding + 140;
            case 80001220: // 팬텀 ok
                return riding + 143;
            case 80001221: // 아리아 ok
                return riding + 144;
            case 80001228: // 재규어 ok
                return riding + 148;
            case 80001237: // 블랙와이번 ok
                return riding + 153;
            case 80001243: // 외발자전거 ok
                return riding + 156;
            case 80001244: // 겨울왕국 ok
                return riding + 157;
            case 80001246: // 달 ok
                return riding + 159;
            case 80001257: // 핑크빈 둥둥 ok
                return riding + 161;
            case 80001258: // 블랙빈 둥둥 ok
                return riding + 162;
            case 80001261: // 어떤 이상한년 ok
                return riding + 164;
            case 80001285: // 풍선 둥둥 ok
                return riding + 167;
            case 80001289: // 데비존 ok
                return riding + 170;
            case 80001290: // 신비목마 ok
                return riding + 171;
            case 80001292: // 어린왕자 ok
                return riding + 173;
            case 80001302: // 검은 드래곤 ok
                return riding + 178;
            case 80001304: // 멧돼지 ok
                return riding + 179;
            case 80001305: // 은빛갈기 ok
                return riding + 180;
            case 80001306: // 레드 드라코 ok
                return riding + 181;
            case 80001307: // 티티아나 ok
                return riding + 182;
            case 80001308: // 티티오 ok
                return riding + 183;
            case 80001309: // 신조 ok
                return riding + 184;
            case 80001312: // 류호 1 ok
                return riding + 187;
            case 80001313: // 류호 2 ok
                return riding + 188;
            case 80001314: // 류호 3 ok
                return riding + 189;
            case 80001315: // 류호 4 ok
                return riding + 190;
            case 80001316: // 에반 1 ok
                return riding + 191;
            case 80001317: // 에반 2 ok
                return riding + 192;
            case 80001318: // 에반 3 ok
                return riding + 193;
            case 80001319: // 하이에나 ok
                return riding + 194;
            case 80001327: // 덕덕 ok
                return riding + 198;
            case 80001331: // 보석 섹스 ok
                return riding + 199;
            case 80001336: // 하얀병아리 ok
                return riding + 200;
            case 80001338: // 장난감 ok
                return riding + 201;
            case 80001333: // 빨간근두운 ok
                return riding + 205;
            case 80001347: // 악마년 ok
                return riding + 207;
            case 80001348: // 힙합 ok
                return riding + 208;
            case 80001353: // 악마년2 ok
                return riding + 211;
            case 80001413: // 쟁반 ok
                return riding + 219;
            case 80001421: // 마차 ok
                return riding + 221;
            case 80001423: // 벨룸 ok
                return riding + 222;
            case 80001445: // 빛날개 ok
                return riding + 242;
            case 80001447: // 어둠날개 ok
                return riding + 243;
            case 80001484: // 부츠 ok
                return riding + 235;
            case 80001508: // 얼음말 ok
                return riding + 244;
            case 80001345:// 헤카톤주먹
                return riding + 204;
            case 80001199:// 독수으리 대처
                return riding + 256;
            case 80001490: // 나으리 대처
                return riding + 259;
            case 80001491: // 헬리콥터 대처
                return riding + 258;
            case 80001505: // 지각했당   
                return riding + 251;
            case 80001492: // 꿀꿀나비     
                return riding + 249;
            case 80001503: // 투명발록
                return riding + 12;
            case 80001531: //이상한말
                return riding + 253;
            case 80001549: //메이플차?
                return riding + 254;
            case 80001550: //팬더
                return riding + 255;
            case 80001355://돌고래    
                return riding + 212;
            case 80001411://좀비트럭
                return riding + 218;
            /*case 80001552: //독수으리
             case 80001553:    
             return + 256;
             case 80001554: //헬리콥터?
             case 80001555:
             return + 258;
             /* case 80001557://나으리
             case 80001558:    
             return + 259;*/
            default:
                return 0;
        }
    }

        public static int checkMountItem(final int sourceid) {
        if (sourceid == 33001001) {
            return 1932005; // Just a check only, so doesn't matter
        }
        return getMountItemEx(sourceid);
    }

    public static int getMountItem(int sourceid, MapleCharacter chr) {
        switch (sourceid) {
            case 5221006:
                return 1932000;
            case 80001277:
                return 1932165;
            case 80001298:
                return 1930000;
            case 33001001: //temp.
                if (chr == null) {
                    return 1932015;
                }
                switch (chr.getIntNoRecord(JAGUAR)) {
                    case 20:
                        return 1932030;
                    case 30:
                        return 1932031;
                    case 40:
                        return 1932032;
                    case 50:
                        return 1932033;
                    case 60:
                        return 1932036;
                }
                return 1932015;
            case 35001002:
            case 35120000:
                return 1932016;
			//case 30011109:
			//	return 1932085;
        }
        if (!isBeginnerJob(sourceid / 10000)) {
            if (sourceid / 10000 == 8000 && sourceid != 80001000 && sourceid != 80001155 && sourceid != 80001040) { //todoo clean up
                Skill skil = SkillFactory.getSkill(sourceid);
                if (skil != null && skil.getTamingMob() > 0) {
                    return skil.getTamingMob();
                } else {
                    int link = getLinkedMountItem(sourceid);
                    if (link > 0) {
                        if (link < 10000) {
                            return getMountItem(link, chr);
                        } else {
                            return link;
                        }
                    }
                }
            }
            return 0;
        }
        switch (sourceid % 10000) {
            case 1013:
            case 1046:
                return 1932001;
            case 1015:
            case 1048:
                return 1932002;
            case 1016:
            case 1017:
            case 1027:
                return 1932007;
            case 1018:
                return 1932003;
            case 1019:
                return 1932005;
            case 1025:
                return 1932006;
            case 1028:
                return 1932008;
            case 1029:
                return 1932009;
            case 1030:
                return 1932011;
            case 1031:
                return 1932010;
            case 1033:
                return 1932013;
            case 1034:
                return 1932014;
            case 1035:
                return 1932012;
            case 1036:
                return 1932017;
            case 1037:
                return 1932018;
            case 1038:
                return 1932019;
            case 1039:
                return 1932020;
            //case 1040:
                //return 1932021;
            case 1042:
                return 1932022;
            case 1044:
                return 1932023;
            //case 1045:
            //return 1932030; //wth? helicopter? i didnt see one, so we use hog
            case 1049:
                return 1932025;
            case 1050:
                return 1932004;
            case 1051:
                return 1932026;
            case 1052:
                return 1932027;
            case 1053:
                return 1932028;
            case 1054:
                return 1932029;
            case 1063:
                return 1932034;
            case 1064:
                return 1932035;
            case 1065:
                return 1932037;
            case 1069:
                return 1932038;
            case 1070:
                return 1932039;
            case 1071:
                return 1932040;
            case 1072:
                return 1932041;
            case 1084:
                return 1932043;
            case 1089:
                return 1932044;
            case 1096:
                return 1932045;
            case 1101:
                return 1932046;
            case 1102:
                return 1932061;
            case 1106:
                return 1932048;
            case 1118:
                return 1932060;
            case 1115:
                return 1932052;
            case 1121:
                return 1932063;
            case 1122:
                return 1932064;
            case 1123:
                return 1932065;
            case 1128:
                return 1932066;
            case 1130:
                return 1932072;
            case 1136:
                return 1932078;
            case 1138:
                return 1932080;
            case 1139:
                return 1932081;
            //FLYING
            case 1143:
            case 1144:
            case 1145:
            case 1146:
            case 1147:
            case 1148:
            case 1149:
            case 1150:
            case 1151:
            case 1152:
            case 1153:
            case 1154:
            //case 1155:
            case 1156:
            case 1157:
                return 1992000 + (sourceid % 10000) - 1143;
            default:
                return 0;
        }
    }

    public static boolean isKatara(int itemId) {
        return itemId / 10000 == 134;
    }

    public static boolean isDagger(int itemId) {
        return itemId / 10000 == 133;
    }

    public static boolean isApplicableSkill(int skil) {
        return ((skil <= 80000000 || skil >= 100000000) && (skil % 10000 < 8000 || skil % 10000 > 8006) && !isAngel(skil) && !isLightningGod(skil)) || skil >= 92000000 || (skil >= 80000000 && skil <= 80010000); //no additional/decent skills
    }

    public static boolean isApplicableSkill_(int skil) { //not applicable to saving but is more of temporary
        for (int i : PlayerStats.pvpSkills) {
            if (skil == i) {
                return true;
            }
        }
        return (skil >= 90000000 && skil < 92000000) || (skil % 10000 >= 8000 && skil % 10000 <= 8003) || isAngel(skil) || isLightningGod(skil);
    }

    public static boolean isTablet(int itemId) {
        return itemId / 1000 == 2047;
    }

    public static boolean isGeneralScroll(int itemId) {
        return itemId / 1000 == 2046;
    }

    public static int getSuccessTablet(final int scrollId, final int level) {
        if (scrollId % 1000 / 100 == 2) { //2047_2_00 = armor, 2047_3_00 = accessory
            switch (level) {
                case 0:
                    return 70;
                case 1:
                    return 55;
                case 2:
                    return 43;
                case 3:
                    return 33;
                case 4:
                    return 26;
                case 5:
                    return 20;
                case 6:
                    return 16;
                case 7:
                    return 12;
                case 8:
                    return 10;
                default:
                    return 7;
            }
        } else if (scrollId % 1000 / 100 == 3) {
            switch (level) {
                case 0:
                    return 70;
                case 1:
                    return 35;
                case 2:
                    return 18;
                case 3:
                    return 12;
                default:
                    return 7;
            }
        } else {
            switch (level) {
                case 0:
                    return 70;
                case 1:
                    return 50; //-20
                case 2:
                    return 36; //-14
                case 3:
                    return 26; //-10
                case 4:
                    return 19; //-7
                case 5:
                    return 14; //-5
                case 6:
                    return 10; //-4
                default:
                    return 7;  //-3
            }
        }
    }

    public static int getCurseTablet(final int scrollId, final int level) {
        if (scrollId % 1000 / 100 == 2) { //2047_2_00 = armor, 2047_3_00 = accessory
            switch (level) {
                case 0:
                    return 10;
                case 1:
                    return 12;
                case 2:
                    return 16;
                case 3:
                    return 20;
                case 4:
                    return 26;
                case 5:
                    return 33;
                case 6:
                    return 43;
                case 7:
                    return 55;
                case 8:
                    return 70;
                default:
                    return 100;
            }
        } else if (scrollId % 1000 / 100 == 3) {
            switch (level) {
                case 0:
                    return 12;
                case 1:
                    return 18;
                case 2:
                    return 35;
                case 3:
                    return 70;
                default:
                    return 100;
            }
        } else {
            switch (level) {
                case 0:
                    return 10;
                case 1:
                    return 14; //+4
                case 2:
                    return 19; //+5
                case 3:
                    return 26; //+7
                case 4:
                    return 36; //+10
                case 5:
                    return 50; //+14
                case 6:
                    return 70; //+20
                default:
                    return 100;  //+30
            }
        }
    }

    public static boolean isAccessory(final int itemId) {
        return (itemId >= 1010000 && itemId < 1040000) || (itemId >= 1122000 && itemId < 1153000) || (itemId >= 1112000 && itemId < 1114001) || (itemId >= 1670000 && itemId < 1680000);
    }

    public static boolean isMedal(final int itemId) {
        return itemId / 10000 == 114;
    }

    public static boolean potentialIDFits(final int potentialID, final int newstate, final int i) {
        //first line is always the best
        //but, sometimes it is possible to get second/third line as well
        //may seem like big chance, but it's not as it grabs random potential ID anyway
        if (newstate == 20) {
            return (i == 0 || Randomizer.nextInt(10) == 0 ? potentialID >= 40000 : potentialID >= 30000 && potentialID < 60004); // xml say so
        } else if (newstate == 19) {
            return (i == 0 || Randomizer.nextInt(10) == 0 ? potentialID >= 30000 : potentialID >= 20000 && potentialID < 30000);
        } else if (newstate == 18) {
            return (i == 0 || Randomizer.nextInt(10) == 0 ? potentialID >= 20000 && potentialID < 30000 : potentialID >= 10000 && potentialID < 20000);
        } else if (newstate == 17) {
            return (i == 0 || Randomizer.nextInt(10) == 0 ? potentialID >= 10000 && potentialID < 20000 : potentialID < 10000);
        } else {
            return false;
        }
    }
    
    public static boolean potentialIDFitsEMC(final int potentialID, final int newstate, final int i) {
        //first line is always the best
        //but, sometimes it is possible to get second/third line as well
        //may seem like big chance, but it's not as it grabs random potential ID anyway
        if (newstate == 20) {
            return (i == 0 || Randomizer.nextInt(10) <= 8 ? potentialID >= 40000 : potentialID >= 30000 && potentialID < 60004); // xml say so
        } else if (newstate == 19) {
            return (i == 0 || Randomizer.nextInt(10) <= 8 ? potentialID >= 30000 : potentialID >= 20000 && potentialID < 30000);
        } else if (newstate == 18) {
            return (i == 0 || Randomizer.nextInt(10) <= 8 ? potentialID >= 20000 && potentialID < 30000 : potentialID >= 10000 && potentialID < 20000);
        } else if (newstate == 17) {
            return (i == 0 || Randomizer.nextInt(10) <= 8 ? potentialID >= 10000 && potentialID < 20000 : potentialID < 10000);
        }
        else {
            return false;
        }
    }
    
     public static boolean potentialIDFitsPMC(final int potentialID, final int newstate, final int i) {
        //first line is always the best
        //but, sometimes it is possible to get second/third line as well
        //may seem like big chance, but it's not as it grabs random potential ID anyway
        if (newstate == 20) {
            return (i == 0 || Randomizer.nextInt(10) <= 10 ? potentialID >= 40000 : potentialID >= 30000 && potentialID < 60004); // xml say so
        } else if (newstate == 19) {
            return (i == 0 || Randomizer.nextInt(10) <= 10 ? potentialID >= 30000 : potentialID >= 20000 && potentialID < 30000);
        } else if (newstate == 18) {
            return (i == 0 || Randomizer.nextInt(10) <= 10 ? potentialID >= 20000 && potentialID < 30000 : potentialID >= 10000 && potentialID < 20000);
        } else if (newstate == 17) {
            return (i == 0 || Randomizer.nextInt(10) <= 10 ? potentialID >= 10000 && potentialID < 20000 : potentialID < 10000);
        }
        else {
            return false;
        }
    }
     
    public static boolean optionTypeFits(final int optionType, final int itemId) {
        switch (optionType) {
            case 10: // weapons
                return isWeapon(itemId);
            case 11: // all equipment except weapons
                return !isWeapon(itemId);
            case 20: // all armors
                return !isAccessory(itemId) && !isWeapon(itemId);
            case 40: // accessories
                return isAccessory(itemId);
            case 50: // Medal
                return isMedal(itemId);
            case 51: // hat
                return itemId / 10000 == 100;
            case 52: // top and overall
                return itemId / 10000 == 104 || itemId / 10000 == 105;
            case 53: // bottom and overall
                return itemId / 10000 == 106 || itemId / 10000 == 105;
            case 54: // glove
                return itemId / 10000 == 108;
            case 55: // shoe
                return itemId / 10000 == 107;
            default:
                return true;
        }
    }

    public static int getNebuliteGrade(final int id) {
        if (id / 10000 != 306) {
            return -1;
        }
        if (id >= 3060000 && id < 3061000) {
            return 0;
        } else if (id >= 3061000 && id < 3062000) {
            return 1;
        } else if (id >= 3062000 && id < 3063000) {
            return 2;
        } else if (id >= 3063000 && id < 3064000) {
            return 3;
        }
        return 4;
    }

    public static final boolean isMountItemAvailable(final int mountid, final int jobid) {
        if (jobid != 900 && mountid / 10000 == 190) {
            switch (mountid) {
                case 1902000:
                case 1902001:
                case 1902002:
                    return isAdventurer(jobid);
                case 1902005:
                case 1902006:
                case 1902007:
                    return isKOC(jobid);
                case 1902015:
                case 1902016:
                case 1902017:
                case 1902018:
                    return isAran(jobid);
                case 1902040:
                case 1902041:
                case 1902042:
                    return isEvan(jobid);
            }

            if (isResist(jobid)) {
                return false; //none lolol
            }
        }
        return mountid / 10000 == 190;
    }

    public static boolean isMechanicItem(final int itemId) {
        return itemId >= 1610000 && itemId < 1660000;
    }

    public static boolean isEvanDragonItem(final int itemId) {
        return itemId >= 1940000 && itemId < 1980000; //194 = mask, 195 = pendant, 196 = wings, 197 = tail
    }

    public static boolean canScroll(final int itemId) {
        return itemId / 100000 != 19 && itemId / 100000 != 16; //no mech/taming/dragon
    }
    
    public static boolean isFastAttackSkill(int skillId) {
        switch(skillId) {
            case 30021238: //BeamDance
            case 36121000:
            case 36120044:
            case 36120043:
            case 36120045:
                return true;
            default:
                return false;
        }
    }

    public static boolean canHammer(final int itemId) {
        switch (itemId) {
            case 1122000:
            case 1122076: //ht, chaos ht
                return false;
        }
        return canScroll(itemId);
    }
    public static int[] owlItems = new int[]{
        1082002, // work gloves
        2070005,
        2070006,
        1022047,
        1102041,
        2044705,
        2340000, // white scroll
        2040017,
        1092030,
        2040804};

    public static int getMasterySkill(final int job) {
        if (job >= 1410 && job <= 1412) {
            return 14100000;
        } else if (job >= 410 && job <= 412) {
            return 4100000;
        } else if (job >= 520 && job <= 522) {
            return 5200000;
        }
        return 0;
    }
    
 

    public static int getExpRate_Below10(final int job) {
        return 10;
    }

    public static int getExpRate_Quest(PlayerStats c) {
        return (int) c.QuestExpBuff;
    }

    public static String getCommandBlockedMsg() {
        return "You may not use this command here.";
    }

    public static int getCustomReactItem(final int rid, final int original) {
        if (rid == 2008006) { //orbis pq LOL
            return (Calendar.getInstance().get(Calendar.DAY_OF_WEEK) + 4001055);
            //4001056 = sunday. 4001062 = saturday
        } else {
            return original;
        }
    }

    public static int getJobNumber(int jobz) {
        int job = (jobz % 1000);
        if (job / 100 == 0 || isBeginnerJob(jobz)) {
            return 0; //beginner
        } else if ((job / 10) % 10 == 0 || job == 501) {
            return 1;
        } else {
            return 2 + (job % 10);
        }
    }

    public static boolean isBeginnerJob(final int job) {
        return job == 0 || job == 1 || job == 1000 || job == 2000 || job == 2001 || job == 8000 || job == 3000 || job == 3001 || job == 2002 || job == 2003 || job == 5000 || job == 2004 || job == 4001 || job == 4002 || job == 6000 || job == 6001 || job == 3002;
    }

    public static boolean isAzwanMap(int mapId) {
        return mapId >= 262020000 && mapId < 262023000;
    }
    
    public static boolean isGolluxMap(int mapId) {
        return mapId >= 863010100 && mapId <= 863010700;
    }
    
    public static boolean isForceRespawn(int mapid) {
        switch (mapid) {
            case 103000800: //kerning PQ crocs
            case 925100100: //crocs and stuff
                return true;
            default:
                return mapid / 100000 == 9800 && (mapid % 10 == 1 || mapid % 1000 == 100);
        }
    }

    public static int getFishingTime(boolean vip, boolean gm) {
        return gm ? 1000 : (vip ? 30000 : 60000);
    }

    public static int getCustomSpawnID(int summoner, int def) {
        switch (summoner) {
            case 9400589:
            case 9400748: //MV
                return 9400706; //jr
            default:
                return def;
        }
    }

    public static boolean canForfeit(int questid) {
        switch (questid) {
            case 20000:
            case 20010:
            case 20015: //cygnus quests
            case 20020:
                return false;
            default:
                return true;
        }
    }

    public static double getAttackRange(MapleStatEffect def, int rangeInc) {
        double defRange = ((400.0 + rangeInc) * (400.0 + rangeInc));
        if (def != null) {
            defRange += def.getMaxDistanceSq() + (def.getRange() * def.getRange());
        }
        //rangeInc adds to X
        //400 is approximate, screen is 600.. may be too much
        //200 for y is also too much
        //default 200000
        return defRange + 120000.0;
    }

    public static double getAttackRange(Point lt, Point rb) {
        double defRange = (400.0 * 400.0);
        final int maxX = Math.max(Math.abs(lt == null ? 0 : lt.x), Math.abs(rb == null ? 0 : rb.x));
        final int maxY = Math.max(Math.abs(lt == null ? 0 : lt.y), Math.abs(rb == null ? 0 : rb.y));
        defRange += (maxX * maxX) + (maxY * maxY);
        //rangeInc adds to X
        //400 is approximate, screen is 600.. may be too much
        //200 for y is also too much
        //default 200000
        return defRange + 120000.0;
    }

    public static long getMagnifyPrice(Equip eq) {
        MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
        if (!ii.getEquipStats(eq.getItemId()).containsKey("reqLevel")) {
            return -1;
        }
        int level = ii.getEquipStats(eq.getItemId()).get("reqLevel").intValue();
        long price;
        int v1; // esi@1
        double v2; // st7@7
        int v3; // eax@7
        double v4; // st6@7
        int v5; // eax@12

        v1 = 0;
        if (level > 120) {
            v1 = 20;
        } else if (level > 70) {
            v1 = 5;
        } else if (level > 30) {
            v1 = 1;
        }
        v2 = (double) level;
        v3 = 2;
        v4 = 1.0;
        while (1 != 0) {
            if ((v3 & 1) != 0) {
                v4 = v4 * v2;
            }
            v3 >>= 1;
            if (!(v3 != 0)) {
                break;
            }
            v2 = v2 * v2;
        }
        v5 = (int) Math.ceil(v4);
        price = ((v1 * v5 <= 0 ? 1 : 0) - 1) & v1 * v5;

        return price;
    }

    public static int getLowestPrice(int itemId) {
        switch (itemId) {
            case 2340000: //ws
            case 2531000:
            case 2530000:
                return 50000000;
        }
        return -1;
    }

    public static boolean isNoDelaySkill(int skillId) {
        return skillId == 3120017 || skillId == 3100010 || skillId == 13120003 || skillId == 13120010 || skillId == 13110022 || skillId == 13110027 || skillId == 13100022 || skillId == 13100027 || skillId == 13121054 || skillId == 27120211 || skillId == 27121201 || skillId == 65111007 || skillId == 65111100 || skillId == 31121005 ||skillId == 5110001 || skillId == 21101003 || skillId == 15100004 || skillId == 33101004 || skillId == 32111010 || skillId == 2111007 || skillId == 2211007 || skillId == 2311007 || skillId == 32121003 || skillId == 35121005 || skillId == 35111004 || skillId == 35121013 || skillId == 35121003 || skillId == 22150004 || skillId == 22181004 || skillId == 11101002 || skillId == 51100002 || skillId == 13101002 || skillId == 24121000 || skillId == 22161005 || skillId == 22161005;
    }
    
     public static boolean isInnerSkill(int skillId) {
        return skillId >= 70000000 && skillId <= 70000062;
    }

    public static boolean isNoSpawn(int mapID) {
        return mapID == 809040100 || mapID == 925020010 || mapID == 925020011 || mapID == 925020012 || mapID == 925020013 || mapID == 925020014 || mapID == 682020000 || mapID == 980010000 || mapID == 980010100 || mapID == 980010200 || mapID == 980010300 || mapID == 980010020;
    }

    public static int getExpRate(int job, int def) {
        return def;
    }

    public static int getModifier(int itemId, int up) {
        if (up <= 0) {
            return 0;
        }
        switch (itemId) {
            case 2860209:
                return 60;
            case 2860181:
            case 2860195:
                return 100;
            case 2860207:
                return 20;
            case 2870011:
            case 2870405:
            case 2870315:
            case 2870087:
            case 2870240:
            case 2870168:
            case 2870201:
            case 2860320:
            case 2870153:
            case 2870072:
            case 2870310:
            case 2870320:
            case 2860208:
            case 2860196:
            case 2860197:
                return 40;
            case 2860179:
                return 30;
        }
        return 50;
    }

    public static short getSlotMax(int itemId) {
        switch (itemId) {
            case 4030003:
            case 4030004:
            case 4030005:
                return 1;
            case 4001168:
            case 4031306:
            case 4031307:
            case 3993000:
            case 3993002:
            case 3993003:
                return 100;
            case 5220010:
            case 5220013:
                return 1000;
            case 5220020:
                return 2000;
        }
        return 0;
    }

    public static boolean isDropRestricted(int itemId) {
        return itemId == 3012000 || itemId == 4030004 || itemId == 1052098 || itemId == 1052202;
    }

    public static boolean isPickupRestricted(int itemId) {
        return itemId == 4030003 || itemId == 4030004;
    }

    public static short getStat(int itemId, int def) {
        switch (itemId) {
            //case 1002419:
            //    return 5;
            case 1002959:
                return 25;
            case 1142002:
                return 10;
            case 1122121:
                return 7;
        }
        return (short) def;
    }

    public static short getHpMp(int itemId, int def) {
        switch (itemId) {
            case 1122121:
                return 500;
            case 1142002:
            case 1002959:
                return 1000;
        }
        return (short) def;
    }

    public static short getATK(int itemId, int def) {
        switch (itemId) {
            case 1122121:
                return 3;
            case 1002959:
                return 4;
            case 1142002:
                return 9;
        }
        return (short) def;
    }

    public static short getDEF(int itemId, int def) {
        switch (itemId) {
            case 1122121:
                return 250;
            case 1002959:
                return 500;
        }
        return (short) def;
    }

    public static boolean isDojo(int mapId) {
        return mapId >= 925020100 && mapId <= 925023814;
    }

    public static int getPartyPlayHP(int mobID) {
        switch (mobID) {
            case 4250000:
                return 836000;
            case 4250001:
                return 924000;
            case 5250000:
                return 1100000;
            case 5250001:
                return 1276000;
            case 5250002:
                return 1452000;

            case 9400661:
                return 15000000;
            case 9400660:
                return 30000000;
            case 9400659:
                return 45000000;
            case 9400658:
                return 20000000;
        }
        return 0;
    }

    public static int getPartyPlayEXP(int mobID) {
        switch (mobID) {
            case 4250000:
                return 5770;
            case 4250001:
                return 6160;
            case 5250000:
                return 7100;
            case 5250001:
                return 7975;
            case 5250002:
                return 8800;

            case 9400661:
                return 40000;
            case 9400660:
                return 70000;
            case 9400659:
                return 90000;
            case 9400658:
                return 50000;
        }
        return 0;
    }

    public static int getPartyPlay(int mapId) {
        switch (mapId) {
            case 300010000:
            case 300010100:
            case 300010200:
            case 300010300:
            case 300010400:
            case 300020000:
            case 300020100:
            case 300020200:
            case 300030000:

            case 683070400:
            case 683070401:
            case 683070402:
                return 25;
        }
        return 0;
    }

    public static int getPartyPlay(int mapId, int def) {
        int dd = getPartyPlay(mapId);
        if (dd > 0) {
            return dd;
        }
        return def / 2;
    }

    public static boolean isHyperTeleMap(int mapId) {
        for (int i : hyperTele) {
            if (i == mapId) {
                return true;
            }
        }
        return false;
    }

    public static int getCurrentDate() {
        final String time = FileoutputUtil.CurrentReadable_Time();
        return Integer.parseInt(new StringBuilder(time.substring(0, 4)).append(time.substring(5, 7)).append(time.substring(8, 10)).append(time.substring(11, 13)).toString());
    }

    public static int getCurrentDate_NoTime() {
        final String time = FileoutputUtil.CurrentReadable_Time();
        return Integer.parseInt(new StringBuilder(time.substring(0, 4)).append(time.substring(5, 7)).append(time.substring(8, 10)).toString());
    }

    public static void achievementRatio(MapleClient c) {
        //PQs not affected: Amoria, MV, CWK, English, Zakum, Horntail(?), Carnival, Ghost, Guild, LudiMaze, Elnath(?) 
        switch (c.getPlayer().getMapId()) {
            case 240080600:
            case 920010000:
            case 930000000:
            case 930000100:
            case 910010000:
            case 922010100:
            case 910340100:
            case 925100000:
            case 926100000:
            case 926110000:
            case 921120005:
            case 932000100:
            case 923040100:
            case 921160100:
                c.getSession().write(CField.achievementRatio(0));
                break;
            case 930000200:
            case 922010200:
            case 922010300:
            case 922010400:
            case 922010401:
            case 922010402:
            case 922010403:
            case 922010404:
            case 922010405:
            case 925100100:
            case 926100001:
            case 926110001:
            case 921160200:
                c.getSession().write(CField.achievementRatio(10));
                break;
            case 930000300:
            case 910340200:
            case 922010500:
            case 922010600:
            case 925100200:
            case 925100201:
            case 925100202:
            case 926100100:
            case 926110100:
            case 921120100:
            case 932000200:
            case 923040200:
            case 921160300:
            case 921160310:
            case 921160320:
            case 921160330:
            case 921160340:
            case 921160350:
                c.getSession().write(CField.achievementRatio(25));
                break;
            case 930000400:
            case 926100200:
            case 926110200:
            case 926100201:
            case 926110201:
            case 926100202:
            case 926110202:
            case 921160400:
                c.getSession().write(CField.achievementRatio(35));
                break;
            case 910340300:
            case 922010700:
            case 930000500:
            case 925100300:
            case 925100301:
            case 925100302:
            case 926100203:
            case 926110203:
            case 921120200:
            case 932000300:
            case 240080700:
            case 240080800:
            case 923040300:
            case 921160500:
                c.getSession().write(CField.achievementRatio(50));
                break;
            case 910340400:
            case 922010800:
            case 930000600:
            case 925100400:
            case 926100300:
            case 926110300:
            case 926100301:
            case 926110301:
            case 926100302:
            case 926110302:
            case 926100303:
            case 926110303:
            case 926100304:
            case 926110304:
            case 921120300:
            case 932000400:
            case 923040400:
            case 921160600:
                c.getSession().write(CField.achievementRatio(70));
                break;
            case 910340500:
            case 922010900:
            case 930000700:
            case 920010800:
            case 925100500:
            case 926100400:
            case 926110400:
            case 926100401:
            case 926110401:
            case 921120400:
            case 921160700:
                c.getSession().write(CField.achievementRatio(85));
                break;
            case 922011000:
            case 922011100:
            case 930000800:
            case 920011000:
            case 920011100:
            case 920011200:
            case 920011300:
            case 925100600:
            case 926100500:
            case 926110500:
            case 926100600:
            case 926110600:
            case 921120500:
            case 921120600:
                c.getSession().write(CField.achievementRatio(100));
                break;
        }
    }

    public static boolean isAngel(int sourceid) {
        return isBeginnerJob(sourceid / 10000) && (sourceid % 10000 == 1262 || sourceid % 10000 == 1085 || sourceid % 10000 == 1087 || sourceid % 10000 == 1090 || sourceid % 10000 == 1179 || sourceid % 10000 == 1154);
    }
    
    public static boolean isLightningGod(int sourceid) {
        return sourceid == 80001262;
    }

    public static boolean isFishingMap(int mapid) {
        return mapid == 749050500 || mapid == 749050501 || mapid == 749050502 || mapid == 970020000 || mapid == 970020005;
    }

    public static int getRewardPot(int itemid, int closeness) {
        switch (itemid) {
            case 2440000:
                switch (closeness / 10) {
                    case 0:
                    case 1:
                    case 2:
                        return 2028041 + (closeness / 10);
                    case 3:
                    case 4:
                    case 5:
                        return 2028046 + (closeness / 10);
                    case 6:
                    case 7:
                    case 8:
                        return 2028049 + (closeness / 10);
                }
                return 2028057;
            case 2440001:
                switch (closeness / 10) {
                    case 0:
                    case 1:
                    case 2:
                        return 2028044 + (closeness / 10);
                    case 3:
                    case 4:
                    case 5:
                        return 2028049 + (closeness / 10);
                    case 6:
                    case 7:
                    case 8:
                        return 2028052 + (closeness / 10);
                }
                return 2028060;
            case 2440002:
                return 2028069;
            case 2440003:
                return 2430278;
            case 2440004:
                return 2430381;
            case 2440005:
                return 2430393;
        }
        return 0;
    }

    public static boolean isStartingEventMap(final int mapid) {
        switch (mapid) {
            case 109010000:
            case 109020001:
            case 109030001:
            case 109030101:
            case 109030201:
            case 109030301:
            case 109030401:
            case 109040000:
            case 109060001:
            case 109060002:
            case 109060003:
            case 109060004:
            case 109060005:
            case 109060006:
            case 109080000:
            case 109080001:
            case 109080002:
            case 109080003:
                return true;
        }
        return false;
    }

    public static boolean isEventMap(final int mapid) {
        return (mapid >= 109010000 && mapid < 109050000) || (mapid > 109050001 && mapid < 109090000) || (mapid >= 809040000 && mapid <= 809040100);
    }

    public static boolean isCoconutMap(final int mapid) {
        return mapid == 109080000 || mapid == 109080001 || mapid == 109080002 || mapid == 109080003 || mapid == 109080010 || mapid == 109080011 || mapid == 109080012 || mapid == 109090300 || mapid == 109090301 || mapid == 109090302 || mapid == 109090303 || mapid == 109090304 || mapid == 910040100;
    }

    public static boolean isMagicChargeSkill(final int skillid) {
        switch (skillid) {
            case 2121001: // Big Bang
            case 2221001:
            case 2321001:
            case 42121000:
            //case 27101202:
            case 27111100:
            case 27120211:
            case 27121201:    
                //case 22121000: //breath
                //case 22151001:
                return true;
        }
        return false;
    }

    public static boolean isTeamMap(final int mapid) {
        return mapid == 109080000 || mapid == 109080001 || mapid == 109080002 || mapid == 109080003 || mapid == 109080010 || mapid == 109080011 || mapid == 109080012 || mapid == 109090300 || mapid == 109090301 || mapid == 109090302 || mapid == 109090303 || mapid == 109090304 || mapid == 910040100 || mapid == 960020100 || mapid == 960020101 || mapid == 960020102 || mapid == 960020103 || mapid == 960030100 || mapid == 689000000 || mapid == 689000010;
    }

    public static int getStatDice(int stat) {
        switch (stat) {
            case 2:
                return 30;
            case 3:
                return 20;
            case 4:
                return 15;
            case 5:
                return 20;
            case 6:
                return 30;
        }
        return 0;
    }

    public static boolean isAuraBuff(MapleBuffStat stat) {
        switch (stat) {
            case DARK_AURA:
            case BLUE_AURA:
            case YELLOW_AURA:
                return true;
        }
        return false;
    }

    public static boolean isSpecialBuff(MapleBuffStat stat) {
        switch (stat) {
            case CRITICAL_RATE:
            case KAISER_COMBO:
            case DAMAGE_ABSORBED:
            case CRIT_DAMAGE:
            case SHADOWPARTNER:
            case DAMAGE_R:
                return true;
        }
        return false;
    }

    public static boolean isSpecialStackBuff(MapleBuffStat stat) {
        switch (stat) {
            case WARRIOR_STANCE:
            case PARASHOCK_GUARD:
                return true;
        }
        return false;
    }

    public static boolean isValuelessBuff(int buffid) {
        switch (buffid) {
            case 23101003: //Spirit Surge
                return true;
        }
        return false;
    }

    public static boolean isCustomReturnMap(int mapid) {
        switch (mapid) {
            case 689013000:
                return true;
        }
        return false;
    }

    public static int getCustomReturnMap(int mapid) {
        switch (mapid) {
            case 689013000:
                return 689012001;
        }
        return mapid;
    }

    public static boolean isAnyDropMap(int mapId) {
        switch (mapId) {
            case 180000000:
            case 180000001:
                return true;
        }
        return false;
    }

    public static boolean isNoExpireMap(int mapId) {
        switch (mapId) {
            case 180000000:
            case 180000001:
                return true;
        }
        return false;
    }

    public static int getSpecialMapTarget(int mapId) {
        if (ServerConstants.Old_Maps) {
            switch (mapId) {
                case 690000029:
                    return 100010000;
                case 100000000:
                    return 690000025;
            }
        }
        return mapId;
    }

    public static String getSpecialPortalTarget(int mapId, String portalId) {
        if (ServerConstants.Old_Maps) {
            if (mapId == 100010000 && "old_lith".equals(portalId)) {
                return "east00";
            } else if (mapId == 100000000 && "west00".equals(portalId)) {
                return "old_lith";
            } else if (mapId == 100000000 && "east00".equals(portalId)) {
                return "old_portalnpc_2";
            }
        }
        return portalId;
    }

    public static String getCashBlockedMsg(final int id) {
        switch (id) {
            case 5211014:
            case 5211015:
            case 5211016:
            case 5211017:
            case 5211018:
            case 5211019:
            case 5211039:
            case 5211042:
            case 5211045:
                //cube
                return "This item is blocked.";
        }
        return "This item is blocked from the Cash Shop.";
    }

    public static final boolean isRedLeaf(int mapid) {
        return mapid / 1000000 == 744;
    }

    public static int getDiceStat(int buffid, int stat) {
        if (buffid == stat || buffid % 10 == stat || buffid / 10 == stat) {
            return getStatDice(stat);
        } else if (buffid == (stat * 100)) {
            return getStatDice(stat) + 10;
        }
        return 0;
    }

    public static boolean isEnergyBuff(int skill) { //body pressure, tele mastery, twister spin. etc
        switch (skill) {
            case 32121003:
            case 21101003:
            case 2311007:
            case 22161005:
            case 2211007:
            case 2111007:
            case 32111010:
            case 12111007:
                return true;
        }
        return false;
    }

    public static int getHpApByJob(short job) {
        if ((job % 1000) / 100 > 5) {
            job -= 500;
        }
        if ((job % 1000) / 100 == 5) {
            switch (job / 10) {
                case 51:
                    return 68;
                case 53:
                    return 28;
            }
        }
        switch (job / 100) {
            case 21:
                return 30;
            case 22:
                return 12;
            case 31:
                return 38;
            case 32:
                return 20;
        }
        switch ((job % 1000) / 100) {
            case 0:
                return 8;
            case 1:
                return 50;
            case 2:
                return 6;
            case 3:
            case 4:
                return 16;
            case 5:
                return 18;
            default:
                return 8;
        }
    }

    public static int getMpApByJob(short job) {
        if (job / 100 == 31 || job / 100 == 65) {
            return 0;
        }
        if ((job % 1000) / 100 > 5) {
            job -= 500;
        }
        switch (job / 100) {
            case 22:
                return 72;
            case 32:
                return 69;
        }
        switch ((job % 1000) / 100) {
            case 0:
                return 57;
            case 1:
                return 53;
            case 2:
                return 79;
            case 3:
            case 4:
                return 61;
            case 5:
                return 65;
            default:
                return 57;
        }
    }

    public static int getSkillLevel(final int level) {
        if (level >= 70 && level < 120) {
            return 2;
        } else if (level >= 120 && level < 200) {
            return 3;
        } else if (level == 200) {
            return 4;
        }
        return 1;
    }

    public static int[] getInnerSkillbyRank(int rank) {
        if (rank == 0) {
            return rankC;
        } else if (rank == 1) {
            return rankB;
        } else if (rank == 2) {
            return rankA;
        } else if (rank == 3) {
            return rankS;
        } else {
            return null;
        }
    }
    public static int[] getRandomNebulite(final int rank, final int itemId) {
       // System.out.println("RANK VALUE IS " + rank + " ItemId :" + itemId);
        if (rank >= 60) {
            if (GameConstants.isCap(itemId)) {
                System.out.println("NebuliteRankAHat");
            return NebuliteRankAHat;
            } 
            if (GameConstants.isShoes(itemId)) {
                System.out.println("NebuliteRankAShoe");
            return NebuliteRankAShoe;
            }
            if (GameConstants.isGlove(itemId)) {
                System.out.println("NebuliteRankAGlove");
            return NebuliteRankAGlove;
            }
            if (GameConstants.isWeapon(itemId)) {
                System.out.println("NebuliteRankAWeapon");
            return NebuliteRankAWeapon;
            }
            if (GameConstants.isBottom(itemId)) {
                System.out.println("NebuliteRankABottom");
            return NebuliteRankABottom;
            }
            if (GameConstants.isLongCoat(itemId)) {
                System.out.println("NebuliteRankAOverall");
            return NebuliteRankAOverall;
            }
            else {
                System.out.println("NebuliteRankAAll");
            return NebuliteRankAAll;    
            }
        }   
        if (rank == 1) {
            if (GameConstants.isCap(itemId)) {
                System.out.println("NebuliteRankSHat");
            return NebuliteRankSHat;
            } 
            if (GameConstants.isShoes(itemId)) {
                System.out.println("NebuliteRankSShoe");
            return NebuliteRankSShoe;
            }
            if (GameConstants.isGlove(itemId)) {
                System.out.println("NebuliteRankSGlove");
            return NebuliteRankSGlove;
            }
            if (GameConstants.isWeapon(itemId)) {
                System.out.println("NebuliteRankSWeapon");
            return NebuliteRankSWeapon;
            }
            if (GameConstants.isAccessory(itemId)) {
                System.out.println("NebuliteRankSAccessory");
            return NebuliteRankSAccessory;
            }
            if (GameConstants.isBottom(itemId)) {
                System.out.println("NebuliteRankSBottom");
            return NebuliteRankSBottom;
            }
            if (GameConstants.isCoat(itemId)) {
                System.out.println("NebuliteRankSTop");
            return NebuliteRankSTop;
            }
            if (GameConstants.isLongCoat(itemId)) {
                System.out.println("NebuliteRankSOverall");
            return NebuliteRankSOverall;
            }
            else {
                System.out.println("NebuliteRankSAll");
            return NebuliteRankSAll;
            }
        } else {
            if (GameConstants.isShoes(itemId)) {
                System.out.println("NebuliteRankBShoe");
            return NebuliteRankBShoe;
            }
            if (GameConstants.isGlove(itemId)) {
                System.out.println("NebuliteRankBGlove");
            return NebuliteRankBGlove;
            }
            if (GameConstants.isWeapon(itemId)) {
                System.out.println("NebuliteRankBWeapon");
            return NebuliteRankBWeapon;
            }
             if (GameConstants.isCoat(itemId)) {
                 System.out.println("NebuliteRankBTop");
            return NebuliteRankBTop;
            }
            if (GameConstants.isLongCoat(itemId)) {
                System.out.println("NebuliteRankBOverall");
            return NebuliteRankBOverall;
            }
            if (GameConstants.isBottom(itemId)) {
                System.out.println("NebuliteRankBBottom");
            return NebuliteRankBBottom;
            }
            else {
            System.out.println("NebuliteRankBAll");
            return NebuliteRankBAll;    
            }
        }
    }
    
    private static final int[] azwanRecipes = {2510483, 2510484, 2510485, 2510486, 2510487, 2510488, 2510489, 2510490, 2510491, 2510492, 2510493, 2510494, 2510495, 2510496, 2510497, 2510498, 2510499, 2510500, 2510501, 2510502, 2510503, 2510504, 2510505, 2510506, 2510507, 2510508, 2510509, 2510510, 2510511, 2510512, 2510513, 2510514, 2510515, 2510516, 2510517, 2510518, 2510519, 2510520, 2510521, 2510522, 2510523, 2510524, 2510525, 2510526, 2510527, 2511153, 2511154, 2511155};
    private static final int[] azwanScrolls = {2046060, 2046061, 2046062, 2046063, 2046064, 2046065, 2046066, 2046067, 2046068, 2046069, 2046141, 2046142, 2046143, 2046144, 2046145, 2046519, 2046520, 2046521, 2046522, 2046523, 2046524, 2046525, 2046526, 2046527, 2046528, 2046529, 2046530, 2046701, 2046702, 2046703, 2046704, 2046705, 2046706, 2046707, 2046708, 2046709, 2046710, 2046711, 2046712};
    private static final Pair[] useItems = {new Pair<>(2002010, 500), new Pair<>(2002006, 600), new Pair<>(2002007, 600), new Pair<>(2002008, 600), new Pair<>(2002009, 600), new Pair<>(2022003, 770), new Pair<>(2022000, 1155), new Pair<>(2001001, 2300), new Pair<>(2001002, 4000), new Pair<>(2020012, 4680), new Pair<>(2020013, 5824), new Pair<>(2020014, 8100), new Pair<>(2020015, 10200), new Pair<>(2000007, 5), new Pair<>(2000000, 5), new Pair<>(2000008, 48), new Pair<>(2000001, 48), new Pair<>(2000009, 96), new Pair<>(2000002, 96), new Pair<>(2000010, 20), new Pair<>(2000003, 20), new Pair<>(2000011, 186), new Pair<>(2000006, 186), new Pair<>(2050000, 200), new Pair<>(2050001, 200), new Pair<>(2050002, 300), new Pair<>(2050003, 500)};
    public static int[] getAzwanRecipes() {
        return azwanRecipes;
    }

    public static int[] getAzwanScrolls() {
        return azwanScrolls;
    }

    public static Pair[] getUseItems() {
        return useItems;
    }

    public static int[] getCirculators() {
        return circulators;
    }
  
private static final int[] wheelRewardsMaple = {    
1003529,
1052457,
1082430,
1072660,
1102394,
1152088,
1132151,
1302212,
1312114,
1322154,
1332186,
1362060,
1372131,
1382160,
1402145,
1412102,
1422105,
1432135,
1442173,
1452165,
1462156,
1472177,
1482138,
1492138,
1522068,
1532073,
1212068,
1222063,
1542058,
1552058,
2046099,
2046166,
2046191,
2046565,
2046566,
2046567,
2046568,
2046681,
2046682,
2046683,
2046684,
2046751,
2046752,
2046753,
2046754,
2046799,
2046800,
2046801,
2046802,
2046900,
2046943,
2046944,
2046945,
2046946,
2049125//8th anniversary Chaos scroll
    };

private static final int[] wheelRewardsMining = {
4007000,
4007001,
4007002,
4007003,
4007004,
4007005,
4007006,
4007007,
4011000,
4011001,
4011002,
4011003,
4011004,
4011005,
4011006,
4011007,
4020009,
4020013,
4021000,
4021001,
4021002,
4021003,
4021004,
4021005,
4021006,
4021007,
4021008,
4021009,
4021013,
4021014,
4021015,
4021016,
4021017,
4021019,
4021020
    };
private static final int[] wheelRewardsHerbalist = {
4007000,
4007001,
4007002,
4007003,
4007004,
4007005,
4007006,
4007007,
4023000,
4023001,
4023002,
4023003,
4023004,
4023005,
4023006,
4023007,
4023008,
4023009,
4023010,
4023011,
4023012,
4023013,
4023014,
4023015,
4023016,
4023017,
4023018,
4023019,
4023020,
4023021
    };
    private static final int[] wheelRewardsA = {
1122151,//Chaos Horntail Necklace (+2)
1112597,//Cygnus Kohinoor Ring
1112586,//Dark Angelic Blessing
1012285,//Dark Premium Symbol
1372084,//Dragon Tail Arc Wand
1552015,//Dragon Tail Fan
1102276,//Dragon Tail Mage Cape
1082296,//Dragon Tail Mage Gloves
1052315,//Dragon Tail Mage Robe
1003173,//Dragon Tail Mage Sallet
1072486,//Dragon Tail Mage Shoes
1152110,//Dragon Tail Mage Shoulder
1212014,//Dragon Tail Thanatos
//totems
1202089,
1202090,
1202091,
1202187,
1202188,
1202189,
1202118,
1202119,
//1202200, level 200 reward
//end totems
1382104,//Dragon Tail War Staff
1452111,//Falcon Wing Composite Bow
1522018,//Falcon Wing Dual Bowguns
1462099,//Falcon Wing Heavy Crossbow
1072487,//Falcon Wing Sentinel Boots
1003174,//Falcon Wing Sentinel Cap
1102277,//Falcon Wing Sentinel Cape
1082297,//Falcon Wing Sentinel Gloves
1152111,//Falcon Wing Sentinel Shoulder
1052316,//Falcon Wing Sentinel Suit
1182006,//Hero of Legend
1112666,//High Lord's Eternal Ring
1152156,//Inverse Metal Shoulder (Missing Codex)
1252058,//Ardentmill Lumiclaw Scepter
1003893,//Rare Alien Fragment Helmet
1112665,//Berserker's Eternal Ring
1032110,//Blazing Sun Earrings
1012283,//Blazing Sun Face Paint
1112662,//Blazing Sun Ring
1182157,
1252014,//Kitten Tail Scepter
1252014,//Kitten Tail Scepter
1113020,//Lightning God's Ring
1152108,//Lion Heart Battle Shoulder
1003172,//Lionheart Battle Helm
1412065,//Lionheart Battle Axe
1072485,//Lionheart Battle Boots
1082295,//Lionheart Battle Bracers
1102275,//Lionheart Battle Cape
1322096,//Lionheart Battle Hammer
1052314,//Lionheart Battle Mail
1402095,//Lionheart Battle Scimitar
1422066,//Lionheart Blast Maul
1312065,//Lionheart Champion Axe
1302152,//Lionheart Cutlass
1432086,//Lionheart Fuscina
1232014,//Lionheart Painful Destiny
1442116,//Lionheart Partisan
1542015,//Lionheart Red King
1332235,//Meister Angelic Betrayal
1222072,//Meister Angelic Shooter
1412144,//Meister Battle Axe
1452214,//Meister Battle Bow
1422149,//Meister Battle Hammer
1432176,//Meister Battle Spear
1382220,//Meister Battle Staff
1402204,//Meister Claymore
1532106,//Meister Crash
1462202,//Meister Crossbow
1472223,//Meister Dark Slain
1232071,//Meister Death Bringer
1522103,//Meister Eagle Wing
1032200,//Meister Earring
1372186,//Meister Evil Wand
1302285,//Meister Gladius
1482177,//Meister Griffey Claw
1442232,//Meister Hellslayer
1492188,//Meister Infinity's Wrath
1492188,//Meister Infinity's Wrath
1542075,//Meister Katana
1342084,//Meister Katara
1362099,//Meister Persona
1152154,//Meister Shoulder
1242076,//Meister Split Edge
1212077,//Meister Thanatos
1312162,//Meister War Cleaver
1322213,//Meister Warhammer
1552075,//Meister Wind
1112667,//Oracle's Eternal Ring
1032135,//Premium Gold Emerald Earrings
1182067,//RED Warrior's Badge
1072488,//Raven Horn Chaser Boots
1102278,//Raven Horn Chaser Cape
1082298,//Raven Horn Chaser Gloves
1003175,//Raven Horn Chaser Hat
1332130,//Raven Horn Baselard
1362019,//Raven Horn Crimson Cane
1242042,//Raven Horn Fallen Queen
1472122,//Raven Horn Metal Fist
1342036,//Raven Horn Shadow Katara
1182011,//Renegade Justice Badge
1032093,//Rising Sun Earrings
1112584,//Rising Sun Ring
/*1332226,//Scarlet Angelic Betrayal
1222060,//Scarlet Angelic Shooter
1412136,//Scarlet Battle Axe
1452206,//Scarlet Battle Bow
1422141,//Scarlet Battle Hammer
1432168,//Scarlet Battle Spear
1402197,//Scarlet Claymore
1532099,//Scarlet Crash
1462194,//Scarlet Crossbow
1472215,//Scarlet Dark Slain
1152112,//Raven Horn Chaser Shoulder
1152155,//Scarlet Shoulder
1232058,//Scarlet Death Bringer
1522095,//Scarlet Eagle Wings
1032216,//Scarlet Earring
1372178,//Scarlet Evil Wand
1302276,//Scarlet Gladius
1482169,//Scarlet Griffey Claw
1442224,//Scarlet Hellslayer
1492180,//Scarlet Infinity's Wrath
1492180,//Scarlet Infinity's Wrath
1342083,//Scarlet Katara
1362091,//Scarlet Persona
1113070,//Scarlet Ring
1242062,//Scarlet Split Edge
1242063,//Scarlet Split Edge
1212065,//Scarlet Thanatos
1312154,//Scarlet War Cleaver
1322204,//Scarlet War Hammer*/
1003176,//Shark Tooth Skipper Hat
1242014,//Shark Tooth Fallen Queen
1492085,//Shark Tooth Sharpshooter
1072489,//Shark Tooth Skipper Boots
1102279,//Shark Tooth Skipper Cape
1052318,//Shark Tooth Skipper Coat
1082299,//Shark Tooth Skipper Gloves
1152113,//Shark Tooth Skipper Shoulder
1222014,//Shark Tooth Soul Drinker
1532018,//Shark Tooth Supernova
1482084,//Shark Tooth Wild Talon
1182019,//Shiny Rainbow Badge
1082399,//Super Stormcaster Gloves
1003361,//Super Zakum Helmet
/*
1113074,
1113075,
1113073,
1113072,
1132243,
1132244,
1132245,
1132246,
1122264,
1122265,
1122266,
1122267,
1032220,
1032221,
1032222,
1032223,
*/
1132215,//Tinkerer's Black Belt
1152124,//Tinkerer's Black Shoulder Accessory
1132213,//Tinkerer's Blue Belt
1152122,//Tinkerer's Blue Shoulder Accessory
1132214,//Tinkerer's Red Belt
1152123,//Tinkerer's Red Shoulder Accessory
1112663,//White Angelic Blessing
1012411,//White Premium Meister Symbol
1112664,//Guardian's Eternal Ring
1132230,//Alien Fragment Belt
1032191,//Alien Fragment Earrings
1122256,//Alien Fragment Necklace
1312173,//Sweetwater Axe
1132247,//Sweetwater Belt
1452226,//Sweetwater Bow
1362109,//Sweetwater Cane
1102623,//Sweetwater Cape
1242090,//Sweetwater Chain Sword
1462213,//Sweetwater Crossbow
1232084,//Sweetwater Demon Sword
1032224,//Sweetwater Earrings
1022211,//Sweetwater Glasses
1082556,//Sweetwater Gloves
1482189,//Sweetwater Grip
1532118,//Sweetwater Hand Cannon
1003976,//Sweetwater Hat
1542072,//Sweetwater Katana
1342090,//Sweetwater Katara
1332247,//Sweetwater Knife
1322223,//Sweetwater Mace
1422158,//Sweetwater Maul
1122269,//Sweetwater Pendant
1442242,//Sweetwater Polearm
1212089,//Sweetwater Shining Rod
1072870,//Sweetwater Shoes
1492199,//Sweetwater Shooter
1152160,//Sweetwater Shoulder
1222084,//Sweetwater Soul Shooter
1432187,//Sweetwater Spear
1382231,//Sweetwater Staff
1472235,//Sweetwater Steer
1052669,//Sweetwater Suit
1302297,//Sweetwater Sword
1012438,//Sweetwater Tattoo
1252033,//Sweetwater Tigress Scepter
1522113,//Sweetwater Twin Angels
1412152,//Sweetwater Two-Handed Axe
1402220,//Sweetwater Two-Handed Sword
1372195,//Sweetwater Wand
1552072//Sweetwater Wind
    };
    //recipes, alchemy potions, potions, town scrolls, etc items
    private static final int[] wheelRewardsB = {
1112585,//Angelic Blessing
1332241,//Courage Wings
1302292,//Courage Wings
1312168,//Courage Wings
1322218,//Courage Wings
1182060,//Ghost Ship Exorcist
//1152134,//Krexel Pauldron
1112690,//Legendary Black Dragon Ring
1122059,//Mark of Naricain
1032104,//Rex's Perfect Blue Earrings
1032102,//Rex's Perfect Green Earrings
1032103,//Rex's Perfect Red Earrings
1452219,//Swift Wings
1132212,//Tinkerer's Green Belt
1152121,//Tinkerer's Green Shoulder Accessory
1132211,//Tinkerer's Yellow Belt
1152120,//Tinkerer's Yellow Shoulder Accessory
1492193,//Triumphant Wings
1472229,//Triumphant Wings
1482182,//Triumphant Wings
1003755,//Unleashed Snow
1442237,//Valiant Wings
1412150,//Valiant Wings
1422155,//Valiant Wings
1432181,//Valiant Wings
1402213,//Valiant Wings
1382225,//Wings of Wisdom
1372191,//Wings of Wisdom
1082447,//Zakum's Rock Fist
1102595,//Alchemist Cape
1003923,//Alchemist Hat
1003108,//Android Headgear
1072446,//Android Boots
1082275,//Android Gloves
1062125,//Android Legs
1042191,//Android Vest
1422131,//Big Pinnacle Maul
1050169,//Blizzard Armor
1051210,//Blizzard Armor
1072447,//Blizzard Boots
1102246,//Blizzard Cape
1082276,//Blizzard Gloves
1000040,//Blizzard Helmet
1012309,//Blood Mask
1052639,//Alchemist Work Clothes
1422145,//Chaos Potion
1452210,//Chaos Potion
1492184,//Chaos Potion
1232065,//Chaos Potion
1462198,//Chaos Potion
1362095,//Chaos Potion
1482173,//Chaos Potion
1332230,//Chaos Potion
1432172,//Chaos Potion
1222068,//Chaos Potion
1442228,//Chaos Potion
1472219,//Chaos Potion
1372182,//Chaos Potion
1212073,//Chaos Potion
1322208,//Chaos Potion
1382214,//Chaos Potion
1312158,//Chaos Potion
1302280,//Chaos Potion
1402203,//Chaos Potion
1412140,//Chaos Potion
1522099,//Chaos Potion
1492184,//Chaos Potion
1372035,//Elemental Wand 1
1372036,//Elemental Wand 2
1372037,//Elemental Wand 3
1372038,//Elemental Wand 4
1372039,//Elemental Wand 5
1372040,//Elemental Wand 6
1372041,//Elemental Wand 7
1372042,//Elemental Wand 8
1382045,//Elemental Staff 1
1382046,//Elemental Staff 2
1382047,//Elemental Staff 3
1382048,//Elemental Staff 4
1382049,//Elemental Staff 5
1382050,//Elemental Staff 6
1382051,//Elemental Staff 7
1382052,//Elemental Staff 8
1382060,//Crimson Arcanon
1072344,//Facestompers
1082246,//Flamekeeper Cordon 
1052589,//Frilly Black Bean Suit
1052588,//Frilly Pink Bean Suit
1522087,//Pinnacle Argents
1452198,//Pinnacle Ash Lord
1472207,//Pinnacle Black Event
1482161,//Pinnacle Bloody Claw
1412128,//Pinnacle Butterfly
1402187,//Pinnacle Claymore
1312145,//Pinnacle Counter
1532091,//Pinnacle Crash
1552065,//Pinnacle Fan
1302258,//Pinnacle Gladius
1232050,//Pinnacle Grim Seeker
1442211,//Pinnacle Halfmoon
1322191,//Pinnacle Heaven's Justice
1242049,//Pinnacle Hefty Head
1242049,//Pinnacle Hefty Head
1332216,//Pinnacle Kanzir
1542065,//Pinnacle Katana
1462186,//Pinnacle Lock
1432160,//Pinnacle Omni Pierce
1382202,//Pinnacle Pain Killer
1492172,//Pinnacle Queen's Finger
1492172,//Pinnacle Queen's Finger
1112794,//Pinnacle Ring
1212055,//Pinnacle Shining Rod
1222050,//Pinnacle Soul Shooter
1372170,//Pinnacle Twin Angels
1032183,//Shaman Earrings
1001060,//Snow Ice's Fur Hat
1082223,//Stormcaster Gloves
1012070,//Strawberry Popsicle
1052578,//Tangyoon's Chef Outfit
1102165,//Taru Spirit Cape
1462205,//Terminus Bolter
1312166,//Terminus Chopper
1322216,//Terminus Crusher
1422153,//Terminus Demolisher
1412148,//Terminus Devastator
1302290,//Terminus Divider
1402211,//Terminus Dominator
1372189,//Terminus Enchanter
1472227,//Terminus Executioner
1222075,//Terminus Firebreather
1542068,//Terminus Grand Master
1212080,//Terminus Illuminator
1432179,//Terminus Impaler
1242081,//Terminus Jaeger
1382223,//Terminus Mesmerizer
1362102,//Terminus Orchestrator
1332239,//Terminus Prowler
1492191,//Terminus Raider
1492191,//Terminus Raider
1522106,//Terminus Raptor
1532110,//Terminus Scorcher
1342086,//Terminus Silencer
1452217,//Terminus Stormchaser
1482180,//Terminus Striker
1552068,//Terminus Summoner
1232075,//Terminus Vanquisher
1442235,//Terminus Warmonger
1012332//Arkarium's Beard
    };
    //10%, 60%, 100% scrolls, pvp level 70 equips, blitz helm, power mane, arcana crown, elemental wands, mastery books, other rare equipments
    private static final int[] wheelRewardsC = {
1012110,//Angry Mask
1012132,//Chicky Face Decoration
1012109,//Crying Mask
1012423,//Evolution Ice Crystal
1012422,//Evolution Ice Crystal
1012421,//Evolution Ice Crystal
1012371,//Palm Print Mask
1012106,//Rat Mouth
1012108,//Smiling Mask
1012310,//Valentine's Day Sweet Chocolate
//Badges
//1182018,//Bounty Hunter Badge Jett.
1182066,//Evolution Badge
1182053,//Mini-Sun Badge
1182007,//Rainbow Badge
1182021,//Red Leaf High Bronze Badge
1182023,//Red Leaf High Gold Badge
1182022,//Red Leaf High Silver Badge
//Belts
1132016,//Witch's Deep Purple Belt
1132013,//The Immortal Pharaoh Belt
1132127,//Miwok Boy's Belt
1132209,//Pinnacle Belt
1132258,//Perfect Absolute Belt
//Earrings
1032003,//Amethyst Earrings
1032133,//Black Dragon Earrings
1032027,//Black Emerald Earrings
1032011,//Blue Moon
1032172,//Booster Earrings
1032098,//Carrot Earrings
1032008,//Cat's Eye
1032043,//Cecelia's Earrings
1032045,//Celestial Earrings
1032019,//Crystal Flower Earrings
1032048,//Crystal Leaf Earrings
1032049,//Dark Shards
1032218,//Demon's Earring
1032039,//Eclipse Earrings
1032007,//Emerald Earrings
1032203,//Evolution Piercing
1032032,//Fallen Leaf Earrings
1032020,//Gold Drop Earrings
1032004,//Gold Earrings
1032026,//Gold Emerald Earrings
1032171,//Grape Earrings
1032022,//Half Earrings
1032021,//Holy Cross Earrings
1032177,//Infinite Black Dragon Earrings
1032217,//Inverse Jewel Earring
1032025,//Leaf Earrings
1032006,//Lightning Earrings
1032016,//Metal Heart Earrings
1032015,//Metal Silver Earrings
1032044,//Moonstar Earrings
1032018,//Pansy Earrings
1032014,//Pink-Flowered Earrings
1032168,//Pinnacle Earring
1032195,//Rainbow Earring
1032005,//Red Cross Rings
1032028,//Red Emerald Earrings
1032013,//Red-Hearted Earrings
1032079,//Rex's Blue Earrings
1032077,//Rex's Green Earrings
1032078,//Rex's Red Earrings
1032017,//Rose Earrings
1032002,//Sapphire Earrings
1032070,//Shield Earrings
1032030,//Silver Earrings
1032001,//Single Earring
1032012,//Skull Earrings
1032050,//Snail's Eye
1032046,//Spider Venom Earrings
1032010,//Star Earrings
1032023,//Strawberry Earrings
1032134,//Tangy Earrings
1032000,//Weighted Earrings
1032136,//Will o' the Wisps
1032009,//Yellow Square
//Eyes Accessories
1022060,//White Raccoon Mask
1022172,//Valentine's Day Sweet Glasses
1022120,//Traveler's Wing Glasses
1022164,//Super Summer Goggles
1022082,//Spectrum Goggles
1022135,//So Gong's Panda Ornament
1022137,//Shades of Virtuosity
1022058,//Raccoon Mask
1022136,//Modest Panda Ornament
1022197,//Evolution Sunglasses
//Pendants
1122221,//Cassandra's Collection Pendant
1122264,//Cracked Engraved Gollux Pendant
1122261,//Demon's Necklace
1122150,//Dominator Pendant
1122254,//Mechanator Pendant
1122199,//Picnic Pendant
1122014,//Silver Deputy Star
//Shoulders
1152153,//Absolute Ring Shoulder
1152001,// Black Tiger Talon
1152009,//Dark Tiger Talon
1152052,//Moon Bunny Epaulette
//Hats
1002797,//Agent N's Disposable Receiver
1002800,//Agent N's Receiver
1052350,//Unstylish Training Outfit
1003924,//Alien in My Head
1003108,//Android Headgear
1002675,//Antellion Miter
1002216,//Aqua Golden Circlet
1002947,//Arcana Crown
1002287,//Beige Patriot
1003579,//Azure Loop
1003577,//Azalea Hair Pin
1002083,//Black Bandana
1002060,//Black Baseball Cap
1002115,//Black Feather Hat
1002550,//Black Garina Hood
1002125,//Black Ghetto Beanie
1002066,//Black Headband
1002159,//Black Hunter
1002037,//Black Jester
1002130,//Black Loosecap
1002214,//Black Maro
1002587,//Black Old Wisconsin
1002366,//Black Oriental Fury Hat
1002637,//Black Pirate's Bandana
1002646,//Black Polax Hat
1002270,//Black Polyfeather Hat
1002120,//Black Robin Hat
1002452,//Black Starry Bandana
1002455,//Black Starry Bandana
1002132,//Black Swimming Cap
1002110,//Black Thief Hood
1002948,//Blitz Helm
1002285,//Blood Nightfox
1002074,//Blue Apprentice Hat
1002403,//Blue Arlic Helmet
1002407,//Blue Arnah Cap
1002090,//Blue Bamboo Hat
1002081,//Blue Bandana
1002063,//Blue Baseball Cap
1002045,//Blue Bone Helm
1002177,//Blue Burglar
1002381,//Blue Canal Hood
1002625,//Blue Den Marine
1002167,//Blue Distinction
1002339,//Blue Dragon Barbute
1002551,//Blue Dragon Helmet
1002093,//Blue Duke
1002275,//Blue Falcon
1002113,//Blue Feather Hat
1002272,//Blue Galaxy
1002123,//Blue Ghetto Beanie
1002529,//Blue Grace Helmet
1002152,//Blue Guiltian
1002172,//Blue Guise
1002162,//Blue Hawkeye
1002069,//Blue Headband
1002157,//Blue Hunter
1002253,//Blue Infinium Circlet
1002034,//Blue Jester
1002128,//Blue Loosecap
1002211,//Blue Maro
1002142,//Blue Matty
1002042,//Blue Metal Gear
1002102,//Blue Moon Conehat
1002282,//Blue Nightfox
1002585,//Blue Old Wisconsin
1002364,//Blue Oriental Fury Hat
1002084,//Blue Oriental Helmet
1002286,//Blue Patriot
1002182,//Blue Pilfer
1002138,//Blue Pole-Feather Hat
1002118,//Blue Robin Hat
1002243,//Blue Seraphis
1002208,//Blue Sonata
1002425,//Blue Sporty Cap
1002640,//Blue Sun Boat Hat
1002133,//Blue Swimming Cap
1002108,//Blue Thief Hood
1002147,//Blue Tiberian
1002378,//Blue Valhalla Helmet
1002399,//Blue Varr Hat
1002072,//Blue Wizardry Hat
1002006,//Bone Helm
1002043,//Bronze Coif
1002086,//Bronze Crusader Helm
1002055,//Bronze Football Helmet
1002051,//Bronze Full Helm
1002039,//Bronze Helmet
1002247,//Bronze Identity
1002094,//Bronze Planet
1002064,//Bronze Pride
1002059,//Bronze Viking Helm
1002017,//Brown Apprentice Hat
1002026,//Brown Bamboo Hat
1002392,//Brown Bandana
1002062,//Brown Baseball Cap
1002179,//Brown Burgler
1002169,//Brown Distinction
1002616,//Brown Double Marine
1002116,//Brown Feather Hat
1002124,//Brown Ghetto Beanie
1002151,//Brown Guiltian
1002174,//Brown Guise
1002160,//Brown Hunter
1002038,//Brown Jester
1002613,//Brown Lagger Cap
1002631,//Brown Leather Ocean Hat
1002129,//Brown Loosecap
1002144,//Brown Matty
1002106,//Brown Moon Conehat
1002281,//Brown Nightfox
1002324,//Brown Osfa Hat
1002184,//Brown Pilfer
1002327,//Brown Pireta Hat
1002619,//Brown Pitz Bandana
1002135,//Brown Pole-Feather Hat
1002268,//Brown Polyfeather Hat
1002121,//Brown Robin Hat
1002610,//Brown Rocky Bandana
1002008,//Brown Skullcap
1002210,//Brown Sonata
1002149,//Brown Tiberian
1002010,//Brown Winter Hat
1002649,//Canopus Hat
1002405,//Dark Arlic Helmet
1002180,//Dark Burglar
1002383,//Dark Canal Hood
1002170,//Dark Distinction
1002091,//Dark Dome
1002340,//Dark Dragon Barbute
1002278,//Dark Falcon
1002274,//Dark Galaxy
1002218,//Dark Golden Circlet
1002532,//Dark Grace Helmet
1002154,//Dark Guiltian
1002175,//Dark Guise
1002165,//Dark Hawkeye
1002249,//Dark Identity
1002254,//Dark Infinium Circlet
1002145,//Dark Matty
1002105,//Dark Moon Conehat
1002289,//Dark Patriot
1002185,//Dark Pilfer
1002330,//Dark Pireta Hat
1002136,//Dark Pole-Feather Hat
1002246,//Dark Seraphis
1002150,//Dark Tiberian
1002379,//Dark Valhalla Helmet
1002401,//Dark Varr Hat
1002024,//Emerald Dome
1002215,//Flame Golden Circlet
1003781,//Frilly Black Bean Hat
1003780,//Frilly Pink Bean Hat
1002049,//Gold Burgernet Helm
1002773,//Gold Dragon Crown
1002098,//Gold Nordic Helm
1002088,//Gold Sharp Helm
1002013,//Golden Pride
1002048,//Great Blue Helmet
1002004,//Great Brown Helmet
1003321,//Great Brown Helmet
1002047,//Great Red Helmet
1002404,//Green Arlic Helmet
1002408,//Green Arnah Cap
1002089,//Green Bamboo Hat
1002391,//Green Bandana
1002178,//Green Burgler
1002380,//Green Canal Hood
1002168,//Green Distinction
1002277,//Green Falcon
1002114,//Green Feather Hat
1002271,//Green Galaxy
1002126,//Green Ghetto Beanie
1002528,//Green Grace Helmet
1002173,//Green Guise
1002164,//Brown Hawkeye
1002163,//Green Hawkeye
1002067,//Green Headband
1002158,//Green Hunter
1002036,//Green Jester
1002131,//Green Loosecap
1002213,//Green Maro
1002143,//Green Matty
1002104,//Green Moon Conehat
1002363,//Green Oriental Fury Hat
1002323,//Green Osfa Hat
1002288,//Green Patriot
1002183,//Green Pilfer
1002328,//Green Pireta Hat
1002137,//Green Pole-Feather Hat
1002119,//Green Robin Hat
1002244,//Green Seraphis
1002053,//Green Skullcap
1002209,//Green Sonata
1002109,//Green Thief Hood
1002148,//Green Tiberian
1002377,//Green Valhalla Helmet
1002398,//Green Varr Hat
1002057,//Green Winter Hat
1002016,//Green Wizardry Hat
1002394,//Grey Bandana
1002699,//Halloween Pumpkin Hat
1002857,//Hard Hat
1002578,//Herculean Helmet
1002676,//Infinity Circlet
1002005,//Iron Burgernet Helm
1002011,//Iron Viking Helm
1002023,//Jousting Helmet
1003219,//Jumbo Primary Ribbon
1003573,//Kanna's Hair Band
1000068,//Kanna's Onmyouji Hat
1002579,//LeFay Jester
1002580,//Lockewood Hat
1003570,//Lunar Hair Band
1000065,//Lunar Onmyouji Hat
1002859,//MV's Hat (DEX)
1002860,//MV's Hat (INT)
1002861,//MV's Hat (LUK)
1002858,//MV's Hat (STR)
1003922,//Maple Racer Helmet
1000056,//Mesoranger Blue Helmet
1000055,//Mesoranger Green Helmet
1001079,//Mesoranger Pink Helmet
1000054,//Mesoranger Red Helmet
1001081,//Mesoranger Shadow Helmet
1001080,//Mesoranger Yellow Helmet
1002002,//Metal Coif
1002001,//Metal Gear
1002856,//Miner's Hat
1003693,//Mini Pumpkin Pointy Hat
1002044,//Mithril Coif
1002085,//Mithril Crusader Helm
1002056,//Mithril Football Helmet
1002052,//Mithril Full Helm
1002040,//Mithril Helmet
1002099,//Mithril Nordic Helm
1002095,//Mithril Planet
1002087,//Mithril Sharp Helm
1002058,//Mithril Viking Helm
1003554,//Musashi Helm
1002788,//Necomimi
1002418,//Newspaper Hat
1002101,//Old Mithril Nordic Helm
1002022,//Old Steel Nordic Helm
1002033,//Old Wisconsin
1000067,//Onmyouji Performance Hat
1002217,//Orange Golden Circlet
1002050,//Orihalcon Burgernet Helm
1003572,//Performance Hair Band
1002577,//Pickpocket Pilfer
1003726,//Pilgrim Hat
1002393,//Pink Bandana
1003090,//Pink Bean Hairband
1002035,//Pink Jester
1002103,//Pink Moon Conehat
1003740,//Pinnacle Hat
1002949,//Power Mane
1002395,//Purple Bandana
1002634,//Purple Cast Linen
1002273,//Purple Galaxy
1002283,//Purple Nightfox
1002586,//Purple Old Wisconsin
1002325,//Purple Osfa Hat
1002075,//Red Apprentice Hat
1002402,//Red Arlic Helmet
1002406,//Red Arnah Cap
1002080,//Red Bandana
1002012,//Red Baseball Cap
1002046,//Red Bone Helm
1002643,//Red Brave Hamal
1002176,//Red Burgler
1002382,//Red Canal Hood
1002166,//Red Distinction
1002338,//Red Dragon Barbute
1002025,//Red Duke
1002276,//Red Falcon
1002112,//Red Feather Hat
1002122,//Red Ghetto Beanie
1002530,//Red Grace Helmet
1002153,//Red Guiltian
1002171,//Red Guise
1002161,//Red Hawkeye
1002014,//Red Headband
1002156,//Red Hunter
1002547,//Red Hunter
1002252,//Red Infinium Circlet
1002127,//Red Loosecap
1002212,//Red Maro
1002141,//Red Matty
1002628,//Red Misty
1002584,//Red Old Wisconsin
1002365,//Red Oriental Fury Hat
1002029,//Red Oriental Helmet
1002326,//Red Osfa Hat
1002181,//Red Pilfer
1002329,//Red Pireta Hat
1002139,//Red Pole-Feather Hat
1002267,//Red Polyfeather Hat
1002117,//Red Robin Hat
1002242,//Red Seraphis
1002054,//Red Skullcap
1002207,//Red Sonata
1002424,//Red Sporty Cap
1002020,//Red Starry Bandana
1002454,//Red Starry Bandana
1002134,//Red Swimming Cap
1002107,//Red Thief Hood
1002146,//Red Tiberian
1002400,//Red Varr Hat
1002073,//Red Wizardry Hat
1003571,//Reed Hair Band
1000066,//Reed Onmyouji Hat
1002441,//Ribboned Pig Headband
1002028,//Silver Crusader Helm
1002531,//Silver Grace Helmet
1002248,//Silver Identity
1002030,//Silver Planet
1002096,//Sky Blue Starry Bandana
1002009,//Steel Football Helmet
1002007,//Steel Full Helm
1002003,//Steel Helmet
1002021,//Steel Nordic Helm
1002065,//Steel Pride
1002027,//Steel Sharp Helm
1003028,//Straw Hat
1003027,//Talking Witch Hat
1003762,//Tangyoon's Chef Hat
1003557,//The Bladed Falcon's Helm
1002677,//Toymaker Cap
1003925,//Transforming Sword
1003555,//Warrior's Helm
1003916,//Werebeast
1002019,//White Bandana
1002492,//White Baseball Cap
1002155,//White Guiltian
1003075,//White Headband
1002656,//White Identity
1002737,//White Mouse Headband
1002284,//White Nightfox
1002622,//White Oceania Cap
1002269,//White Polyfeather Hat
1002245,//White Seraphis
1002453,//White Starry Bandana
1003947,//Wings of Harmony
1002082,//Yellow Bandana
1002061,//Yellow Baseball Cap
1002092,//Yellow Duke
1002068,//Yellow Headband
1002041,//Yellow Metal Gear
1002097,//Yellow Starry Bandana
1002111,//Yellow Thief Hood
1002757,//football steel helmet
1003674,//Zombie Hunter Hat
//Capes
1102004,//Black Adventurer Cape
1102024,//Black Gaia Cape
1102035,//Black Giles Cape
1102014,//Black Justice Cape
1102018,//Black Magic Cape
1102030,//Black Seraph Cape
1102206,//Blackfist Cloak
1102001,//Blue Adventurer Cape
1102495,//Blue Donkey Balloon
1102021,//Blue Gaia Cape
1102034,//Blue Giles Cape
1102011,//Blue Justice Cape
1102015,//Blue Magic Cape
1102046,//Blue Musketeer Cape
1102027,//Blue Seraph Cape
1102043,//Brown Adventurer Cape
1102109,//Cape of Warmness
1102348,//Christmas Snow Fur Lump
1102193,//Cloak of Corruption
1102205,//Crimsonheart Cloak
1102078,//Eclipse Cloak
1102191,//El Nathian Cape
1102370,//Fan Club Balloon (Cygnus)
1102372,//Fan Club Balloon (Lilin)
1102371,//Fan Club Balloon (Valerie)
1102000,//Green Adventurer Cape
1102087,//Green Gaia Cape
1102031,//Green Giles Cape
1102026,//Green Seraph Cape
1102302,//Navy Captain Cape
1102041,//Pink Adventurer Cape
1102084,//Pink Gaia Cape
1102506,//Pinnacle Cape
1102042,//Purple Adventurer Cape
1102086,//Purple Gaia Cape
1102032,//Purple Giles Cape
1102082,//Ragged Black Cape
1102002,//Red Adventurer Cape
1102494,//Red Elephant Balloon
1102022,//Red Gaia Cape
1102033,//Red Giles Cape
1102012,//Red Justice Cape
1102016,//Red Magic Cape
1102028,//Red Seraph Cape
1102145,//Sirius Cloak
1102176,//Stirgeman Cape
1102182,//Stirgeman's Cloak of Darkness
1102183,//Stirgeman's Cloak of Justice
1102181,//Stirgeman's Cloak of Wiliness
1102337,//Super Pink Adventurer Cape
1102047,//Turquoise Musketeer Cape
1102601,//Two-handed Sword
1102003,//White Adventurer Cape
1102379,//White Day Heart Balloon
1102023,//White Gaia Cape
1102013,//White Justice Cape
1102017,//White Magic Cape
1102029,//White Seraph Cape
1102192,//Wrath of El Nath
1102040,//Yellow Adventurer Cape
1102085,//Yellow Gaia Cape
1102497,//Zombie Hunter Cape
//Tops
1041097,//Aqua Platina
1041053,//Black Amoria Top
1041015,//Black Armine
1040023,//Black Bennis Chainmail
1040033,//Black Cloth Vest
1041038,//Black Cloth Vest
1041055,//Black Huntress Armor
1041086,//Black Jangoon Armor
1040063,//Black Knucklevest
1040122,//Black Neos
1040044,//Black Pao
1040050,//Black Sneak
1041029,//Black Split
1040018,//Black Split Piece
1041048,//Black Steal
1040151,//Black Trainer Jacket
1041058,//Blood Sneak
1041095,//Bloody Mantis
1041099,//Bloody Platina
1041052,//Blue Amoria Top
1040024,//Blue Bennis Chainmail
1041034,//Blue Bennis Chainmail
1040095,//Blue China
1040031,//Blue Cloth Vest
1041037,//Blue Cloth Vest
1040112,//Blue Commodore
1040029,//Blue Dragon
1041043,//Blue Fairy Top
1040070,//Blue Hunter's Armor
1041093,//Blue Ice Queen
1040086,//Blue Jangoon Armor
1041066,//Blue Legolia
1040073,//Blue Legolier
1040038,//Blue Lolico Armor
1041078,//Blue Moon
1041101,//Blue Mystique
1040121,//Blue Neos
1040035,//Blue Nightshift
1040092,//Blue Orientican
1040042,//Blue Pao
1040012,//Blue Sergeant
1041022,//Blue Shark
1040087,//Blue Shouldermail
1040028,//Blue Sky
1040049,//Blue Sneak
1040020,//Blue Split Piece
1041049,//Blue Steal
1040106,//Blue Studded Top
1040004,//Blue Training Shirt
1041064,//Blueberry Lolica Armor
1040102,//Bronze Platine
1040008,//Brown Archer Top
1040096,//Brown China
1040037,//Brown Corporal
1040003,//Brown Hard Leather Top
1041085,//Brown Jangoon Armor
1041021,//Brown Lamelle
1041069,//Brown Legolia
1040076,//Brown Legolier
1040015,//Brown Lolico Armor
1041079,//Brown Moon
1041045,//Brown Nightshift
1040116,//Brown Osfa Suit
1041116,//Brown Osfa Suit
1040079,//Brown Piette
1041082,//Brown Piettra
1040048,//Brown Sneak
1040105,//Brown Studded Top
1040057,//Dark Brown Stealer
1040113,//Dark Commodore
1040068,//Dark Hunter's Armor
1041068,//Dark Legolia
1040075,//Dark Legolier
1041124,//Dark Lucida
1040041,//Dark Master Sergeant
1040034,//Dark Nightshift
1040093,//Dark Orientican
1040080,//Dark Piette
1041083,//Dark Piettra
1041107,//Dark Pirate Blouse
1040110,//Dark Pirate Top
1040100,//Dark Scorpio
1040084,//Dark Shadow
1041076,//Dark Shadow
1041089,//Dark Shouldermail
1040058,//Dark Silver Stealer
1041057,//Dark Sneak
1040107,//Dark Studded Top
1041121,//Dark Valkyrie
1042257,//Eagle Eye Assassin Shirt
1040030,//Gold Dragon
1041060,//Gold Sneak
1041008,//Green Able Armor
1040071,//Green Archer Top
1041018,//Green Arianne
1041016,//Green Armine
1041007,//Green Avelin
1040022,//Green Bennis Chainmail
1041032,//Green Bennis Chainmail
1040097,//Green China
1040111,//Green Commodore
1041042,//Green Fairy Top
1040067,//Green Hunter's Armor
1041054,//Green Huntress Armor
1040026,//Green Hwarang Shirt
1041091,//Green Ice Queen
1040061,//Green Knucklevest
1041020,//Green Lamelle
1040007,//Green Leather Hoodwear
1041067,//Green Legolia
1041122,//Green Lucida
1040090,//Green Orientican
1040115,//Green Osfa Suit
1041115,//Green Osfa Suit
1041105,//Green Pirate Blouse
1040108,//Green Pirate Top
1041013,//Green Shivermail
1041119,//Green Valkyrie
1040017,//Grey / Brown Training Shirt
1041063,//Grey Able Armor
1040010,//Grey T-Shirt
1042243,//Horntail's Ab T-Shirt
1041088,//Ivory Shouldermail
1040082,//Khaki Shadow
1041094,//Light Mantis
1040098,//Light Scorpio
1040083,//Marine Shadow
1040085,//Maroon Jangoon Armor
1041077,//Maroon Moon
1040103,//Mithril Platine
1040099,//Ocher Scorpio
1040088,//Ocher Shouldermail
1041014,//Orange Lolica Armor
1040019,//Orange Split Piece
1040014,//Orange Sporty T-Shirt
1040016,//Orihalcon Master Sergeant
1040104,//Orihalcon Platine
1041025,//Pink Arianne
1041153,//Pink Frill Pajama Top
1041152,//Pink Mimi Blouse
1041102,//Pink Mystique
1041039,//Pink Qi Pao
1041004,//Pink Starry Shirt
1041017,//Purple Arianne
1041041,//Purple Fairy Top
1041123,//Purple Lucida
1041100,//Purple Mystique
1040117,//Purple Osfa Suit
1041117,//Purple Osfa Suit
1041074,//Purple Shadow
1041028,//Purple Shivermail
1041031,//Purple Split
1041050,//Purple Steal
1041120,//Purple Valkyrie
1041051,//Red Amoria Top
1040025,//Red Bennis Chainmail
1041033,//Red Bennis Chainmail
1040094,//Red China
1040032,//Red Cloth Vest
1041036,//Red Cloth Vest
1040059,//Red Gold Stealer
1040069,//Red Hunter's Armor
1041056,//Red Huntress Armor
1040021,//Red Hwarang Shirt
1041092,//Red Ice Queen
1041084,//Red Jangoon Armor
1040062,//Red Knucklevest
1041019,//Red Lamelle
1041065,//Red Legolia
1040072,//Red Legolier
1041080,//Red Moon
1041103,//Red Mystique
1041044,//Red Nightshift
1040091,//Red Orientican
1040118,//Red Osfa Suit
1041118,//Red Osfa Suit
1040043,//Red Pao
1041106,//Red Pirate Blouse
1040109,//Red Pirate Top
1041003,//Red Qi Pao
1040039,//Red Sergeant
1041075,//Red Shadow
1041024,//Red Shark
1041027,//Red Shivermail
1041087,//Red Shouldermail
1041030,//Red Split
1041047,//Red Steal
1040060,//Silver Black Stealer
1040011,//Silver Leather Hoodwear
1040040,//Silver Master Sergeant
1041023,//Sky Shark
1041059,//Sky Sneak
1040009,//Steel Corporal
1041096,//Umber Mantis
1040089,//Umber Shouldermail
1041098,//Violet Platina
1040081,//White Piette
1041081,//White Piettra
1041062,//Yellow Able Armor
1041026,//Yellow Arianne
1041061,//Yellow Avelin
1041035,//Yellow Bennis Chainmail
1040000,//Yellow Jangoon Armor
//Gloves
1082024,//Adamantium Knuckle
1082071,//Aqua Brace
1082012,//Basic Archer Gloves
1082204,//Black Bisk 
1082031,//Black Duo
1082167,//Black Garina Gloves
1082053,//Black Lutia
1082050,//Black Marker
1082201,//Black Schult
1082213,//Black Skellduke
1082116,//Blood Emperor
1082120,//Blood Larceny
1082027,//Blood Mesana
1082135,//Blue Anelin
1082159,//Blue Arcina
1082063,//Blue Arten
1082152,//Blue Ciara
1082122,//Blue Clarity
1082110,//Blue Cordon
1082013,//Blue Diros
1082168,//Blue Dragon Gauntlet
1082030,//Blue Duo
1082164,//Blue Elemental Gloves
1082106,//Blue Eyes
1082207,//Blue Halfgloves
1082140,//Blue Korben
1082099,//Blue Lorin
1082052,//Blue Lutia
1082176,//Blue Marker
1082065,//Blue Moon Gloves
1082020,//Blue Morrican
1082055,//Blue Noel
1082082,//Blue Pennance
1082131,//Blue Sage
1082016,//Blue Savata
1082084,//Blue Willow
1082147,//Blue Work Gloves
1082453,//Body and Soul Bracelet
1082059,//Bronze Clench
1082103,//Bronze Husk
1082032,//Bronze Mischief
1082007,//Bronze Missel
1082092,//Bronze Pow
1082095,//Bronze Rover
1082068,//Bronze Scaler
1082037,//Bronze Wolfskin
1082195,//Brown Barbee
1082029,//Brown Duo
1082192,//Brown Jeweled
1082183,//Brown Leather Armor Gloves
1082098,//Brown Lorin
1082048,//Brown Marker
1082066,//Brown Moon Gloves
1082198,//Brown Royce
1082149,//Brown Work Gloves
1082216,//Canopus Gloves
1082138,//Dark Anelin
1082064,//Dark Arten
1082073,//Dark Brace
1082036,//Dark Briggon
1082123,//Dark Clarity
1082074,//Dark Cleave
1082061,//Dark Clench
1082112,//Dark Cordon
1082117,//Dark Emperor
1082108,//Dark Eyes
1082127,//Dark Focus
1082091,//Dark Garner
1082105,//Dark Husk
1082130,//Dark Imperial
1082025,//Dark Knuckle
1082141,//Dark Korben
1082100,//Dark Lorin
1082088,//Dark Manute
1082028,//Dark Mesana
1082034,//Dark Mischief
1082144,//Dark Mystra
1082056,//Dark Noel
1082080,//Dark Penance
1082134,//Dark Sage
1082018,//Dark Savata
1082083,//Dark Willow
1082039,//Dark Wolfskin
1082218,//Dragon Gauntlet
1082115,//Emerald Emperor
1082284,//Evan Gloves
1082515,//Fairy Work Gloves
1082436,//Fearless Warrior's Gloves
1082230,//Glitter Gloves
1082045,//Gold Arbion
1082072,//Gold Brace
1082011,//Gold Brist
1082076,//Gold Cleave
1082107,//Gold Eyes
1082087,//Gold Manute
1082094,//Gold Pow
1082097,//Gold Rover
1082070,//Gold Scaler
1082044,//Gold Sylvia
1082136,//Green Anelin
1082160,//Green Arcina
1082151,//Green Ciara
1082121,//Green Clarity
1082111,//Green Cordon
1082015,//Green Diros
1082126,//Green Focus
1082128,//Green Imperial
1082139,//Green Korben
1082180,//Green Lagger Halfglove
1082118,//Green Larceny
1082049,//Green Marker
1082021,//Green Morrican
1082142,//Green Mystra
1082132,//Green Sage
1082150,//Grey Work Gloves
1082186,//Hard Leather Gloves
1082023,//Iron Knuckle
1082003,//Juno
1082019,//Lemona
1082174,//Lunar Gloves
1082536,//Maple Racer Gloves
1082477,//Mesoranger Gloves
1082010,//Mithril Brist
1082104,//Mithril Husk
1082033,//Mithril Mischief
1082069,//Mithril Scaler
1082038,//Mithril Wolfskin
1082026,//Ocean Mesana
1082089,//Ocher Garner
1082047,//Orihalcon Arbion
1082006,//Orihalcon Missel
1082178,//Pink Marker
1082498,//Pinnacle Gloves
1082154,//Purple Ciara
1082129,//Purple Imperial
1082119,//Purple Larceny
1082177,//Purple Marker
1082022,//Purple Morrican
1082143,//Purple Mystra
1082148,//Purple Work Gloves
1082137,//Red Anelin
1082158,//Red Arcina
1082062,//Red Arten
1082153,//Red Ciara
1082075,//Red Cleave
1082109,//Red Cordon
1082014,//Red Diros
1082125,//Red Focus
1082163,//Red Hunter Gloves
1082051,//Red Lutia
1082175,//Red Marker
1082210,//Red Martier
1082067,//Red Moon Gloves
1082054,//Red Noel
1082081,//Red Pennance
1082133,//Red Sage
1082017,//Red Savata
1082085,//Red Willow
1082146,//Red Work Gloves
1082060,//Sapphire Clench
1082114,//Sapphire Emperor
1082090,//Sephia Garner
1082096,//Silver Rover
1082043,//Silver Sylvia
1082093,//Steal Pow
1082046,//Steel Arbion
1082008,//Steel Briggon
1082009,//Steel Brist
1082000,//Steel Fingerless Gloves
1082086,//Steel Manute
1082005,//Steel Missel
1082042,//Steel Sylvia
1082283,//Strong Machine Gloves
1082004,//Venon
1082001,//White Fingerless Gloves
1082002,//Work Gloves
1082035,//Yellow Briggon
1082179,//Yellow Marker
1082189,//Yellow Tartis
1082145,//Yellow Work Gloves
//Pants
1061096,//Aqua Platina Pants
1062004,//Archer Pants
1062006,//Bennis Chainpants
1061049,//Black Amoria Skirt
1061010,//Black Armine Skirt
1060023,//Black Cloth Pants
1061031,//Black Cloth Pants
1061051,//Black Huntress Pants
1060000,//Black Jangoon Pants
1061085,//Black Jangoon Skirt
1060052,//Black Knucklevest Pants
1060016,//Black Martial Arts Pants
1060111,//Black Neos Pants
1060033,//Black Pao Bottom
1060039,//Black Sneak Pants
1060014,//Black Split Pants
1061027,//Black Split Skirt
1061044,//Black Steal Pants
1061054,//Blood Sneak Pants
1061120,//Blood Valkyrie Skirt
1061094,//Bloody Mantis Pants
1061098,//Bloody Platina Pants
1061048,//Blue Amoria Skirt
1060084,//Blue China Pants
1060021,//Blue Cloth Pants
1061030,//Blue Cloth Pants
1060101,//Blue Commodore Pants
1061036,//Blue Fairy Skirt
1060059,//Blue Hunter's Pants
1061092,//Blue Ice Queen Skirt
1061061,//Blue Legolia Pants
1060050,//Blue Knucklevest Pants
1060062,//Blue Legolier Pants
1060028,//Blue Lolico Pants
1061077,//Blue Moon Pants
1061100,//Blue Mystique Pants
1060110,//Blue Neos Pants
1060025,//Blue Nightshift Pants
1060081,//Blue Orientican Pants
1060031,//Blue Pao Bottom
1060070,//Blue Piette Pants
1061033,//Blue Qi Pao Pants
1061042,//Blue Qi Pao Skirt
1060155,//Blue Sergeant Kilt
1061015,//Blue Shark Skirt
1060076,//Blue Shouldermail Pants
1061045,//Blue Steal Pants
1060094,//Blue Studded Pants
1060012,//Blue Training Pants
1060090,//Bronze Platine Pants
1061058,//Brown Able Skirt
1060085,//Brown China Pants
1060027,//Brown Corporal Pants
1062002,//Brown Hard Leather Pants
1060075,//Brown Jangoon Pants
1061084,//Brown Jangoon Skirt
1061064,//Brown Legolia Pants
1060065,//Brown Legolier Pants
1060008,//Brown Lolico Pants
1060019,//Brown Martial Arts Pants
1061078,//Brown Moon Pants
1061038,//Brown Nightshift Pants
1060105,//Brown Osfa Pants
1061115,//Brown Osfa Pants
1060069,//Brown Piette Pants
1061081,//Brown Piettra Skirt
1061018,//Brown Ramel Skirt
1060038,//Brown Sneak Pants
1060093,//Brown Studded Pants
1060037,//Dark Brown Sneak Pants
1060043,//Dark Brown Stealer Pants
1060102,//Dark Commodore Pants
1060057,//Dark Hunter's Pants
1061063,//Dark Legolia Pants
1060064,//Dark Legolier Pants
1061123,//Dark Lucida Skirt
1060030,//Dark Master Sergeant Kilt
1060024,//Dark Nightshift Pants
1060082,//Dark Orientican Pants
1060068,//Dark Piette Pants
1061082,//Dark Piettra Skirt
1060099,//Dark Pirate Pants
1061106,//Dark Pirate Skirt
1060089,//Dark Scorpio Pants
1060073,//Dark Shadow Pants
1061071,//Dark Shadow Pants
1061088,//Dark Shouldermail Pants
1060044,//Dark Silver Stealer Pants
1061053,//Dark Sneak Pants
1060095,//Dark Studded Pants
1061056,//Gold Sneak Pants
1061006,//Green Able Armor Skirt
1061013,//Green Arianne Skirt
1061011,//Green Armine Skirt
1061009,//Green Avelin Skirt
1060086,//Green China Pants
1060100,//Green Commodore Pants
1061035,//Green Fairy Skirt
1060056,//Green Hunter's Pants
1061050,//Green Huntress Pants
1061090,//Green Ice Queen Skirt
1061062,//Green Legolia Pants
1060063,//Green Legolier Pants
1061121,//Green Lucida Skirt
1040120,//Green Neos
1061105,//Red Pirate Skirt
1060109,//Green Neos Pants
1060079,//Green Orientican Pants
1060104,//Green Osfa Pants
1061114,//Green Osfa Pants
1060097,//Green Pirate Pants
1061017,//Green Ramel Skirt
1061024,//Green Shivermail Skirt
1061118,//Green Valkyrie Skirt
1060013,//Grey / Brown Training Pants
1061059,//Grey Able Skirt
1060004,//Grey Thick Sweat Pants
1062000,//Ice Jeans
1061087,//Ivory Shouldermail Pants
1060007,//Jean Capris
1060071,//Khaki Shadow Pants
1061093,//Light Mantis Pants
1060087,//Light Scorpio Pants
1060072,//Marine Shadow Pants
1061076,//Maroon Moon Pants
1060091,//Mithril Platine Pants
1060088,//Ocher Scorpio Pants
1060077,//Ocher Shouldermail Pants
1060011,//Orihalcon Master Sergeant Kilt
1060092,//Orihalcon Platine Pants
1061021,//Pink Arianne Skirt
1061101,//Pink Mystique Pants
1061012,//Purple Arianne Skirt
1061034,//Purple Fairy Skirt
1061122,//Purple Lucida Skirt
1061099,//Purple Mystique Pants
1060106,//Purple Osfa Pants
1061116,//Purple Osfa Pants
1061032,//Purple Qi Pao Pants
1061041,//Purple Qi Pao Skirt
1061069,//Purple Shadow Pants
1061026,//Purple Shivermail Skirt
1061046,//Purple Steal Pants
1061119,//Purple Valkyrie Skirt
1060045,//Red / Gold Stealer Pants
1061047,//Red Amoria Skirt
1060083,//Red China Pants
1060022,//Red Cloth Pants
1061029,//Red Cloth Pants
1060058,//Red Hunter's Pants
1061052,//Red Huntress Pants
1061091,//Red Ice Queen Skirt
1061083,//Red Jangoon Skirt
1060051,//Red Knucklevest Pants
1061060,//Red Legolia Pants
1060061,//Red Legolier Pants
1060018,//Red Martial Arts Pants
1061079,//Red Moon Pants
1061102,//Red Mystique Pants
1061037,//Red Nightshift Pants
1060080,//Red Orientican Pants
1060107,//Red Osfa Pants
1061117,//Red Osfa Pants
1060032,//Red Pao Bottom
1060098,//Red Pirate Pants
1061003,//Red Qi Pao Pants
1061040,//Red Qi Pao Skirt
1061016,//Red Ramel Skirt
1060029,//Red Sergeant Kilt
1061070,//Red Shadow Pants
1061020,//Red Shark Skirt
1061025,//Red Shivermail Skirt
1061086,//Red Shouldermail Pants
1061043,//Red Steal Pants
1061014,//Rookie Pants
1062001,//Sandblasted Jeans
1060046,//Silver / Black Stealer Pants
1060060,//Silver Master Sergeant Kilt
1061019,//Sky Shark Skirt
1061055,//Sky Sneak Pants
1061023,//Sophia Pants
1060009,//Steel Corporal Pants
1060010,//Steel Sergeant Kilt
1060132,//Stirgeman Power Pants
1061104,//Green Pirate Skirt
1061154,//Stirgeman Power Skirt
1060133,//Stirgeman Green Pirate Skirt Pants Mk II
1061155,//Stirgeman Power Skirt Mk II
1060131,//Stirgeman Utility Pants Mk V
1061153,//Stirgeman Utility Skirt Mk V
1061095,//Umber Mantis Pants
1060078,//Umber Shouldermail Pants
1061097,//Violet Platina Pants
1060074,//White Jangoon Pants
1060017,//White Martial Arts Pants
1060020,//White Martial Arts Shorts
1061080,//White Piettra Skirt
1060015,//White Split Pants
1061028,//White Split Skirt
1061022,//Yellow Arianne Skirt
1061057,//Yellow Avelin Skirt
//Shoes
1072067,//Bear Huntertop
1072165,//Beige Elf Shoes
1072023,//Beige Nitty
1072777,//Beryl Boots
1072306,//Black Basile Boots
1072110,//Black Blue-Lines Shoes
1072318,//Black Duke Barkin Shoes
1072022,//Black Enamel Boots
1072272,//Black Garina Shoes
1072042,//Black Gomushin
1072108,//Black Green-Lined Shoes
1072082,//Black Hunter Boots
1072087,//Black Lappy Boots
1072078,//Black Magicshoes
1072315,//Black Markintz
1072024,//Black Nitty
1072107,//Black Red-Lined Shoes
1072091,//Black Salt Shoes
1072262,//Black Strap Shoes
1072309,//Black Voyson Shoes
1072074,//Black Windshoes
1072109,//Black Yellow-Lined Shoes
1072041,//Blood Battle Greaves
1072149,//Blood Camel Boots
1072150,//Blood Moss Boots
1072017,//Blue Ankle-Strap Sandals
1072228,//Blue Arnah Shoes
1072045,//Blue Basic Boots
1072154,//Blue Carzen Boots
1072221,//Blue Crescent Boots
1072273,//Blue Dragon Boots
1072268,//Blue Elemental Shoes
1072164,//Blue Elf Shoes
1072066,//Blue Enamel Boots
1072070,//Blue Gidder Shoes
1072139,//Blue Goldrunners
1072141,//Blue Goldwind Shoes
1072128,//Blue Goni Shoes
1072145,//Blue Gore Boots
1072047,//Blue High Boots
1072080,//Blue Hunter Boots
1072127,//Blue Jangoon Shoes
1072019,//Blue Jewelry Boots
1072214,//Blue Katina Boots 
1072157,//Blue Lapiz Sandals
1072084,//Blue Lappy Boots
1072076,//Blue Magicshoes
1072115,//Blue Moon Shoes
1072162,//Blue Mystique Shoes
1072206,//Blue Neli Shoes
1072030,//Blue Ninja Sandals
1072312,//Blue Pageant
1072121,//Blue Pierre Shoes
1072211,//Blue Rivers Boots
1072101,//Blue Silky Boots
1072018,//Blue Sneakers
1072124,//Blue Steel-Tip Boots
1072224,//Blue Varr Shoes
1072106,//Blue White-Lined Boots
1072182,//Blue Wing Boots
1072061,//Blue Woodsman Boots
1072008,//Bronze Aroa Shoes
1072032,//Bronze Chain Boots
1072050,//Bronze Greaves
1072063,//Brown Ankle-Strap Sandals
1072048,//Brown Aroa Boots
1072006,//Brown Basic Boots
1072303,//Brown Double Boots
1072071,//Brown Gidder Shoes
1072015,//Brown Hard Leather Boots
1072007,//Brown High Boots
1072083,//Brown Hunter Boots
1072027,//Brown Jack Boots
1072000,//Brown Jangoon Shoes
1072285,//Brown Lagger Slipper
1072159,//Brown Lapiz Sandals
1072300,//Brown Leather Krag
1072297,//Brown Locote Shoes
1072193,//Brown Osfa Boots
1072294,//Brown Paulie Boots
1072120,//Brown Pierre Shoes
1072288,//Brown Skeedy Sandals
1072122,//Brown Steel-Tip Boots
1072291,//Brown Wooden Krag
1072060,//Brown Woodsman Boots
1072321,//Canopus Boots
1072205,//Dark Ades Shoes
1072156,//Dark Carzen Boots
1072222,//Dark Crescent Boots
1072167,//Dark Elf Shoes
1072179,//Dark Enigma Shoes
1072216,//Dark Katina Boots
1072117,//Dark Moon Shoes
1072152,//Dark Moss Boots
1072209,//Dark Neli Shoes
1072174,//Dark Pirate Boots
1072212,//Dark Rivers Boots
1072113,//Dark Trigger
1072226,//Dark Varr Shoes
1072052,//Dark War Boots
1072198,//Dark War Greave
1072185,//Dark Wing Boots
1072025,//Deer Huntertop
1072003,//Emerald Battle Greaves
1072132,//Emerald Hildon Boots
1072196,//Emerald War Greave
1072797,//Fairy Blue Sneakers
1072798,//Fairy Red Sneakers
1072036,//Gold Chain Boots
1072135,//Gold Hildon Boots
1072815,//Gold Label Knight Shoes
1072160,//Gold Lapiz Sandals
1072116,//Gold Moon Shoes
1072151,//Gold Moss Boots
1072053,//Gold War Boots
1072204,//Green Ades Shoes
1072229,//Green Arnah Shoes
1072049,//Green Aroa Boots
1072428,//Green Christmas Sock
1072220,//Green Crescent Boots
1072166,//Green Elf Shoes
1072177,//Green Enigma Shoes
1072143,//Green Goldenwind Shoes
1072137,//Green Goldrunners
1072129,//Green Goni Shoes
1072146,//Green Gore Boots
1072059,//Green Hard Leather Boots
1072081,//Green Hunter Boots
1072034,//Green Jack Boots
1072213,//Green Katina Boots
1072086,//Green Lappy Boots
1072207,//Green Neli Shoes
1072192,//Green Osfa Boots
1072172,//Green Pirate Boots
1072102,//Green Silky Boots
1072123,//Green Steel-Tip Boots
1072263,//Green Strap Shoes
1072223,//Green Varr Shoes
1072105,//Green White-Lined Boots
1072184,//Green Wing Boots
1072016,//Green Woodsman Boots
1072033,//Iron Chain Boots
1072068,//LIon Huntertop
1072679,//Lion King's Foot
1072844,//Maple Racer Shoes
1072718,//Mesoranger Boots
1072039,//Mithril Battle Greaves
1072133,//Mithril Hildon Boots
1072112,//Mithril Trigger
1072011,//Mithril War Boots
1072138,//Orange Goldrunners
1072046,//Orange High Boots
1072148,//Orihalcon Camel Boots
1072134,//Orihalcon Hildon Boots
1072197,//Orihalcon War Greave
1072136,//Pink Goldrunners
1072140,//Pink Goldwind Shoes
1072768,//Pinnacle Shoes
1072155,//Purple Carzen Boots
1072178,//Purple Enigma Shoes
1072142,//Purple Goldwind Shoes
1072131,//Purple Goni Shoes
1072020,//Purple Jewelry Boots
1072161,//Purple Mystique Shoes
1072194,//Purple Osfa Boots
1072089,//Purple Salt Shoes
1072125,//Purple Steel-Tip Boots
1072026,//Rabbit Huntertop
1072203,//Red Ades Shoes
1072062,//Red Ankle-Strap Sandals
1072227,//Red Arnah Shoes
1072427,//Red Christmas Sock
1072065,//Red Enamel Boots
1072130,//Red Goni Shoes
1072144,//Red Gore Boots
1072079,//Red Hunter Boots
1072269,//Red Hunter Shoes
1072069,//Red Jack Boots
1072021,//Red Jewelry Boots
1072215,//Red Katina Boots
1072158,//Red Lapiz Sandals
1072085,//Red Lappy Boots
1072075,//Red Magicshoes
1072114,//Red Moon Shoes
1072163,//Red Mystique Shoes
1072208,//Red Neli Shoes
1072031,//Red Ninja Sandals
1072195,//Red Osfa Boots
1072118,//Red Pierre Shoes
1072173,//Red Pirate Boots
1072210,//Red Rivers Boots
1072090,//Red Salt Shoes
1072103,//Red Silky Boots
1072225,//Red Varr Shoes
1072104,//Red White-Lined Boots
1072183,//Red Wing Boots
1072837,//Saint Wing Knight Shoes
1072147,//Sapphire Camel Boots
1072040,//Silver Battle Greaves
1072035,//Silver Chain Boots
1072264,//Silver Strap Shoes
1072051,//Silver War Boots
1072072,//Silver Windshoes
1072043,//Smelly Gomushin
1072009,//Steel Greaves
1072002,//Steel Trigger
1072619,//The Immortal Pharaoh Shoes
1072238,//Violet Snowshoes
1072004,//White Gomushin
1072077,//White Magicshoes
1072028,//White Ninja Sandals
1072504,//Wind Walker Heavy Boots
1072833,//Yellow Adventure Shoes
1072044,//Yellow Basic Boots
1072029,//Yellow Ninja Sandals
1072119,//Yellow Pierre Shoes
1072239,//Yellow Snowshoes
1072261,//Yellow Strap Shoes
1072073,//Yellow Windshoes
//Mechanic
1642000,//Bronze Body Frame
1612001,//Bronze Engine
1622001,//Bronze Machine Arm
1632000,//Bronze Machine Leg
1652001,//Bronze Transistor
1612000,//Copper Engine
1622000,//Copper Machine Arm
1652000,//Copper Transistor
1642002,//Gold Body Frame
1612003,//Gold Engine
1622003,//Gold Machine Arm
1632002,//Gold Machine Leg
1652003,//Gold Transistor
1642001,//Iron Body Frame
1612002,//Iron Engine
1622002,//Iron Machine Arm
1632001,//Iron Machine Leg
1652002,//Iron Transistor
1642003,//Pure Gold Body Frame
1612004,//Pure Gold Engine
1622004,//Pure Gold Machine Arm
1632003,//Pure Gold Machine Leg
1652004,//Pure Gold Transistor
//Dragon
1942001,//Gold Mask
1952001,//Gold Pendant
1972001,//Gold Tail
1962001,//Gold Wings
1942003,//Ruby Mask
1952003,//Ruby Pendant
1972003,//Ruby Tail
1962003,//Ruby Wings
1942000,//Silver Mask
1952000,//Silver Pendant
1972000,//Silver Tail
1962000,//Silver Wings
//Luminous
1212002,//Golden Shine
1212003,//Decor
1212004,//Vallentier
1212005,//Sharp Slaver
1212006,//Light Sage Wing
1212007,//Shining Twin Star
1212008,//Gleaming Gold Wing
1212009,//Crescent Shining Rod
1212010,//Shining Dragon Rod
//Soul Shooter
1222002,//Pink Haze
1222003,//Purple Hatchling
1222004,//Jade Hatchling
1222005,//Pink Wormhead
1222006,//Red Wormhead
1222007,//Jade Wormhead
1222008,//Green Dragon Soul
1222010,//Iron Dragon
//Desperado
1232002,//Dim Memory
1232003,//Eternal Wanderer
1232004,//Plum Sadness
1232005,//Cardinal Omen
1232006,//Brand Edge
1232007,//Nightmare
1232008,//Cruel Vengeance
1232010,//Dragon Rage
//Whip Blade
1242002,//Ridge Cutter
1242003,//Rough Violet
1242004,//Macro Knife
1242005,//Scorpio Tail
1242006,//Diode
1242007,//Green Fairy
1242008,//Crimson Skull
1242010,//Dragon Energy Skull
//Beast Tamer Scepter
1252001,//Beast Tamer Scepter
1252002,//Assign Scepter
1252003,//Talon Scepter
1252004,//Panther Scepter
1252005,//Grizzly Scepter
1252006,//Tigress Scepter
1252007,//Eagle Scepter
1252008,//Falcon Scepter
1252010,//Dragon Kitty Soul Scepter
// 1-h Sword
1302002,//Viking Sword
1302003,//Eloon
1302004,//Cutlass
1302005,//Sabre
1302006,//Machete
1302007,//Long Sword
1302008,//Gladius
1302009,//Traus
1302010,//Jeweled Katar
1302011,//Neocora
1302012,//Red Katana
1302013,//Red Whip
1302015,//Hero's Gladius
1302016,//Yellow Umbrella
1302018,//Khan
1302019,//Nameless Sword
1302021,//Pico-Pico Hammer
1302022,//Bamboo Sword
1302023,//Fraute
1302024,//Newspaper Sword
1302025,//Red Umbrella
1302026,//Black Umbrella
1302027,//Green Umbrella
1302028,//Light Purple Umbrella
1302029,//Beige Umbrella
1302031,//Diao Chan Sword
1302037,//Trumpet
1302049,//Glowing Whip
1302056,//Sparta
1302059,//Dragon Carabella
1302063,//Flaming Katana
1302068,//Onyx Blade
1302094,//Angry Stirge
1302095,//Lifeguard Saver
1302106,//Crystal Blade
1302107,//Black Crystal Blade
1302131,//Broomstick
1302132,//Pig Herding Stick
1302162,//Enraged Stirge Whip
1302217,//Sticky Bunny Cake
1302218,//Fatty Mini Bean
1302219,//Mysterious Book
1302220,//Fiery Fox
1302221,//Reinforced Golden Chick
1302222,//Bunny Ears
1302223,//Berry Berry Treat 
1302225,//Chocolate Shortcake
1302232,//Japanese War Fan
1302233,//Fire Katana
1302234,//Blazing Sword
1302235,//Green Blazing Sword
1302236,//Blue Blazing Sword
1302237,//Purple Blazing Sword
1302238,//Evergreen Sabre
1302239,//Slate Thunder Sabre
1302240,//Dark Magenta Sabre
1302241,//Twilight Sabre
1302242,//Bloody Ruby Sabre
1302243,//Ombra & Luce Sabre
1302244,//Soild Black Sabre
1302245,//Rainbow Sabre
1302284,//Crescent Blade
//1- Axe
1312000,//Double Axe
1312001,//Battle Axe
1312002,//Scythe
1312003,//Mithril Axe
1312005,//Fireman's Axe
1312006,//Dankke
1312007,//Blue Counter
1312008,//Buck
1312009,//Hawkhead
1312010,//Mikhail
1312011,//Gaea
1312012,//Hula Hoop
1312013,//Green Paint Brush
1312014,//Black Paint Brush
1312015,//Vifennis
1312016,//Contra Axe
1312018,//Buck
1312030,//Tomahawk
1312031,//Dragon Axe
1312121,//Blazing Sword
1312122,//Green Blazing Sword
1312123,//Blue Blazing Sword
1312124,//Purple Blazing Sword
1312125,//Evergreen Sabre
1312126,//Slate Thunder Sabre
1312127,//Dark Magenta Sabre
1312128,//Twilight Sabre
1312129,//Bloody Ruby Sabre
1312130,//Ombra & Luce Sabre
1312131,//Soild Black Sabre
1312132,//Rainbow Sabre
//1-h Mace
1322000,//Mace
1322001,//Hammer
1322002,//Iron Mace
1322003,//Lollipop
1322004,//Fusion Mace
1322006,//Steel Pipe
1322007,//Leather Purse
1322008,//Hard Briefcase
1322009,//Plunger
1322010,//Square Shovel
1322011,//Pointed Shovel
1322012,//Red Brick
1322014,//War Hammer
1322015,//Heavy Hammer
1322016,//Jacker
1322017,//Knuckle Mace
1322018,//Tamus
1322019,//The Judgement
1322020,//Bent Judgement
1322021,//Black Tube
1322022,//Red Flowery Tube
1322023,//Blue Flowery Tube
1322024,//Purple Tube
1322025,//Emergency Rescue Tube
1322026,//Colorful Tube
1322027,//Frying Pan
1322028,//Heaven's Justice
1322029,//Ruin Hammer
1322031,//Pig Illustrated
1322032,//Iron Hammer
1322045,//Battle Hammer
1322051,//Fruity Bamboo
1322052,//Dragon Mace
1322062,//Crushed Skull
1322063,//Duck tube
1322064,//Duck tube
1322092,//Lollipop
1322155,//Fatty Mini Bean
1322156,//Mysterious Book
1322157,//Fiery Fox
1322158,//Sticky Bunny Cake
1322159,//Berry Berry Treat 
1322160,//Lollistar
1322167,//Blazing Sword
1322168,//Green Blazing Sword
1322169,//Blue Blazing Sword
1322170,//Purple Blazing Sword
1322171,//Evergreen Sabre
1322172,//Slate Thunder Sabre
1322173,//Dark Magenta Sabre
1322174,//Twilight Sabre
1322175,//Bloody Ruby Sabre
1322176,//Ombra & Luce Sabre
1322177,//Soild Black Sabre
1322178,//Rainbow Sabre
1322188,//Impact Rifle
1322209,//Crystal Crusher
//Dagger
1332000,//Triangular Zamadar
1332001,//Halfmoon Zamadar
1332002,//Triple-Tipped Zamadar
1332003,//Shinkita
1332004,//Forked Dagger
1332005,//Razor
1332006,//Field Dagger
1332007,//Fruit Knife
1332008,//Coconut Knife
1332009,//Cass
1332010,//Iron Dagger
1332011,//Bazlud
1332031,//Dragon Toenail
1332012,//Reef Claw
1332013,//Stinger
1332014,//Gephart
1332015,//Deadly Fin
1332016,//Sai
1332017,//Serpent's Coil
1332018,//Kandine
1332019,//Golden River
1332020,//Korean Fan
1332021,//Plastic Bottle
1332022,//Angelic Betrayal
1332023,//Dragon's Tail
1332024,//Bushido
1332026,//Cursayer
1332027,//Varkit
1332029,//Liu Bei Dagger
1332030,//Fan
1332049,//Dragon Kanzir
1332050,//Dragon Kreda
1332051,//Gold Double Knife
1332052,//Blood Dagger
1332053,//Kebob
1332054,//Diamond Dagger
1332077,//Raven's Beak
1332078,//Night Raven's Beak
1332079,//Dawn Raven's Beak
1332080,//Dusk Raven's Beak
1332198,//Pepe Beak
1332199,//Slime Stick
1332200,//Zhu-Ge-Liang Wand
1332201,//Liu Bei Sword
1332202,//Bone Weapon
1332206,//Dual Plasma Blade
1332231,//The 18th Blade
1332242,//Red Cutter
//Katara
1342000,//Champion Katara
1342001,//Guardian Katara
1342002,//Justice Katara
1342003,//Majestic Katara
1342004,//Ascalon Katara
1342005,//Heavenly Katara
1342006,//Blazing Dragon Katara
1342007,//Bloodsoaked Katara
1342008,//Meteor Katara
1342010,//Moonshadow Katara
1342035,//Blood Blossom Katara
1342087,//Red Katara
//Kodachi Hayato Sub Weapon?
//1352800,//White Tiger Blade
//1352801,//Blue Dragon Blade
//1352802,//Lake Monster Blade
//1352803,//Fire Phoenix Blade
//Sub weapon Beast Tamer?
//1352810,//Tiny Whisper
//1352811,//Friend's Whisper
//1352812,//Tutelary Whisper
//1352813,//Mother Nature Whisper
//Cane
1362001,//Novice Cane
1362002,//Iron Cane
1362003,//Noble Stick
1362004,//Croix Canne
1362005,//Rouge Way
1362006,//Arc-en-ciel
1362007,//Twisted
1362008,//Oriental Royal Cane
1362009,//Bijou Canne
1362010,//Regne
1362011,//Majesty Cane
1362012,//Phantom Originality
1362013,//Celestial Cane
1362015,//Dragon Permanche
1362063,//Mysterious Book
1362064,//Fiery Fox
1362065,//Fatty Mini Bean
1362066,//Sticky Bunny Cake
//Wand
1372000,//Fairy Wand
1372001,//Wizard Wand
1372002,//Metal Wand
1372003,//Mithril Wand
1372004,//Ice Wand
1372005,//Wooden Wand
1372006,//Hardwood Wand
1372007,//Cromi
1372008,//Hinomaru Fan
1372009,//Magicodar
1372010,//Dimon Wand
1372011,//Zhu-Ge-Liang Wand
1372012,//Crystal Wand
1372014,//Evil Tale
1372015,//Angel Wings
1372016,//Phoenix Wand
1372017,//Streetlight
1372031,//Heart Staff
1372032,//Dragon Wand
1372062,//Strawberry Soft Serve Wand
1372134,//Sticky Bunny Cake
1372135,//Fatty Mini Bean
1372136,//Fiery Fox
1372143,//Burning Marshmellow
1372144,//Horoscope Sword
1372145,//Sun Quan Staff
1372146,//Heart Key
1372147,//Boleadoras
1372148,//Serpent Staff 
1372149,//Skull Staff
1372150,//Evan Wand
1372151,//Pink Angel Stick
1372152,//Burning Breeze Fan
1372153,//Sunset Seraphim
1372154,//Heartbreak Sword
1372155,//MapleGirl Wand
1372156,//Patriot Seraphim
1372157,//Lord Tempest
1372158,//Galactic Legend
//Staff
1382000,//Wooden Staff
1382001,//Arc Staff
1382002,//Wizard Staff
1382003,//Sapphire Staff
1382004,//Old Wooden Staff
1382005,//Emerald Staff
1382006,//Thorns
1382007,//Evil Wings
1382008,//Kage
1382010,//Dark Ritual
1382011,//Mystic Cane
1382014,//Sun Quan Staff
1382015,//Poison Mushroom
1382016,//Pyogo Mushroom
1382017,//Circle-Winded Staff
1382018,//Petal Staff
1382019,//Hall Staff
1382035,//Blue Marine
1382036,//Dragon Staff
1382037,//Doomsday Staff
1382041,//Nocturnal Staff
1382164,//Sticky Bunny Cake
1382165,//Fatty Mini Bean
1382166,//Fiery Fox
1382173,//Royal Oaken Staff
1382174,//Horoscope Sword
1382175,//Sun Quan Staff
1382176,//Heart Key
1382177,//Boleadoras
1382178,//Serpent Staff 
1382179,//Skull Staff
1382180,//Evan Wand
1382181,//Pink Angel Stick
1382182,//Burning Breeze Fan
1382183,//Sunset Seraphim
1382184,//Heartbreak Sword
1382185,//MapleGirl Wand
1382186,//Patriot Seraphim
1382187,//Lord Tempest
1382188,//Galactic Legend
1382215,//White Cloth Book
1382216,//Black Book of Magic
1382226,//Red Staff
//2-h Sword
1402000,//Two-Handed Sword
1402001,//Wooden Sword
1402002,//Scimitar
1402003,//Lion's Fang
1402004,//Blue Screamer
1402005,//Berzerker
1402006,//Lionheart
1402007,//Zard
1402008,//Broadsword
1402009,//Wooden Baseball Bat
1402010,//Aluminum Baseball Bat
1402011,//Sparta
1402012,//Doombringer
1402013,//Japanese Map
1402014,//Thermometer
1402015,//Heaven's Gate
1402016,//Devil's Sunrise
1402017,//Daiwa Sword
1402018,//Wooden Samurai Sword
1402029,//Aluminum Bat
1402035,//The Beheader
1402036,//Dragon Claymore
1402037,//Stonetooth Sword
1402044,//Pumpkin Lantern
1402045,//Tiger's Fang
1402048,//Raven's Wing 
1402049,//Night Raven's Wing
1402050,//Dawn Raven's Wing 
1402051,//Dusk Raven's Wing
1402147,//Orca Bro
1402148,//Chocolate Banana
1402149,//Ambassador Scythe
1402157,//Guitar
1402158,//Blue Guitar
1402159,//Rock Stick
1402160,//Scissor Stick
1402161,//Paper Stick
1402162,//Horoscope Net
1402163,//Laser Sword
1402164,//Moon Baton
1402165,//Flame Tongue
1402166,//Crissagrim Blade
1402167,//Mercury Sword
1402168,//Tania Sword
1402169,//Fire Katana
1402214,//Red Two-handed Sword
//2-h Axe
1412000,//Two-Handed Axe
1412001,//Metal Axe
1412002,//Steel Axe
1412003,//The Rising
1412004,//Niam
1412005,//Sabretooth
1412006,//Blue Axe
1412007,//The Shining
1412008,//Chrono
1412009,//Helios
1412010,//Colonian Axe
1412012,//Iron Axe
1412021,//Tavar
1412026,//Dragon Battle Axe
1412109,//Rock Stick
1412110,//Scissor Stick
1412111,//Paper Stick
1412112,//Horoscope Net
1412113,//Laser Sword
1412114,//Moon Baton
1412115,//Flame Tongue
1412116,//Crissagrim Blade
1412117,//Mercury Sword
1412118,//Tania Sword
1412119,//Skull Axe
//2-h Mace
1422000,//Wooden Mallet
1422001,//Mithril Maul
1422002,//Heavy Mace
1422003,//Square Hammer
1422004,//Monkey Wrench
1422005,//Golden Mole
1422006,//Pickaxe
1422007,//Titan
1422008,//Sledgehammer
1422009,//The Blessing
1422010,//Gigantic Sledge
1422011,//Sake Bottle
1422012,//The Morningstar
1422013,//Leomite
1422027,//Golden Smith Hammer
1422028,//Dragon Flame
1422030,//Pink Seal Cushion
1422031,//Blue Seal Cushion
1422036,//Toymaker Hammer
1422112,//Rock Stick
1422113,//Scissor Stick
1422114,//Paper Stick
1422115,//Horoscope Net
1422116,//Laser Sword
1422117,//Moon Baton
1422118,//Flame Tongue
1422119,//Crissagrim Blade
1422120,//Mercury Sword
1422121,//Tania Sword
1422128,//Electric Saw
1422156,//Red Maul
//Spear
1432000,//Spear
1432001,//Fork on a Stick
1432002,//Forked Spear
1432003,//Nakamaki
1432004,//Serpent's Tongue
1432005,//Zeco
1432006,//Holy Spear
1432007,//Redemption
1432008,//Fish Spear
1432010,//Omega Spear
1432011,//Fairfrozen
1432013,//Pumpkin Spear
1432015,//Red Ski
1432016,//Orange Ski
1432017,//Green Ski
1432018,//Sky Ski
1432030,//Pinaka
1432038,//Dragon Faltizan
1432039,//Fishing Pole
1432048,//Pooh Pooh Shovel
1432056,//Stormshear
1432132,//Bamboo Spear
1432136,//Ambassador Scythe
1432137,//American Hot Dog
1432143,//Crissagrim Blade
1432144,//Mercury Sword
1432145,//Red Rose
1432146,//Guan Yu Spear
1432147,//Dragon's Fury
1432182,//Red Spear
//PoleArm
1442000,//Polearm
1442001,//Mithril Polearm
1442002,//Eviscerator
1442003,//Axe Polearm
1442004,//Janitor's Mop
1442005,//The Nine Dragons
1442006,//Iron Ball
1442007,//Studded Polearm
1442008,//The Gold Dragon
1442009,//Crescent Polearm
1442010,//Skylar
1442011,//Surfboard
1442012,//Sky Snowboard
1442013,//Aqua Snowboard
1442014,//Silver Snowboard
1442015,//Golden Snowboard
1442016,//Dark Snowboard
1442017,//Blood Snowboard
1442018,//Frozen Tuna
1442019,//Eclipse
1442020,//Hellslayer
1442021,//Yellow Mop
1442022,//White Mop
1442023,//Maroon Mop
1442025,//Guan Yu Polearm
1442026,//Red Surfboard
1442027,//Green Surfboard
1442028,//Black Surfboard
1442029,//Gold Surfboard
1442030,//Maple Snowboard
1442039,//Frozen Tuna
1442044,//Zedbug
1442045,//Dragon Hellslayer
1442046,//Super Snowboard
1442047,//Yellow Valentine Rose
1442048,//Red Valentine Rose
1442049,//Blue Valentine Rose
1442050,//White Valentine Rose
1442057,//Purple Surfboard
1442065,//Tsunami Wave
1442066,//Bullseye Board
1442068,//Crimson Arcglaive
1442121,//Swift Warrior Rose
1442122,//Frantic Warrior Rose
1442123,//Enraged Warrior Rose
1442157,//Maple Snowboard
1442169,//Eviscerator
1442174,//Sky Surfboard
1442175,//Aqua Surfboard
1442176,//Silver Surfboard
1442177,//Golden Surfboard
1442178,//Dark Surfboard
1442179,//Blood Surfboard
1442192,//Crissagrim Blade
1442193,//Mercury Sword
1442194,//Red Rose
1442195,//Guan Yu Spear
1442196,//Dragon's Fury
1442197,//Green Electric Guitar
1442198,//Brown Electric Guitar
1442199,//Black Electric Guitar
//Bow
1452000,//Battle Bow
1452001,//Hunter's Bow
1452002,//War Bow
1452003,//Composite Bow
1452004,//Asianic Bow
1452005,//Ryden
1452006,//Red Viper
1452007,//Vaulter 2000
1452008,//Olympus
1452009,//Red Hinkel
1452010,//Blue Hinkel
1452011,//Golden Hinkel
1452012,//Marine Arund
1452013,//Fire Arund
1452014,//Golden Arund
1452015,//Dark Arund
1452017,//Metus
1452018,//Bow of Magical Destruction
1452019,//White Nisrock
1452020,//Golden Nisrock
1452021,//Dark Nisrock
1452023,//Cao Cao Bow
1452025,//Blue Metus
1452026,//Black Metus
1452044,//Dragon Shiner Bow
1452053,//Winkel
1452060,//Crimson Arclancer
1452166,//Fiery Fox
1452167,//Reinforced Golden Chick
1452175,//Cherub's Bow
1452176,//Cupid's Bow
1452177,//Ancient Korean Bow
1452178,//Horoscope Bow
1452179,//Cao Cao Bow
1452180,//Shiner
1452181,//Green Shiner
1452182,//Blue Shiner 
1452183,//Purple Shiner
1452184,//Red Shiner
1452185,//Rainbow Bow
1452186,//Wild Hunter Crossbow
1452220,//Red Bow
//Crossbow
1462000,//Mountain Crossbow
1462001,//Crossbow
1462002,//Battle Crossbow
1462003,//Balanche
1462004,//Eagle Crow
1462005,//Heckler
1462006,//Silver Crow
1462007,//Rower
1462008,//Golden Crow
1462009,//Gross Jaeger
1462010,//Marine Raven
1462011,//Fire Raven
1462012,//Golden Raven
1462013,//Dark Raven
1462015,//White Neschere
1462016,//Golden Neschere
1462017,//Dark Neschere
1462018,//Casa Crow
1462021,//Dark Crow
1462022,//Yellow Crow
1462039,//Dragon Shiner Cross
1462052,//Raven's Eye
1462053,//Night Raven's Eye
1462054,//Dawn Raven's Eye
1462055,//Dusk Raven's Eye
1462164,//Toy RIfle
1462165,//Meso Gunner
1462166,//Cupid's Crossbow
1462167,//Blue Shiner Crossbow
1462168,//Pink Shiner Crossbow
1462169,//Horoscope Crossbow
1462170,//Toy Machine Gun
1462171,//Water Gun
1462172,//Rainbow Bow
1462173,//Wild Hunter Crossbow
1462207,//Swift Wings
1462208,//Red Crossbow
//Claw
1472000,//Garnier
1472001,//Steel Titans
1472002,//Mithril Titans
1472003,//Gold Titans
1472004,//Bronze Igor
1472005,//Steel Igor
1472006,//Adamantium Igor
1472007,//Meba
1472008,//Steel Guards
1472009,//Mithril Guards
1472010,//Adamantium Guards
1472011,//Bronze Guardian
1472012,//Silver Guardian
1472013,//Dark Guardian
1472014,//Steel Avarice
1472015,//Blood Avarice
1472016,//Adamantium Avarice
1472017,//Dark Avarice
1472018,//Steel Slain
1472019,//Blood Slain
1472020,//Sapphire Slain
1472021,//Dark Slain
1472022,//Bronze Gigantic
1472023,//Blood Gigantic
1472024,//Sapphire Gigantic
1472025,//Dark Gigantic
1472026,//Brown Scarab
1472027,//Green Scarab
1472028,//Blue Scarab
1472029,//Black Scarab
1472031,//Black Mamba
1472033,//Casters
1472051,//Dragon Green Sleeve
1472052,//Dragon Purple Sleeve
1472053,//Red Craven
1472054,//Shinobi Bracer
1472062,//Black Hole
1472064,//Neva
1472072,//Raven's Claw
1472073,//Night Raven's Claw
1472074,//Dawn Raven's Claw
1472075,//Dusk Raven's Claw
1472184,//Hook Hand
1472185,//Tiger Paw
1472186,//Knockout Boxing Gloves
1472187,//Big Hand
1472188,//Transparent Claw
1472189,//Horoscope Claw
1472190,//Smackdown Fist
1472191,//Bionic Claw
1472192,//Blue Fist of Fury
1472193,//Red Fist of Fury
1472194,//Ice Flower
1472230,//Red Steer 
//Knuckler
1482000,//Steel Knuckler
1482001,//Leather Arms
1482002,//Double Tail Knuckler
1482003,//Norman Grip
1482004,//Prime Hands
1482005,//Silver Maiden
1482006,//Neozard
1482007,//Fury Claw
1482008,//Seraphims
1482009,//Beia Crash
1482010,//Steel Renault
1482011,//White Fangz
1482012,//King Cent
1482013,//Dragon Slash Claw
1482065,//Puppy Paw Knuckle
1482145,//Blackbeard's Knuckle
1482146,//Tiger Paw Knuckle
1482147,//Metallic Arm
1482148,//Lightning Soul
1482183,//Red Knuckle
//Pistol
1492000,//Pistol
1492001,//Dellinger Special
1492002,//The Negotiator
1492003,//Golden Hook
1492004,//Cold Mind
1492005,//Shooting Star
1492006,//Lunar Shooter
1492007,//Mr. Rasfelt
1492008,//Burning Hell
1492009,//Abyss Shooter
1492010,//Infinity's Wrath
1492011,//The Peacemaker
1492012,//Concerto
1492013,//Dragon Revolver
1492157,//The Jackal
1492158,//Saw Machine Gun
1492194,//Red Gun
//Dual Bowgun
1522000,//Trusty & Faithful
1522001,//Blinding Light
1522002,//Elven Diplomacy
1522003,//Songs of Nature
1522004,//Twin Angels
1522005,//Proud Blossoms
1522006,//The Argents
1522007,//Judge & Jury
1522008,//Lunar Glory
1522009,//Twin Zephyrs
1522010,//Sylvan Hunters
1522011,//Royal Decrees
1522012,//Final Retorts
1522014,//Dragon Majesty
//Cannon
1532000,//Novice Cannon
1532001,//Solid Cannon
1532002,//Ironside
1532003,//Steel Beast
1532004,//Heavy Artillery
1532005,//Titan Cannon
1532006,//Grand Cannon
1532007,//Dreadnought
1532008,//The Bigshot
1532009,//Infernalizer
1532010,//Deck Sweeper
1532011,//Bilge Breaker
1532012,//Gilded Giant 
1532014,//Dragon Breaker
1532112,//Red Cannon
//Katana (Hayato)
1542000,//Simple Iron Sword
1542001,//Tempered Steel Sword
1542002,//Iron Guardian
1542003,//Bare Blade
1542004,//Iron Savior
1542005,//Death's Whisper
1542006,//Helix
1542007,//Heat Wave
1542008,//Battle Cry
1542009,//Gilded Sword
1542010,//Phoenix Rising
1542011,//Mist Cutter
//Fan
1552000,//Iron Fan
1552001,//Metallic Fan
1552002,//Triple Fan
1552003,//Crane Fan
1552004,//Fan of Enlightenment
1552005,//Melodic Fan
1552006,//Unique Fan
1552008,//Erupting Fan
1552007,//Leaf-Patterned Fan
1552009,//Clear Skies
1552010,//Crossed Fan
1552011,//Florist's Fan
1562002,//Lapis Type 2
1562003,//Lapis Type 3
1562004,//Lapis Type 4
1562005,//Lapis Type 5
1562006,//Lapis Type 6
1562007,//Lapis Type 7
1572002,//Lazuli Type 2
1572003,//Lazuli Type 3
1572004,//Lazuli Type 4
1572005,//Lazuli Type 5
1572006,//Lazuli Type 6
1572007,//Lazuli Type 7
//Overall
1050027,//Black Mage Robe
1050001,//Brown Doros Robe
1050002,//Blood Chaos Robe
1050003,//Blue Wizard Robe
1050005,//Blue Kendo Robe
1052104,//Brown Turk Gally
1050008,//Beige Plain Robe
1050009,//Blue Plain Robe
1051095,//Blue Oriental Fury Coat
1050011,//Black Dragon Robe
1050035,//Brown Starlight
1051097,//Black Oriental Fury Coat
1050038,//Blue Starlight
1051008,//Blue Avenger
1050045,//Blue Calas
1052101,//Beige Carribean
1050021,//Blue Crusader Chainmail
1052098,//Brown Cotton Lagger
1050023,//Blue Doros Robe
1051102,//Blue Bazura
1050059,//Blue Tai
1051012,//Blue Engrit
1052119,//Black Royal Barone
1050030,//Blue Chaos Robe
1051079,//Blue Battle Empress
1052076,//Blue Czar
1050067,//Blue Requiem
1051015,//Blood Fitted Mail
1050069,//Brown Requiem
1052075,//Blue Dragon Armor
1052095,//Brown Rocky Suit
1050073,//Blue Enigmatic
1052072,//Black Garina
1051062,//Blue Lineros
1050076,//Blue Pris
1051083,//Blue Anes
1051063,//Beige Lineros
1051067,//Blue Pria
1050052,//Blue-Lined Kismet
1050053,//Blue Anakamoon
1051042,//Blue Choro
1051043,//Brown Choro
1051044,//Blue Anakarune
1051052,//Blue Requierre
1050061,//Blue Linnex
1050062,//Beige Linnex
1051054,//Brown Requierre
1051248,//Blue Choro
1050097,//Blue Katinas
1051091,//Blue Katte
1050103,//Blue Varuna
1050107,//Blue Arzuna
1051106,//Blue Armis
1050082,//Blue Battle Lord
1050089,//Blue Ades
1051242,//Blood Fitted Mail
1050095,//Black Oriental Fury Coat
1050127,//Bath Towel (Black)
1051240,//Brown Doroness Robe
1050093,//Blue Oriental Fury Coat
1051003,//Brown Doroness Robe
1051025,//Blue Moonlight
1051027,//Brown Moonlight
1051032,//Blue Calaf
1052110,//Blue Brace Look
1052107,//Brown Pollard
1051037,//Blue Lumati
1052217,//Cloud Robe
1052134,//Canopus Suit
1052244,//Cotton Uniform
1051093,//Dark Katte
1050039,//Dark Starlight
1051058,//Dark Enigma
1050022,//Dark Crusader Chainmail
1050029,//Dark Chaos Robe
1050064,//Dark Linnex
1051080,//Dark Battle Empress
1050070,//Dark Requiem
1050074,//Dark Enigmatic
1050078,//Dark Pris
1050049,//Dark Calas
1050056,//Dark Anakamoon
1051250,//Dark Lineros
1050099,//Dark Katinas
1051065,//Dark Lineros
1051085,//Dark Anes
1051104,//Dark Bazura
1051069,//Dark Pria
1051047,//Dark Anakarune
1050091,//Dark Ades
1051055,//Dark Requierre
1051030,//Dark Calaf
1051006,//Dark Avenger
1050083,//Dark Battle Lord
1051026,//Dark Moonlight
1051010,//Dark Engrit
1050105,//Dark Varuna
1051001,//Emerald Fitted Mail
1052465,//Fearless Warrior's Armor
1050010,//Green Plain Robe
1050037,//Green Starlight
1050028,//Green Wizard Robe
//1052608,//Gold Label Knight Suit Zero
//1052609,//Gold Label Knight Suit
1050072,//Green Enigmatic
1050077,//Green Pris
1050063,//Green Linnex
1050096,//Green Katinas
1050102,//Green Varuna
1050106,//Green Arzuna
1050080,//Green Battle Lord
1050090,//Green Ades
1050092,//Green Oriental Fury Coat
1051038,//Green Lumati
1051056,//Green Enigma
1051064,//Green Lineros
1051068,//Green Pria
1051090,//Green Katte
1051094,//Green Oriental Fury Coat
1051101,//Green Bazura
1051084,//Green Anes
1051105,//Green Armis
1052116,//Green Plasteer
1052469,//Invincible Agent Suit
1052482,//Kanna's Robes
1051360,//Legion Dress
1050294,//Legion Plate
1051289,//Mesoranger Shadow Suit
1050237,//Mesoranger Red Suit
1051287,//Mesoranger Pink Suit
1050240,//Mesoranger Black Suit
1051288,//Mesoranger Yellow Suit
1052638,//Maple Racer Suit
1052463,//Musashi's Armor
1050239,//Mesoranger Blue Suit
1050238,//Mesoranger Green Suit
1050047,//Orange Calas
1051034,//Orange Calaf
1050058,//Orange Tai
1052569,//Pinnacle Suit
1051009,//Purple Avenger
1051057,//Purple Enigma
1051023,//Purple Moonlight
1051004,//Purple Doroness Robe
1050036,//Red Starlight
1050046,//Red Calas
1050108,//Red Arzuna
1050068,//Red Requiem
1051039,//Red Lumati
1051017,//Red Sauna Robe
1051066,//Red Pria
1051011,//Red Engrit
1051033,//Red Calaf
1051041,//Red Choro
1051045,//Red Anakarune
1051053,//Red Requierre
1051024,//Red Moonlight
1051092,//Red Katte
1051096,//Red Oriental Fury Coat
1051103,//Red Bazura
1050006,//Red Kendo Robe
1050094,//Red Oriental Fury Coat
1051107,//Red Armis
1052122,//Red Viska
1052113,//Red Barbay
1050104,//Red Varuna
1050098,//Red Katinas
1052071,//Red Mantle
1050088,//Red Ades
1052131,//Red Belly Duke
1050060,//Red Tai
1051007,//Red Avenger
1050081,//Red Battle Lord
1051078,//Red Battle Empress
1050054,//Red Anakamoon
1051005,//Red Doroness Robe
1051082,//Red Anes
1050051,//Red-Lined Kismet
1052648,//Royal Adventure Suit
1052649,//Royal Adventure Suit
1052650,//Royal Adventure Suit
1052651,//Royal Adventure Suit
1052652,//Royal Adventure Suit
1050075,//Red Pris
1051016,//Silver Fitted Mail
1051014,//Sapphire Fitted Mail
1051000,//Steel Fitted Mail
1052128,//White Marquini
1050007,//White Kendo Robe
1050025,//White Doros Robe
1050182,//Western Cowboy
1050055,//White Anakamoon
1050026,//White Wizard Robe
1052637,//Wolf Suit
1050031,//White Chaos Robe
1051031,//White Calaf
1052125,//White Pioneer
1051046,//White Anakarune
1050000,//White Crusader Chainmail
1052464,//Warrior's Armor
1050048,//White Calas
1050024,//Yellow Doros Robe
1051013,//Yellow Engrit
1051077,//Yellow Battle Empress
//Rings
//1112932,//Goddess' Guard Ring Investigate Effect
1112408,//Circle of Ancient Strength
1112407,//Circle of Ancient Thought
1112750,//Friends Ring
1112920//Zombie Army Ring    
    };
    //10%, 60% scrolls, pvp level 130 equips, mastery books

    public static void loadWheelRewards(List<Integer> items, int token, MapleCharacter chr) {
        int rank = token;
        int[] rewards = rank == 4400000 ? wheelRewardsC : rank == 4400005 ? wheelRewardsMaple :rank == 4400001 ? wheelRewardsB : rank == 4400003 ? wheelRewardsHerbalist : rank == 4400004 ? wheelRewardsMining : wheelRewardsA;
        for (int i = 0; i < 10; i++) {
            if (GameConstants.isLuminous(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212002) && rank == 4400000) {
                items.add(1212002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212003) && rank == 4400000) {
                items.add(1212003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212004) && rank == 4400000) {
                items.add(1212004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212005) && rank == 4400000) {
                items.add(1212005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212006) && rank == 4400000) {
                items.add(1212006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212007) && rank == 4400000) {
                items.add(1212007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212008) && rank == 4400000) {
                items.add(1212008);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1212010) && rank == 4400000) {
                items.add(1212010);
            }
            }
            if (GameConstants.isDemonAvenger(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232002) && rank == 4400000) {
                items.add(1232002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232003) && rank == 4400000) {
                items.add(1232003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232004) && rank == 4400000) {
                items.add(1232004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232005) && rank == 4400000) {
                items.add(1232005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232006) && rank == 4400000) {
                items.add(1232006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232007) && rank == 4400000) {
                items.add(1232007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232008) && rank == 4400000) {
                items.add(1232008);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1232010) && rank == 4400000) {
                items.add(1232010);
            }
            }
            if (GameConstants.isXenon(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242002) && rank == 4400000) {
                items.add(1242002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242003) && rank == 4400000) {
                items.add(1242003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242004) && rank == 4400000) {
                items.add(1242004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242005) && rank == 4400000) {
                items.add(1242005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242006) && rank == 4400000) {
                items.add(1242006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242007) && rank == 4400000) {
                items.add(1242007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242008) && rank == 4400000) {
                items.add(1242008);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1242010) && rank == 4400000) {
                items.add(1242010);
            }
            }
            if (GameConstants.isBeastTamer(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252010) && rank == 4400000) {
                items.add(1252010);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252002) && rank == 4400000) {
                items.add(1252002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252003) && rank == 4400000) {
                items.add(1252003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252004) && rank == 4400000) {
                items.add(1252004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252005) && rank == 4400000) {
                items.add(1252005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252006) && rank == 4400000) {
                items.add(1252006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252007) && rank == 4400000) {
                items.add(1252007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1252008) && rank == 4400000) {
                items.add(1252008);
            }
            }
            if (GameConstants.isAngelicBuster(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222002) && rank == 4400000) {
                items.add(1222002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222003) && rank == 4400000) {
                items.add(1222003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222004) && rank == 4400000) {
                items.add(1222003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222005) && rank == 4400000) {
                items.add(1222005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222006) && rank == 4400000) {
                items.add(1222006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222007) && rank == 4400000) {
                items.add(1222007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222008) && rank == 4400000) {
                items.add(1222008);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1222010) && rank == 4400000) {
                items.add(1222010);
            }
            }
            if (GameConstants.isKanna(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552001) && rank == 4400000) {
                items.add(1552001);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552002) && rank == 4400000) {
                items.add(1552002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552003) && rank == 4400000) {
                items.add(1552003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552004) && rank == 4400000) {
                items.add(1552004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552005) && rank == 4400000) {
                items.add(1552005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552006) && rank == 4400000) {
                items.add(1552006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552007) && rank == 4400000) {
                items.add(1552007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552008) && rank == 4400000) {
                items.add(1552008);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552009) && rank == 4400000) {
                items.add(1552009);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552010) && rank == 4400000) {
                items.add(1552010);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1552011) && rank == 4400000) {
                items.add(1552011);
            }
            }
            if (GameConstants.isHayato(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542011) && rank == 4400000) {
                items.add(1542011);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542001) && rank == 4400000) {
                items.add(1542001);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542002) && rank == 4400000) {
                items.add(1542002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542003) && rank == 4400000) {
                items.add(1542003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542004) && rank == 4400000) {
                items.add(1542004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542005) && rank == 4400000) {
                items.add(1542005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542006) && rank == 4400000) {
                items.add(1542006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542007) && rank == 4400000) {
                items.add(1542007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542008) && rank == 4400000) {
                items.add(1542008);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542009) && rank == 4400000) {
                items.add(1542009);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1542010) && rank == 4400000) {
                items.add(1542010);
            }
            }
            if (GameConstants.isZero(chr.getJob()) && rank != 4400003 && rank != 4400004) {
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1562002) && rank == 4400000) {
                items.add(1562002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1562003) && rank == 4400000) {
                items.add(1562003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1562004) && rank == 4400000) {
                items.add(1562004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1562005) && rank == 4400000) {
                items.add(1562005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1562006) && rank == 4400000) {
                items.add(1562006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1562007) && rank == 4400000) {
                items.add(1562007);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1572002) && rank == 4400000) {
                items.add(1572002);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1572003) && rank == 4400000) {
                items.add(1572003);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1572004) && rank == 4400000) {
                items.add(1572004);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1572005) && rank == 4400000) {
                items.add(1572005);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1572006) && rank == 4400000) {
                items.add(1572006);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(1572007) && rank == 4400000) {
                items.add(1572007);
            }
            }
            if (Randomizer.nextInt(500) <= 1 && !items.contains(4031349) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(4031349);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122380) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122380);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122385) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122385);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122390) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122390);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122395) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122395);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122400) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122400);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122405) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122405);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122410) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122410);
            }
            if (Randomizer.nextInt(10000) <= 1 && !items.contains(1122415) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(1122415);
            }
            if (Randomizer.nextInt(100) <= 1 && !items.contains(2431935) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(2431935);
            }
            if (Randomizer.nextInt(200) <= 1 && !items.contains(2431936) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(2431936);
            }
             if (Randomizer.nextInt(250) <= 1 && !items.contains(2048314) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(2048314);
            }
            if (Randomizer.nextInt(150) <= 1 && rank == 4400000 && !items.contains(4400001) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(4400001);
            }
            if (Randomizer.nextInt(500) <= 1 && rank == 4400001 && !items.contains(4400002) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(4400002);
            }
            if (Randomizer.nextInt(1000) <= 1 && !items.contains(5640000) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(5640000);
            }
            if (Randomizer.nextInt(10) <= 1 && rank == 4400003) {
                items.add(2028066);
            }
            if (Randomizer.nextInt(10) <= 1 && rank == 4400004) {
                items.add(2028067);
            }
            if (Randomizer.nextInt(300) <= 1 && rank == 4400004 && !items.contains(4021010)) {
                items.add(4021010);
            }
            if (Randomizer.nextInt(1000) <= 1 && !items.contains(5640000) && rank != 4400003 && rank != 4400004 && rank != 4400005) {
                items.add(5640000);
            }
            if (Randomizer.nextInt(10) <= 1 && rank == 4400005 && !items.contains(2049121)) {
                items.add(2049121);
            }
               else {
                int item = rewards[Randomizer.nextInt(rewards.length)];
                while (items.contains(item)) {
                    item = rewards[Randomizer.nextInt(rewards.length)];
                }
                items.add(item);
            }
        }
    }

    public static List<Integer> getSealedBoxItems(int itemId) { 
        List<Integer> list = new LinkedList(); 
        int[] items = {}; 
        switch (itemId) { 
            case 2028154://sealed box hat 
                items = new int[]{
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1003797,
1003798,
1003799,
1003800,
1003801
                }; 
                break; 
            case 2028155://sealed box Overall 
                items = new int[]{
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1042254,
1042255,
1042256,
1042258,
1042257,
1062165,
1062169,
1062166,
1062167,
1062168
                }; 
                break; 
            case 2028156://sealed box Shoes, gloves 
                items = new int[]{
1082135,
1082136,
1082137,
1082138,
1082139,
1082140,
1082141,
1082151,
1082152,
1082153,
1082154,
1082158,
1082159,
1082160,
1082216,
1082163,
1082164,
1082167,
1082168,
1072213,
1072214,
1072215,
1072216,
1072318,
1072321,
1072220,
1072221,
1072222,
1072223,
1072224,
1072225,
1072226,
1072227,
1072228,
1072229,
1072268,
1072269,
1072272,
1072273,
5062006,
                }; 
                break; 
            case 2028161://sealed box weapons 
                items = new int[]{
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1302275,
1312153,
1322203,
1402196,
1412135,
1422140,
1432167,
1442223,
1232057,
1542063,
1212063,
1372177,
1382208,
1252015,
1452205,
1462193,
1522094,
1242060,
1332225,
1362090,
1472214,
1222058,
1242061,
1482168,
1492179,
1532098
}; 
                break; 
            case 2028162://chaos sealed box hat 
                items = new int[]{
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1002398,
1002399,
1002400,
1002401,
1002406,
1002407,
1002408,
1002377,
1002378,
1002379,
1002380,
1002381,
1002382,
1002383,
1002646,
1002649,
1002547,
1002550,
1002551,
1002773,
5062006,
1003797,
1003798,
1003799,
1003800,
1003801
}; 
                break; 
            case 2028163://chaos sealed box Overall 
                items = new int[]{
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1040120,
1040121,
1040122,
1041122,
1041123,
1041124,
1060109,
1060110,
1060111,
1061121,
1061122,
1061123,
1051090,
1051091,
1051092,
1051093,
1051105,
1051106,
1051107,
1050096,
1050097,
1050098,
1050099,
1052131,
1052134,
1050106,
1050107,
1050108,
1052075,
1052076,
1052071,
1052072,
5062006,
1042254,
1042255,
1042256,
1042258,
1042257,
1062165,
1062169,
1062166,
1062167,
1062168                
}; 
                break; 
            case 2028164://chaos sealed box Shoes, gloves 
                items = new int[]{
1082135,
1082136,
1082137,
1082138,
1082139,
1082140,
1082141,
1082151,
1082152,
1082153,
1082154,
1082158,
1082159,
1082160,
1082216,
1082163,
1082164,
1082167,
1082168,
1072213,
1072214,
1072215,
1072216,
1072318,
1072321,
1072220,
1072221,
1072222,
1072223,
1072224,
1072225,
1072226,
1072227,
1072228,
1072229,
1072268,
1072269,
1072272,
1072273,
5062006
}; 
                break; 
            case 2028165://chaos sealed box weapons 
                items = new int[]{
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1212035,
1222035,
1232035,
1242035,
1252020,
1302213,
1312112,
1322151,
1332187,
1332188,
1342066,
1362061,
1372132,
1382159,
1402143,
1412100,
1422103,
1432133,
1442171,
1452163,
1462153,
1472175,
1492136,
1522067,
1532071,
1542040,
1552040,
5062006,
1302275,
1312153,
1322203,
1402196,
1412135,
1422140,
1432167,
1442223,
1232057,
1542063,
1212063,
1372177,
1382208,
1252015,
1452205,
1462193,
1522094,
1242060,
1332225,
1362090,
1472214,
1222058,
1242061,
1482168,
1492179,
1532098 
}; 
                break; 
        } 
        for (int i : items) { 
            list.add(i); 
        } 
        return list; 
    }  
    
    
        public static List<Integer> getMasteryBook(int itemId) {
        List<Integer> list = new LinkedList();
        int[] items = {};
        switch (itemId) {
            case 2290868:
                items = new int[]{2510028, 1050104, 1052131, 1050106, 1050099,
                    1050107, 1052072, 1050098, 1050096, 1052076, 1051101,
                    1041122, 1052071, 2510035, 1061123, 1051106, 1050103,
                    1040122, 2510023, 1052075, 2510022};
                break;
            case 2290869:
                items = new int[]{1082151, 1082153, 1082213, 1072223, 1072272,
                    1072269, 1072226, 1082168, 1082167, 1072222, 2510050,
                    1082159, 2510072, 1082139, 1082154, 1082140, 1072321,
                    1072273, 2510066, 1072215, 2510068};
                break;
        }
        for (int i : items) {
            list.add(i);
        }
        return list;
    }

    public static boolean isStealSkill(int skillId) {
        switch (skillId) {
            case 24001001:
            case 24101001:
            case 24111001:
            case 24121001:
                return true;
        }
        return false;
    }

    public static int getStealSkill(int job) {
        switch (job) {
            case 1:
                return 24001001;
            case 2:
                return 24101001;
            case 3:
                return 24111001;
            case 4:
                return 24121001;
        }
        return 0;
    }

    public static int getNumSteal(int jobNum) {
        switch (jobNum) {
            case 1:
                return 4;
            case 2:
                return 4;
            case 3:
                return 3;
            case 4:
                return 2;
        }
        return 0;
    }

    public static boolean canSteal(Skill skil) {
        return skil != null && !skil.isMovement() && !isLinkedAttackSkill(skil.getId()) && skil.getId() % 10000 >= 1000 && getJobNumber(skil.getId() / 10000) > 0 && !isDualBlade(skil.getId() / 10000) && !isCannon(skil.getId() / 10000) && !isJett(skil.getId() / 10000) && skil.getId() < 8000000 && skil.getEffect(1) != null && skil.getEffect(1).getSummonMovementType() == null && !skil.getEffect(1).isUnstealable();
    }

    public static boolean isHyperSkill(Skill skill) {
        if (skill.isHyper() || skill.getHyper() > 0) {
            return true;
        }
        if (skill.isBeginnerSkill()) {
            return false;
        }
        return skill.getId() % 1000 >= 30;
    }

    public static boolean isTutorialMap(int mapid) {
        if (mapid < 100000000) { //Explorer & Cannoneer
            return true;
        } else if (mapid / 100 == 1030509) { //Dual Blade
            return true;
        } else if (mapid / 10000 == 13003) { //Cygnus
            return true;
        } else if (mapid / 100000 == 9000) { //Evan
            return true;
        } else if (mapid / 10000 == 91015) { //Mercedes
            return true;
        } else if (mapid / 10000 == 91307) { //Mihile
            return true;
        } else if (mapid / 10000 == 91400) { //Aran
            return true;
        } else if (mapid / 10000 == 91500) { //Phantom
            return true;
        } else if (mapid / 10000 == 93100) { //Resistance
            return true;
        } else if (mapid / 10000 == 93105) { //Demon Slayer
            return true;
        }
        return false;
        //There might be included other maps like main town or job advancements,
        //But we don't care since you don't get much exp here and you're locked on teasers.
    }
    /*

     public static enum QuickMove {

     //NPC1(9070004, 0, 30, "Move to the Battle Mode zone #cBattle Square#, where you can fight against other users.\n#cLv. 30 or above can participate in Battle Square."),
     NPC2(9010022, 2, 10, "Use the #cDimensional Mirror# to move to a variety of party quests."),
     //NPC3(9071003, 1, 20, "Move to the party zone \n#cMonster Park#, where you can fight against strong monsters with your party members.\n#cOnly Lv. 20 or above can participate in the Monster Park."),
     //NPC4(9000086, 5, 0, "Move to the closest #cIntercontinental Station# to your current location."),
     NPC5(9000087, 3, 0, "Move to the #cFree Market#, where you can trade items with other users."),
     NPC6(9000088, 4, 30, "Move to #cArdentmill#, the town of Professions.\n#cOnly Lv. 30 or above can move to Ardentmill");
     //NPC7(9000089, 6, 0, "Take the #cTaxi# to move to major areas quickly."),
     //NPC8(9010041, 10, 30, "Receive Part-Time Job reward.");
     //tempest:
     //NPC9(9000123, 13, 1, "You can get a stylish haircut from Big Headward."),
     //NPC10(9000124, 14, 1, "You can get plastic surgery from Dr. Plastic Roy.");
     /* types:
     * 0: Maximus (Battle Arena)
     * 1: Monster Park Shuttle
     * 2: Dimensional Mirror
     * 3: Free Market
     * 4: Ardentmill
     * 5: Boat
     * 6: Taxi
     * 7: Randolf (Legends Shop)
     * 8: Lucia (Legends Shop)
     * 9: Conor (Renegades Shop)
     * 10: Ms. Appropriation (Part-Time Job)
     * 13: Big Headward (hairstyle)
     * 14: Dr. Plastic Roy (plastic surgey)
     * /
     private int npc, type, level;
     private String description;

     QuickMove(int npc, int type, int level, String description) {
     this.npc = npc;
     this.type = type;
     this.level = level;
     this.description = description;
     }

     public int getNpc() {
     return npc;
     }

     public int getType() {
     return type;
     }

     public int getLevel() {
     return level;
     }

     public String getDescription() {
     return description;
     }

     public QuickMove getByNpc(int npc) {
     for (QuickMove q : QuickMove.values()) {
     if (npc == q.getNpc()) {
     return q;
     }
     }
     return null;
     }

     public static byte[] getQuickMoveData(MapleCharacter chr) { //Not completed yet
     MaplePacketLittleEndianWriter mplew = new MaplePacketLittleEndianWriter();
     MapleMap map = chr.getMap();

     for (MapleNPC npc : map.getAllNPCs()) {
     for (QuickMove q : QuickMove.values()) {
     if (npc.getId() == q.getNpc()) {
     mplew.writeMapleAsciiString(""); //npc name?
     mplew.writeInt(q.getNpc());
     mplew.writeInt(q.getType());
     mplew.writeInt(q.getLevel());
     mplew.writeMapleAsciiString(q.getDescription());
     }
     }
     }

     return mplew.getPacket();
     }
     }
     public static final int[] quickMoveNpcIds = {9070004, 9010022, 9071003, 9000086, 9000087, 9000088, 9000089, 9010041};
     public static final int[] quickMoveNpcsTypes = {0, 2, 1, 5, 3, 4, 6, 10};
     public static final int[] quickMoveNpcsLevel = {30, 10, 20, 0, 0, 30, 0, 30};
     public static final String[] quickMoveNpcs = {"Move to the Battle Mode zone #cBattle Square#, where you can fight against other users.\n#cLv. 30 or above can participate in Battle Square.", "Use the #cDimensional Mirror# to move to a variety of party quests.", "Move to the party zone \n#cMonster Park#, where you can fight against strong monsters with your party members.\n#cOnly Lv. 20 or above can participate in the Monster Park.", "Move to the closest #cIntercontinental Station# to your current location.", "Move to the #cFree Market#, where you can trade items with other users.", "Move to #cArdentmill#, the town of Professions.\n#cOnly Lv. 30 or above can move to Ardentmill", "Take the #cTaxi# to move to major areas quickly.", "Receive Part-Time Job reward."};
    
     */
    //questID; FAMILY USES 19000x, MARRIAGE USES 16000x, EXPED USES 16010x
    //dojo = 150000, bpq = 150001, master monster portals: 122600
    //compensate evan = 170000, compensate sp = 170001
    public static final int OMOK_SCORE = 122200;
    public static final int MATCH_SCORE = 122210;
    public static final int HP_ITEM = 122221;
    public static final int MP_ITEM = 122222;
    public static final int BUFF_ITEM = 122223;
    public static final int PART_JOB = 122750;
    public static final int PART_JOB_REWARD = 122751;
    public static final int JAIL_TIME = 123455;
    public static final int JAIL_QUEST = 123456;
    public static final int REPORT_QUEST = 123457;
    public static final int PLAYER_INFORMATION = 123568;
    public static final int ULT_EXPLORER = 111111;
    //codex = -55 slot
    //crafting/gathering are designated as skills(short exp then byte 0 then byte level), same with recipes(integer.max_value skill level)
    public static final int AFFINITY_HEARTIV = 122900;
    public static final int ENERGY_DRINK = 122500;
    public static final int HARVEST_TIME = 122501;
    public static final int PENDANT_SLOT = 122700;
    public static final int CURRENT_SET = 122800;
    public static final int BOSS_PQ = 150001;
    public static final int CUSTOM_BANK = 150002;
    public static final int JAGUAR = 111112;
    public static final int DOJO = 150100;
    public static final int DOJO_RECORD = 150101;
    public static final int PARTY_REQUEST = 122900;
    public static final int PARTY_INVITE = 122901;
    public static final int QUICK_SLOT = 123000;
    public static final int ITEM_TITLE = 124000;

     private static int[] dmgskinitem = {2431965, 2431966, 2432084, 2431967, 2432131, 2432153, 2432638, 2432659, 2432154, 2432637, 2432658, 2432207, 2432354, 2432355, 2432972, 2432465, 2432479, 2432526, 2432639, 2432660, 2432532, 2432592, 2432640, 2432661, 2432710, 2432836, 2432973};
    private static int[] dmgskinnum = {0, 1, 1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 11, 12, 13, 14, 14, 15, 16, 17};

    public static int getDamageSkinNumberByItem(int itemid) {
        for (int i = 0; i < dmgskinitem.length; i++) {
            if (dmgskinitem[i] == itemid) {
                return dmgskinnum[i];
            }
        }
        return -1;
    }

    public static int getDamageSkinItemByNumber(int num) {
        for (int i = 0; i < dmgskinnum.length; i++) {
            if (dmgskinnum[i] == num) {
                return dmgskinitem[i];
            }
        }
        return -1;
    }

    public static Integer[] getDamageSkinsTradeBlock() {
        ArrayList<Integer> skins = new ArrayList<>();
        for (int i = 0; i < dmgskinitem.length; i++) {
            if (MapleItemInformationProvider.getInstance().isOnlyTradeBlock(dmgskinitem[i])) {
                skins.add(dmgskinitem[i]);
               
            }
        }
//        System.out.println(skins.size());
        Integer list[] = new Integer[skins.size()];
        return skins.toArray(list);
    }

    public static boolean isBeastTamer(final int job) {
        return job == 11212;//gms like for now
        //return job == 11000 || (job >= 11200 && job <= 11212);
    }

}
